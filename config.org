#+TITLE: Alex Koen's Emacs configuration

I have now been using Emacs as my primary editor for almost two years. Most of the time, it feels like piloting an inter-galactic starship through the turbulence of spacetime, free from the sluggishness of earthbound life. The rest of time, I feel like printing out my config and lighting it on fire.

Regardless, Emacs is tremendous fun. I have made every possible effort to write clean, well-document code but there are bound to be bugs and inconsistencies.

If you are looking for inspiration, here are the configurations from which I draw inspiration.
| [[https://github.com/hlissner/doom-emacs]] |
| [[https://github.com/rememberYou/.emacs.d]] |
| https://github.com/raxod502/radian/blob/develop/emacs/radian.el |
| https://github.com/CSRaghunandan/.emacs.d/tree/master/setup-files |

#+end_src
Alright, let's do this:
* Usage
** Use-package

Usage of :preface, :init, :config
#+begin_src emacs-lisp :tangle no
(use-package example
  ;; Note that errors are never trapped in the preface, since doing so would
  ;; hide definitions from the byte-compiler.
  :preface (message "I'm here at byte-compile and load time.")
  :init (message "I'm always here at startup")
  :config
  (message "I'm always here after the package is loaded"))
#+end_src


* Initialization
** Lexical Binding

[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][Lexical binding]] improves performance.

#+begin_src emacs-lisp :tangle yes :comments no
;;; init.el --- The personal Emacs configuration of Alex Koen -*- lexical-binding: t; -*-
#+end_src

** Performance Optimizations
*** Garbage collector

The garbage collector eats up a lot of time during startup, so turn up its memory threshold to prevent it from getting triggered.

#+begin_src emacs-lisp :tangle yes
(setq gc-cons-threshold (* 100 1024 1024)
      gc-cons-percentage 0.6)
#+end_src

** Personal Information

#+begin_src emacs-lisp :tangle yes
(setq user-full-name "Alex Koen"
      user-mail-address "alex@koen.ca")
#+end_src

** Secrets
#+begin_src emacs-lisp :tangle yes
(load-file (concat emacs-dir "secrets.el"))
#+end_src

** Macros & Functions

use-feature from [[https://github.com/raxod502/radian/blob/develop/emacs/radian.el]]. Tells straight not to look for a package.
#+begin_src emacs-lisp :tangle yes
(defmacro use-feature (name &rest args)
  "Like `use-package', but with `straight-use-package-by-default' disabled.
NAME and ARGS are as in `use-package'."
  (declare (indent defun))
  `(use-package ,name
     :straight nil
     ,@args))
#+end_src

** Exec Path From Shell

This sets the variable exec-path to the normal shell's PATH variable. This doesn't normally get set in daemon mode.

[[https://www.reddit.com/r/emacs/comments/f8xwau/hack_replace_execpathfromshell/fioa62n/]]
#+begin_src emacs-lisp :tangle yes
(use-package exec-path-from-shell
  :config
  (cond ((display-graphic-p)
         (setq exec-path
               (or (eval-when-compile
                     (when (require 'exec-path-from-shell nil t)
                       (setq exec-path-from-shell-check-startup-files nil)
                       (nconc exec-path-from-shell-variables '("SSH_AUTH_LOCK" "PATH" "NNN_PLUG"))
                       (exec-path-from-shell-initialize)
                       exec-path))
                   exec-path)))))
#+end_src
** Set Directories

Note that system directories are set in init.el

#+begin_src emacs-lisp :tangle yes
(defconst docs-dir "~/Documents/"
  "The root Drive directory, where all documents are stored.")

(defconst archive-dir (concat docs-dir "Archive/")
  "Archive directory")

(defconst org-dir "~/Org/"
  "Org directory")

(defconst journal-dir "~/Journal/"
  "Org directory")

(defconst brain-dir "~/Brain/org/"
  "Braindump directory")

(defconst dotfiles-dir "~/.dotfiles/"
  "Dotfiles directory")
#+end_src

Move files are folders to appropriate locations:
#+begin_src emacs-lisp :tangle yes
(setq bookmarks-default-file (concat emacs-etc-dir "bookmarks")
      tramp-auto-save-directory (concat emacs-cache-dir "tramp-auto-save/")
      tramp-backup-directory-alist backup-directory-alist
      tramp-persistency-file-name (concat emacs-cache-dir "tramp-persistency.el"))
#+end_src

*** Start Up Profiler

https://github.com/jschaf/esup

#+begin_src emacs-lisp :tangle yes
(use-package esup
  :commands esup)
#+end_src
* Better Defaults
** Asynchronously tangle literate config

Tangling this org file into config.el at every startup is slow. This code is borrowed from https://github.com/rememberYou/.emacs.d/blob/master/config.org

#+begin_src emacs-lisp :tangle yes
(use-package async)
(defun my--async-babel-tangle (org-file)
  "Tangles the org file asynchronously."
  (let ((init-tangle-start-time (current-time))
        (file (buffer-file-name))
        (async-quiet-switch "-q"))
    (async-start
     `(lambda ()
        (require 'org)
        (org-babel-tangle-file ,org-file))
     (unless *show-async-tangle-results*
       `(lambda (result)
          (if result
              (message "SUCCESS: %s successfully tangled (%.2fs)."
                       ,org-file
                       (float-time (time-subtract (current-time)
                                                  ',init-tangle-start-time)))
            (message "ERROR: %s as tangle failed." ,org-file)))))))
#+end_src

** Misc
#+begin_src emacs-lisp :tangle yes
(setq vc-follow-symlinks t           ; don't ask for confirmation when opening symlinked file
      indent-tabs-mode nil           ; prefer spaces
      tab-width	4                    ; set width for tabs
      ring-bell-function 'ignore     ; silent bell when you make a mistake
      x-select-enable-clipboard t    ; allow pasting selection outside of emacs
      kill-buffer-query-functions nil
      initial-major-mode 'org-mode
      initial-scratch-message nil
      delete-by-moving-to-trash t    ; move files to trash when deleting
      sentence-end-double-space nil) ; end sentences with a single space
#+end_src

** Backups

By default, Emacs saves backups relative to the current directory. This is abhorrent. We change this.

#+begin_src emacs-lisp :tangle yes
(setq make-backup-files t ; make backups file even when in version controlled dir
      create-lockfiles nil ; they cause problems
      backup-directory-alist (list (cons "." (concat emacs-cache-dir "backups/")))
      backup-by-copying t  ; Don't delink hardlinks
      version-control t  ; Use version numbers on backups
      delete-old-versions t  ; Automatically delete excess backups
      kept-new-versions 20  ; how many of the newest versions to keep
      kept-old-versions 5  ; and how many of the old
      auto-save-list-file-prefix (concat emacs-cache-dir "autosave/"))
#+end_src

** Revert

Automatically reload buffers on file change

#+begin_src emacs-lisp :tangle yes
(global-auto-revert-mode 1)
#+end_src

** Helpful

#+begin_src emacs-lisp :tangle yes
(use-package helpful
  :commands helpful--read-symbol
  :init
  (global-set-key [remap describe-function] #'helpful-callable)
  (global-set-key [remap describe-command]  #'helpful-command)
  (global-set-key [remap describe-variable] #'helpful-variable)
  (global-set-key [remap describe-key]      #'helpful-key)
  (global-set-key [remap describe-symbol]   #'helpful-symbol)

  ;; Remap counsel keybinds to helpful commands
  (with-eval-after-load 'counsel
    (setq counsel-describe-function-function #'helpful-callable
          counsel-describe-variable-function #'helpful-variable))
  :config
  ;; By default, evil shadows helpful keys
  (evil-define-key 'normal helpful-mode-map "q" 'quit-window)

  ;; Always select help window when opened
  (setq help-window-select t))
#+end_src
** Which Key

A small buffer which shows the list of commands you can execute next.

#+begin_src emacs-lisp :tangle yes
(use-package which-key
  :init
  (setq which-key-separator " ")
  (setq which-key-prefix-prefix "+")
  :config
  (which-key-mode 1))
#+END_SRC
** No littering

#+begin_src emacs-lisp :tangle yes
(use-package no-littering
  :config
  (with-eval-after-load 'recentf
    (add-to-list 'recentf-exclude no-littering-var-directory)
    (add-to-list 'recentf-exclude no-littering-etc-directory))

  (setq auto-save-file-name-transforms
	`((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

  ;; no-littering changes default snippets directory, so I changed it back.
  (add-to-list 'yas-snippet-dirs
	       (expand-file-name "snippets" user-emacs-directory)))
#+end_src
* Appearance
** Theme

Doom one is beautiful

#+begin_src emacs-lisp :tangle yes
(use-package doom-themes
  :custom-face
  (font-lock-comment-face ((t (:slant italic))))

  :config
  (load-theme 'doom-spacegrey t)
  (doom-themes-org-config))
#+end_src

** Text
*** Font

#+begin_src emacs-lisp :tangle yes
(add-to-list 'default-frame-alist '(font . "JetBrains Mono-10" ))
(set-face-attribute 'default nil :font "JetBrains Mono-10" :height 100)
#+end_src

** Disable unecessary UI elements
*** Tool Bar

#+begin_src emacs-lisp :tangle yes
(menu-bar-mode -1)
(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
#+end_src

*** Startup Screen

#+begin_src emacs-lisp :tangle yes
(setq inhibit-startup-screen t)	; inhibit useless and old-school startup screen
#+end_src

** Prompts

Make yes or no prompts be y or n prompts

#+begin_src emacs-lisp :tangle yes
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Relative line numbers

#+begin_src emacs-lisp :tangle yes
(global-display-line-numbers-mode t)
(global-hl-line-mode +1)
(setq display-line-numbers-type 'relative
      display-line-numbers-grow-only t)
;; Prevent lines from being shifted when order of magnitude increases.
(setq display-line-numbers-width-start t)

;; Disable line numbers for some modes
(dolist (mode '(term-mode-hook
                shell-mode-hook
                treemacs-mode-hook
                olivetti-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Show matching parentheses

#+begin_src emacs-lisp :tangle yes
(setq show-paren-delay 0)
(show-paren-mode 1)
#+end_src

** Smooth Scrolling

Copied from Doom Emacs

#+begin_src emacs-lisp :tangle yes
(setq hscroll-margin 2
      hscroll-step 1
      ;; Emacs spends too much effort recentering the screen if you scroll the
      ;; cursor more than N lines past window edges (where N is the settings of
      ;; `scroll-conservatively'). This is especially slow in larger files
      ;; during large-scale scrolling commands. If kept over 100, the window is
      ;; never automatically recentered.
      scroll-conservatively 101
      scroll-margin 0
      scroll-preserve-screen-position t
      ;; Reduce cursor lag by a tiny bit by not auto-adjusting `window-vscroll'
      ;; for tall lines.
      auto-window-vscroll nil
      ;; mouse
      mouse-wheel-scroll-amount '(5 ((shift) . 2))
      mouse-wheel-progressive-speed nil)  ; don't accelerate scrolling

#+end_src
** all-the-icons

#+begin_src emacs-lisp :tangle yes
(use-package all-the-icons)
#+end_src

** smartparens

[[https://github.com/Fuco1/smartparens][Utility]] for managing parenthesis in Emacs

#+begin_src emacs-lisp :tangle yes
(use-package smartparens
  :init
  ;; Don't highlight - overly distracting
  (setq sp-highlight-pair-overlay nil
        sp-highlight-wrap-overlay nil
        sp-highlight-wrap-tag-overlay nil)
  :config
  ;; automatically add newline between braces
  (dolist (brace '("(" "{" "["))
    (sp-pair brace nil :post-handlers '(:add ("||\n[i]" "RET"))))
  (smartparens-global-mode 1))
#+end_src

** All the icons
#+begin_src emacs-lisp :tangle yes
(use-package all-the-icons
  :defer t)
#+end_src

** Doom-modeline

A fancy and fast mode-line inspired by minimalistic design

#+begin_src emacs-lisp :tangle yes
(use-package doom-modeline
  :init (doom-modeline-mode 1))
#+end_src

** hl-todo

Highlights keywords in comments

#+begin_src emacs-lisp :tangle yes
(use-package hl-todo
  :hook (prog-mode . hl-todo-mode)
  :config
  (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        `(;; For things that need to be done, just not today.
          ("TODO" warning bold)
          ;; For problems that will become bigger problems later if not
          ;; fixed ASAP.
          ("FIXME" error bold)
          ;; For tidbits that are unconventional and not intended uses of the
          ;; constituent parts, and may break in a future update.
          ("HACK" font-lock-constant-face bold)
          ;; For things that were done hastily and/or hasn't been thoroughly
          ;; tested. It may not even be necessary!
          ("REVIEW" font-lock-keyword-face bold)
          ;; For especially important gotchas with a given implementation,
          ;; directed at another user other than the author.
          ("NOTE" success bold)
          ;; For things that just gotta go and will soon be gone.
          ("DEPRECATED" font-lock-doc-face bold))))
#+end_src
* Keybindings
** Unbind RET

Unbind return from evil, so that org-return-follows-link works.
#+begin_src emacs-lisp :tangle yes
(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "RET") nil))
#+end_src

** General

Space is the best leader key.

#+begin_src emacs-lisp :tangle yes
(use-package general
  :after which-key
  :config
  (general-override-mode)
  (general-evil-setup)

  (general-create-definer leader-key
    :states '(normal insert visual motion emacs)
    :keymaps 'override
    :prefix "SPC"
    :non-normal-prefix "M-SPC")

  (leader-key
    ;; Misc
    "u" 'universal-argument

    ;; Buffer
    "bb" 'switch-to-buffer
    "br" 'revert-buffer
    "`" 'evil-switch-to-windows-last-buffer

    ;; Code
    "cc" 'counsel-compile

    ;; Eval
    "eb" 'eval-buffer
    "ed" 'eval-defun
    "ee" 'eval-last-sexp
    "ef" 'load-file
    "er" 'eval-region
    "el" 'load-library

    ;; Files
    "." 'find-file
    "ff" 'dired-jump
    "fr" 'counsel-recentf
    "fs" 'save-buffer

    ;; Magit
    "gg" 'magit-status
    "gfh" 'magit-log-buffer-file

    ;; Language
    "le" 'english-mode
    "lg" 'writing-mode
    "ls" 'flyspell-mode
    "lb" 'ispell-buffer

    ;; Org mode
    "oa" 'org-agenda
    "oc" 'org-capture
    "or" 'org-roam
    "oi" 'org-roam-insert
    "of" 'org-roam-find-file
    "og" 'org-roam-graph
    "ojj" 'org-journal-new-entry
    "oje" 'org-journal-new-scheduled-entry
    "ojs" 'org-journal-search-forever

    ;; Search
    "so" 'my--ivy-org-jump-to-file-heading
    "sO" 'my--ivy-org-jump-to-agenda-heading
    "sb" 'swiper
    "sp" 'counsel-projectile-rg

    ;; Projects
    "SPC" 'projectile-find-file
    "pp" 'counsel-projectile-switch-project
    "pi" 'projectile-invalidate-cache
    "pk" 'projectile-kill-buffers
    "pd" 'my--projectile-find-file-in-project-dotfiles
    "pt" 'my--projectile-find-file-in-project-tasks
    "pc" 'my--projectile-find-file-in-project-config

    ;; Terminal
    "tn" 'vterm-other-window
    ))
#+end_src

** Hydra

[[https://github.com/abo-abo/hydra][Hydra]] is a package that allows for families of short keybindings to be defined.

#+BEGIN_QUOTE
Once you summon the Hydra through the prefixed binding (the body + any one head), all heads can be called in succession with only a short extension.

The Hydra is vanquished once Hercules, any binding that isn't the Hydra's head, arrives. Note that Hercules, besides vanquishing the Hydra, will still serve his original purpose, calling his proper command. This makes the Hydra very seamless, it's like a minor mode that disables itself auto-magically.
#+END_QUOTE

#+begin_src emacs-lisp :tangle yes
(use-package hydra
  :bind ("C-x C-=" . hydra-zoom/body))
#+end_src

*** Zooming

#+begin_src emacs-lisp :tangle yes
(defhydra hydra-zoom ()
  "zoom"
  ("+" text-scale-increase "in")
  ("=" text-scale-increase "in")
  ("-" text-scale-decrease "out")
  ("_" text-scale-decrease "out")
  ("0" (text-scale-adjust 0) "reset")
  ("q" nil "quit" :color blue))
#+end_src

** Undo

#+begin_src emacs-lisp :tangle yes
(use-package undo-tree
  :custom
  (undo-tree-visualizer-diff t)
  (undo-tree-auto-save-history t)
  (undo-tree-enable-undo-in-region t)
  :config
  (global-undo-tree-mode +1))
#+end_src

** EVIL

Allows for traditional vim bindings inside of emacs

#+begin_src emacs-lisp :tangle yes
;; load evil
(use-package evil
  :after undo-tree
  :custom
  (evil-undo-system 'undo-tree)
  :init
  (setq evil-search-module 'evil-search
        evil-ex-substitute-global t
        evil-esc-mode nil ;; performance. Only used for jj/jk type mappings
        evil-want-C-u-scroll t)

  (setq evil-want-keybinding nil) ;; use evil-collection instead
  :bind
  ;; (("C-f" . forward-word)
  ;; ("C-b" . backward-word))
  :config ;; tweak evil after loading it
  ;; Make movement keys work like they should
  (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
  (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
  (define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
  (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
                                        ; Make horizontal movement cross lines                                    
  (setq-default evil-cross-lines t)
  (evil-mode 1))
#+end_src

*** EVIL-Collection
#+begin_src emacs-lisp :tangle yes
(use-package evil-collection
  :after evil
  :config
  (setq evil-collection-mode-list (delete 'vterm evil-collection-mode-list)) ;; Otherwise throws error
  (setq evil-collection-company-use-tng nil)
  (evil-collection-init))
#+end_src

*** A more peaceful keyboard-quit

This code allows us to quit basically everything using ESC.

#+begin_src emacs-lisp :tangle yes
(defvar my--escape-hook nil
  "A hook run when esc is pressed")

(defun escape-quit ()
  "Run `my--escape-hook'."
  (interactive)
  (cond ((minibuffer-window-active-p (minibuffer-window))
         ;; quit the minibuffer if open.
         (abort-recursive-edit))
        ;; Run all escape hooks. If any returns non-nil, then stop there.
        ((run-hook-with-args-until-success 'my--escape-hook))
        ;; don't abort macros
        ((or defining-kbd-macro executing-kbd-macro) nil)
        ;; Back to the default
        ((keyboard-quit))))

(global-set-key [remap keyboard-quit] #'escape-quit)
#+end_src

*** evil-surround

This package emulates surround.vim by Tim Pope.

#+begin_src emacs-lisp :tangle yes
(use-package evil-surround
  :config
  (global-evil-surround-mode 1))
#+end_src

*** evil-nerd-commenter
#+begin_src emacs-lisp :tangle yes
(use-package evil-nerd-commenter
  :general
  (general-nmap "gcc" 'evilnc-comment-or-uncomment-lines))
#+end_src

*** evil-snipe

Allows for quick movement to 2-char sequences.

#+begin_src emacs-lisp :tangle yes
(use-package evil-snipe
  :config
  (evil-snipe-mode +1))
#+end_src
*** winner-mode

Pressing Q restores the window configuration to the last state. Useful for killing compilation buffers etc. Redo with C-c right

#+begin_src emacs-lisp :tangle yes
(use-feature winner
  :after evil
  :config
  ;; We do not want to defer since winner does not start logging until
  ;; it is loaded
  (bind-key "Q" #'winner-undo evil-normal-state-map)
  (winner-mode 1))
#+end_src
* Completion
** Company

#+begin_src emacs-lisp :tangle yes
(use-package company
  :defer 0.5
  :bind (:map company-active-map
         ("<tab>" . #'company-complete-selection)
         ("TAB" . #'company-complete-selection))
  :config
  ;; Make completions display faster
  (setq company-idle-delay 0.15)
  ;; don't downcase results from company-dabbrev
  (setq company-dabbrev-downcase nil)
  ;; use only buffers with same major-mode for company-dabbrev
  (setq company-dabbrev-other-buffers t)
  ;; Make completions display when you have only typed one character,
  ;; instead of three.
  (setq company-minimum-prefix-length 1))
#+end_src

** Yasnippet

A package with which you can insert code or text snippets based on templates.

We define a function to autocomplete snippets. See [[https://github.com/joaotavora/yasnippet/issues/998]]
#+begin_src emacs-lisp :tangle yes
(use-package yasnippet
  :general
  (leader-key "cy" (defhydra hydra-yas (:color blue
                                        :hint nil)
              "
_i_nsert    _n_ew       _v_isit
_r_eload    e_x_pand    _?_ list
"
              ("i" yas-insert-snippet)
              ("n" yas-new-snippet)
              ("v" yas-visit-snippet-file)
              ("r" yas-reload-all)
              ("x" yas-expand)
              ("?" yas-describe-tables)
              ("q" nil "cancel" :color blue)))
  ;; Bind C-j to yas-expand. Taken from https://github.com/KaratasFurkan/.emacs.d/blob/master/README.org#yasnippet-snippet-completion
  :bind*
  (("C-j" . yas-expand)
   :map yas-minor-mode-map
   ("TAB" . nil)
   ("<tab>" . nil)
   :map yas-keymap
   ("TAB" . (lambda () (interactive) (company-abort) (yas-next-field)))
   ("<tab>" . (lambda () (interactive) (company-abort) (yas-next-field))))
  :init
  ;; Automatically expand snippet when # condition: 'auto is used in snippet header
  (defun my--yas-try-expanding-auto-snippets ()
    (when (and (boundp 'yas-minor-mode) yas-minor-mode)
      (let ((yas-buffer-local-condition ''(require-snippet-condition . auto)))
        (yas-expand))))

  :config
  ;; Disable successful loading messages
  (setq yas-verbosity 2)

  (yas-global-mode 1))
#+END_SRC

** Ivy

#+begin_src emacs-lisp :tangle yes
(use-package ivy
  :defer 1 ;; wait one second before loading
  :config
  (setq ivy-height 15
        ivy-wrap t
        ;; don't use ^ as initial input
        ivy-initial-inputs-alist nil
        ;; highlight til EOL
        ivy-format-function #'ivy-format-function-line
        ;; don't show recent files in switch-buffer
        ivy-use-virtual-buffers nil
        ;; don't quit minibuffer on delete-error
        ivy-on-del-error-function nil
        ;; enable ability to select prompt
        ivy-use-selectable-prompt t)

  (ivy-mode 1))
#+end_src
** Ivy-Rich

#+begin_src emacs-lisp :tangle yes
(use-package ivy-rich
  :after (ivy counsel)
  :preface
  (defun ivy-rich-branch-candidate (candidate)
    "Displays the branch candidate of the candidate for ivy-rich."
    (let ((candidate (expand-file-name candidate ivy--directory)))
      (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
          ""
        (format "%s%s"
                (propertize
                 (replace-regexp-in-string abbreviated-home-dir "~/"
                                           (file-name-directory
                                            (directory-file-name candidate)))
                 'face 'font-lock-doc-face)
                (propertize
                 (file-name-nondirectory
                  (directory-file-name candidate))
                 'face 'success)))))

  (defun ivy-rich-compiling (candidate)
    "Displays compiling buffers of the candidate for ivy-rich."
    (let* ((candidate (expand-file-name candidate ivy--directory)))
      (if (or (not (file-exists-p candidate)) (file-remote-p candidate)
              (not (magit-git-repo-p candidate)))
          ""
        (if (my--projectile-compilation-buffers candidate)
            "compiling"
          ""))))

  (defun ivy-rich-file-group (candidate)
    "Displays the file group of the candidate for ivy-rich"
    (let ((candidate (expand-file-name candidate ivy--directory)))
      (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
          ""
        (let* ((group-id (file-attribute-group-id (file-attributes candidate)))
               (group-function (if (fboundp #'group-name) #'group-name #'identity))
               (group-name (funcall group-function group-id)))
          (format "%s" group-name)))))

  (defun ivy-rich-file-modes (candidate)
    "Displays the file mode of the candidate for ivy-rich."
    (let ((candidate (expand-file-name candidate ivy--directory)))
      (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
          ""
        (format "%s" (file-attribute-modes (file-attributes candidate))))))

  (defun ivy-rich-file-size (candidate)
    "Displays the file size of the candidate for ivy-rich."
    (let ((candidate (expand-file-name candidate ivy--directory)))
      (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
          ""
        (let ((size (file-attribute-size (file-attributes candidate))))
          (cond
           ((> size 1000000) (format "%.1fM " (/ size 1000000.0)))
           ((> size 1000) (format "%.1fk " (/ size 1000.0)))
           (t (format "%d " size)))))))

  (defun ivy-rich-file-user (candidate)
    "Displays the file user of the candidate for ivy-rich."
    (let ((candidate (expand-file-name candidate ivy--directory)))
      (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
          ""
        (let* ((user-id (file-attribute-user-id (file-attributes candidate)))
               (user-name (user-login-name user-id)))
          (format "%s" user-name)))))

  (defun ivy-rich-switch-buffer-icon (candidate)
    "Returns an icon for the candidate out of `all-the-icons'."
    (with-current-buffer
        (get-buffer candidate)
      (let ((icon (all-the-icons-icon-for-mode major-mode :height 0.9)))
        (if (symbolp icon)
            (all-the-icons-icon-for-mode 'fundamental-mode :height 0.9)
          icon))))
  :config
  (plist-put ivy-rich-display-transformers-list
             'counsel-find-file
             '(:columns
               ((ivy-rich-candidate               (:width 73))
                (ivy-rich-file-user               (:width 8 :face font-lock-doc-face))
                (ivy-rich-file-group              (:width 4 :face font-lock-doc-face))
                (ivy-rich-file-modes              (:width 11 :face font-lock-doc-face))
                (ivy-rich-file-size               (:width 7 :face font-lock-doc-face))
                (ivy-rich-file-last-modified-time (:width 30 :face font-lock-doc-face)))))
  (plist-put ivy-rich-display-transformers-list
             'ivy-switch-buffer
             '(:columns
               ((ivy-rich-switch-buffer-icon       (:width 2))
                (ivy-rich-candidate                (:width 40))
                (ivy-rich-switch-buffer-size       (:width 7))
                (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
                (ivy-rich-switch-buffer-major-mode (:width 20 :face warning)))
               :predicate (lambda (cand) (get-buffer cand))))
  (ivy-rich-mode 1))
#+end_src

*** Flx

Sublime-text fuzzy matching for Emacs. Package used following Doom's ivy configuration.

#+begin_src emacs-lisp :tangle yes
(use-package flx
  :defer t  ; loaded by ivy
  :init
  (setq ivy-re-builders-alist
        '((counsel-ag . ivy--regex-plus)
          (counsel-rg . ivy--regex-plus)
          (counsel-grep . ivy--regex-plus)
          (swiper . ivy--regex-plus)
          (swiper-isearch . ivy--regex-plus)
          (t . ivy--regex-fuzzy))
        ivy-initial-inputs-alist nil))
#+end_src

** Counsel

Counsel contains ivy enhancements for commonly-used functions.

#+begin_src emacs-lisp :tangle yes
(use-package counsel
  :demand
  :diminish (ivy-mode . "")
  :bind
  (("C-x b" . ivy-switch-buffer)
   ("C-x C-f" . counsel-find-file))
  :config
  (define-key ivy-minibuffer-map [escape] 'minibuffer-keyboard-quit)

  ;; Search Debug folders for makefiles
  (add-to-list 'counsel-compile-build-directories "Debug")

  (ivy-add-actions
   'counsel-find-file
   `(("b" counsel-find-file-cd-bookmark-action "cd bookmark")
     ("s" counsel-find-file-as-root "open as root")
     ("m" counsel-find-file-mkdir-action "mkdir")
     ("r" (lambda (path) (rename-file path (read-string "New name: "))) "rename")
     ("f" find-file-other-window "other window")
     ("F" find-file-other-frame "other frame")
     ("p" (lambda (path) (with-ivy-window (insert (file-relative-name path default-directory)))) "insert relative path")
     ("P" (lambda (path) (with-ivy-window (insert path))) "insert absolute path")
     ("l" (lambda (path) "Insert org-link with relative path"
            (with-ivy-window (insert (format "[[./%s]]" (file-relative-name path default-directory))))) "insert org-link (rel. path)")
     ("L" (lambda (path) "Insert org-link with absolute path"
            (with-ivy-window (insert (format "[[%s]]" path)))) "insert org-link (abs. path)")))
  (counsel-mode 1))

#+end_src

*** Counsel-projectile

Allows for further integration between ivy and projectile.

#+begin_src emacs-lisp :tangle yes
(use-package counsel-projectile
  :after projectile
  :config
  (counsel-projectile-mode 1))
#+end_src

** Swiper
#+begin_src emacs-lisp :tangle yes
(use-package swiper
  :bind (("M-s" . swiper)))
#+end_src
** wgrep
#+begin_src emacs-lisp :tangle yes
(use-package wgrep)
#+end_src
* Project, Files, and System

For tools that deal with files.

** Projectile

Project management.

#+begin_src emacs-lisp :tangle yes
(use-package projectile
  :defer 1
  :init
  (setq projectile-cache-file (concat emacs-cache-dir "projectile.cache")
        projectile-enable-caching t
        projectile-known-projects-file (concat emacs-cache-dir "projectile.projects")
        projectile-require-project-root 'prompt
        projectile-files-cache-expire 604800 ; expire after a week
        projectile-sort-order 'recentf
        projectile-use-git-grep t) ; use git-grep for text searches

  ;; TODO - Temp fix for git repositories with submodules: see https://github.com/bbatsov/projectile/issues/1302#issuecomment-433894379
  (setq projectile-git-submodule-command nil)

  :config
  (projectile-mode +1)
  (setq projectile-project-root-files-bottom-up
        (append '(".project"))))
#+end_src

*** Projectile for specific projects

#+begin_src emacs-lisp :tangle yes
(defun my--projectile-find-file-in-project-config ()
  (interactive)
  (let ((default-directory emacs-dir))
    (counsel-projectile-find-file)))

(defun my--projectile-find-file-in-project-tasks ()
  (interactive)
  (let ((default-directory org-dir))
    (counsel-projectile-find-file)))

(defun my--projectile-find-file-in-project-dotfiles ()
  (interactive)
  (let ((default-directory dotfiles-dir))
    (counsel-projectile-find-file)))
#+end_src
** Magit

An inteface to Git. The mascot of Emacs packages.

#+begin_src emacs-lisp :tangle yes
(use-package magit
  :defer t
  :init
  (setq transient-history-file (concat emacs-etc-dir "transient/history")))

(use-package magit-todos
  :after magit hl-todo
  :custom
  (magit-todos-keyword-suffix "\\(?:([^)]+)\\)?:?") ; make colon optional
  :config
  (magit-todos-mode))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package evil-magit
  :after magit)
#+end_src

** Vterm
#+begin_src emacs-lisp :tangle yes
(use-package vterm
  :ensure-system-package (vterm-ctrl . libvterm)
  :commands vterm vterm-mode
  :init
  (setq vterm-kill-buffer-on-exit t))

(use-package vterm-toggle
  :commands vterm-toggle vterm-toggle-cd
  :bind
  (("C-`" . vterm-toggle-cd)))
#+end_src
** Dired

#+begin_src emacs-lisp :tangle yes
(use-feature dired
  :commands dired-jump
  :config
  (setq dired-auto-revert-buffer t  ; don't prompt to revert; just do it
        dired-dwim-target t  ; suggest a target for moving/copying intelligently
        ;; Always copy/delete recursively
        dired-recursive-copies  'always
        dired-recursive-deletes 'top
        dired-clean-confirm-killing-deleted-buffers nil) ;; don't ask just do

  ;; Show directories before files + default -al
  (setq dired-listing-switches "-lAX --group-directories-first")

  ;; Show contents of .desc file in minibuffer
  (defun show-folder-description ()
    (interactive)
    (if (file-exists-p "./.desc")
	(let ((description
	       (with-temp-buffer
		 (insert-file-contents "./.desc")
		 (buffer-string))))
	  (message description))))

  (add-hook 'dired-after-readin-hook #'show-folder-description)

  ;; The standard ls details are extraneous
  (add-hook 'dired-mode-hook #'dired-hide-details-mode)

  (defun my--dired-do-command (command)
    "Run COMMAND on marked files. Any files not already open will be opened.
After this command has been run, any buffers it's modified will remain
open and unsaved."
    (interactive "CRun on marked files M-x ")
    (save-window-excursion
      (mapc (lambda (filename)
              (find-file filename)
              (call-interactively command))
            (dired-get-marked-files)))))
#+end_src
*** Dired-x

Adds additional functionality on top of dired.

#+begin_src emacs-lisp :tangle yes
(use-feature dired-x
  :hook (dired-mode . dired-omit-mode)
  :general
  (general-define-key
   :states 'normal
   :keymaps 'dired-mode-map
   ")" 'dired-omit-mode)
  :config
  (setq dired-omit-verbose nil)

  (setq dired-omit-files "^\\.")

;; Set the default application when using ! or & on files.
;; Taken from doom emacs
(setq dired-guess-shell-alist-user
      `(("\\.\\(?:docx\\|pdf\\|djvu\\|eps\\)\\'" "xdg-open")
	("\\.\\(?:jpe?g\\|png\\|gif\\|xpm\\)\\'" "xdg-open")
	("\\.\\(?:xcf\\)\\'" "xdg-open")
	("\\.csv\\'" "xdg-open")
	("\\.tex\\'" "xdg-open")
	("\\.\\(?:mp4\\|mkv\\|avi\\|flv\\|rm\\|rmvb\\|ogv\\)\\(?:\\.part\\)?\\'" "xdg-open")
	("\\.\\(?:mp3\\|flac\\)\\'" "xdg-open")
	("\\.html?\\'" "xdg-open")
	("\\.md\\'" "xdg-open"))))
#+end_src

*** Peep-Dired

#+begin_src emacs-lisp :tangle yes
(use-package peep-dired
  :general
  (general-nmap
    :keymaps 'dired-mode-map
    "M-RET" 'peep-dired
    "C-n" 'peep-dired-next-file
    "C-p" 'peep-dired-prev-file)
  :custom
  (peep-dired-cleanup-eagerly t)
  (peep-dired-ignored-extensions '("mkv mp4")))
#+end_src
** Recentf

Keeps a list of recently opened files.

#+begin_src emacs-lisp :tangle yes
(use-feature recentf
  :config
  (setq recentf-save-file (concat emacs-cache-dir "recentf"))
  (setq recentf-max-menu-item 300)
  (setq recentf-max-saved-item 300)
  (setq recentf-exclude
   '("recentf" ;; remove the recentf load file
     ".*?autoloads.el$"
     ".gitignore" ;; ignore `.gitignore' files in projects
     "/tmp/" ;; ignore temporary files
     "^/\\(?:ssh\\|su\\|sudo\\)?:" ;; ignore tramp/ssh files
     ))
  (recentf-mode +1))
#+end_src

** NeoTree
Displays the folder tree
#+begin_src emacs-lisp :tangle yes
;; TODO Use this or remove this
(use-package neotree
  :init
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))
#+end_src

* Text & Organization
** Org-mode
*** Configuration
**** Base
#+begin_src emacs-lisp :tangle yes
(use-feature org
  :hook
  (org-mode . visual-line-mode)
  :custom
  ;; calendar ical export
  (org-icalendar-include-todo nil)
  (org-icalendar-store-UID nil)
  (org-icalendar-timezone nil)
  (org-icalendar-use-deadline '(event-if-todo-not-done))
  (org-icalendar-use-scheduled '(event-if-todo-not-done))
  (org-icalendar-combined-agenda-file (concat org-dir "calendar.ics"))
  :init
  (setq org-directory org-dir
        org-archive-location (concat archive-dir "Tasks/archive_" (format-time-string "%Y") ".org::datetree/")
        org-use-fast-todo-selection t                                     ; allow changing to any todo state from a menu
        org-enforce-todo-dependencies t                                   ; block setting task to DONE if there are incomplete subtasks
        org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id ; use unique ID's for links
        org-id-locations-file (concat org-dir ".orgids")
        org-clone-delete-id t
	org-log-done 'time
        org-catch-invisible-edits 'show
        org-confirm-babel-evaluate nil                                    ; do not ask for confirmation
        org-return-follows-link t
        org-startup-indented t                                            ; indent each level of heading
        org-hide-emphasis-markers t                                       ; hide the markers for italics and bold
        org-pretty-entities t                                             ; show entities as UTF8 characters
        org-image-actual-width 500
	org-startup-with-inline-images t
        org-export-with-smart-quotes t)

  :custom-face 
  (variable-pitch ((t (:family "Roboto Mono Light" :height 1.0)))) ; Alternatively, Office Code Pro is second best
  (org-document-title ((t (:weight bold :height 1.5))))
  (org-done ((t (:strike-through t :weight bold))))
  (org-headline-done ((t (:strike-through t))))
  (org-level-1 ((t (:height 1.1))))
  (org-level-2 ((t (:height 1.1))))
  (org-level-3 ((t (:height 1.1))))
  (org-link ((t (:underline t)))))

#+end_src

**** Todo keywords

#+begin_src emacs-lisp :tangle yes
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
              (sequence "SOMEDAY(s)" "WAITING(w)" "HOLD(h)" "|" "CANCELLED(c)")))
      org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
              ("WAITING" ("WAITING" . t))
              ("HOLD" ("WAITING") ("HOLD" . t))
              (done ("WAITING") ("HOLD"))
              ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
              ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
              ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
#+end_src
**** Emphasis

(enabled) Replace underline with highlight
#+begin_src emacs-lisp :tangle yes
(setq org-emphasis-alist
      (quote (("*" bold)
              ("/" italic)
              ("_" (:background "#595959"))
              ("=" org-verbatim verbatim)
              ("~" org-code verbatim)
              ("+"
               (:strike-through t))
              )))
#+end_src

(disabled) Custom highlight face. From [[https://emacs.stackexchange.com/questions/38216/custom-faces-in-org-9-0]].

#+begin_src emacs-lisp :tangle no
;;; Create highlighter face for marking up text in org-mode
(defface font-lock-highlight-face
  '((t (:inherit org-default :background "#585858")))
  "Face for highlighting text")
(defvar font-lock-highlight-face 'font-lock-highlight-face)

;;; Add keywords
(defun add-highlight-keywords()
  "adds custom keywords for highlighting text in org-mode."
  (font-lock-add-keywords nil
                          '(("\\(!\\)\\([^[:space:]][^\n\r\t]+[^[:space:]]\\)\\(!\\)" . 'font-lock-highlight-face ))))
(add-hook 'org-mode-hook 'add-highlight-keywords)
#+end_src

**** Pretty-symbols
#+begin_src emacs-lisp :tangle yes
(add-hook 'org-mode-hook (lambda ()
			   (push '("#+title: "        . "") prettify-symbols-alist)
			   (push '("#+subtitle: "     . "") prettify-symbols-alist)
			   (push '("#+author: "       . "- ") prettify-symbols-alist)
			   (push '("#+begin_src"      . "λ") prettify-symbols-alist)
			   (push '("#+end_src"        . "…") prettify-symbols-alist)
			   (push '("#+results:"       . "→") prettify-symbols-alist)
			   (push '(":results:"        . "⋰") prettify-symbols-alist)
			   (push '("#+name:"          . "-") prettify-symbols-alist)
			   (push '("#+begin_example"  . "~") prettify-symbols-alist)
			   (push '("#+begin_example"  . "~") prettify-symbols-alist)
			   (push '("#+end_example"    . "~") prettify-symbols-alist)
			   (push '("#+end_example"    . "~") prettify-symbols-alist)
			   (push '("#+DOWNLOADED:"    . "→") prettify-symbols-alist)
			   (push '("#+begin_verbatim" . "") prettify-symbols-alist)
			   (push '("#+end_verbatim"   . "") prettify-symbols-alist)
			   (push '("#+begin_verse"    . "") prettify-symbols-alist)
			   (push '("#+end_verse"      . "") prettify-symbols-alist)
			   (push '("#+begin_quote"    . "»") prettify-symbols-alist)
			   (push '("#+end_quote"      . "«") prettify-symbols-alist)
			   (push '("#+tblfm:"         . "∫") prettify-symbols-alist)
			   (push '("[X]"              . (?\[ (Br . Bl) ?✓ (Br . Bl) ?\])) prettify-symbols-alist)
			   (push '("\\\\"             . "↩") prettify-symbols-alist)
			   (prettify-symbols-mode)))
#+end_src
**** Capture

Set up capture templates. The backquoted list allows me to selectively evaluate parts of the list with a , (in this case the concat statement).

#+begin_src emacs-lisp :tangle yes
;; TODO use directory variables
(setq org-capture-templates
      `(("t" "Todo" entry (file+headline ,(concat org-dir "refile.org") "Refile")
         "* TODO %?")
        ("p" "Project" entry (file+headline ,(concat org-dir "inbox.org") "Projects") 
         "* %?")
        ("n" "Next" entry (file+headline ,(concat org-dir "refile.org") "Refile") 
         "* NEXT %? \n:PROPERTIES:\n:TRIGGER: next-sibling todo!(\"NEXT\") chain!(\"TRIGGER\") deadline!(cp)\n:END:\n")
	("m" "mail" entry (file+olp ,(concat org-dir "refile.org") "Refile")
	 "* TODO %? Link: %a")

	("l" "Protocol" entry (file+headline ,(concat org-dir "refile.org") "Refile")
         "* TODO %? [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE")	
        ("L" "Protocol Link" entry (file+headline ,(concat org-dir "refile.org") "Refile")
         "* TODO %? [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\n")))

;; Allow system-wide org-capture shortcut. Adapted from https://www.reddit.com/r/emacs/comments/74gkeq/system_wide_org_capture/
(defadvice org-switch-to-buffer-other-window
    (after supress-window-splitting activate)
  "Delete the extra window if we're in a capture frame"
  (if (equal "capture" (frame-parameter nil 'name))
      (delete-other-windows)))

(defadvice org-capture-finalize
    (after delete-capture-frame activate)
  "Advise capture-finalize to close the frame"
  (when (and (equal "capture" (frame-parameter nil 'name))
             (not (eq this-command 'org-capture-refile)))
    (delete-frame)))

(defadvice org-capture-refile
    (after delete-capture-frame activate)
  "Advise org-refile to close the frame"
  (when (equal "capture" (frame-parameter nil 'name))
    (delete-frame)))

(defun my--activate-capture-frame ()
  "run org-capture in capture frame"
  (select-frame-by-name "capture")
  (switch-to-buffer (get-buffer-create "*scratch*"))
  (org-capture)

;; System-wide org-agenda
(defadvice org-agenda-quit
    (after delete-capture-frame activate)
  "Advise capture-finalize to close the frame"
  (when (equal "agenda" (frame-parameter nil 'name))
    (delete-frame))))
#+end_src

**** Refile configuration

#+begin_src emacs-lisp :tangle yes
(use-feature org-refile
  :init
  (setq org-refile-targets (quote ((nil :maxlevel . 3)
                                   (org-agenda-files :maxlevel . 3))))
  (setq org-refile-use-outline-path t)
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-allow-creating-parent-nodes (quote confirm))
  (setq org-indirect-buffer-display 'current-window)
  :config
  (defun bh/verify-refile-target ()
    "Exclude todo keywords with a done state from refile targets"
    (not (member (nth 2 (org-heading-components)) org-done-keywords)))

  (setq org-refile-target-verify-function 'bh/verify-refile-target)

  ;; FIXME apply: Wrong number of arguments: (0 . 0), 3
  (advice-add 'org-refile :after 'org-save-all-org-buffers))
#+end_src

**** Agenda

***** Settings

#+begin_src emacs-lisp :tangle yes
(use-feature org-agenda
  :config
  (setq org-deadline-warning-days 7)
  (setq org-agenda-dim-blocked-tasks nil)

  ;; Remove uneccesary whitespace
  (setq org-agenda-compact-blocks t)

  ;; Use current window for agenda buffer
  (setq org-agenda-window-setup 'only-window)

  ;; Use all org files in org-dir
  (setq org-agenda-files (list org-dir))
  (setq org-agenda-skip-unavailable-files t)

  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-skip-deadline-if-done t)

  ;; align tags to right side
  (setq org-agenda-tags-column -100)


  (defun my--org-agenda-process-inbox-item ()
    "Process a single item in the org-agenda."
    (interactive)
    (org-with-wide-buffer
     ;; (org-agenda-schedule)
     ;; (org-agenda-deadline)
     ;; (org-agenda-set-tags)
     (org-agenda-priority)
     ;; (call-interactively 'my-org-agenda-set-effort)
     (org-agenda-refile nil nil t)))

  (general-mmap
   :keymaps 'org-agenda-mode-map
   "p" 'my--org-agenda-process-inbox-item)

  ;; Label items with children using an arrow
  (defun my/org-has-children ()
    (if (save-excursion (org-goto-first-child)) "▶" " "))
  (add-to-list 'org-agenda-prefix-format '(agenda  . "%i%-3:(my/org-has-children) %-12:c%?-12t% s "))


  (defun my--check-sync-conflicts ()
    (when (directory-files org-dir nil "sync-conflict")
      (message "Warning: Sync conflicts")))

  (add-hook 'org-agenda-finalize-hook #'my--check-sync-conflicts)

  ;; Save all org buffers before exiting agenda
  (advice-add 'org-agenda-quit :before 'org-save-all-org-buffers))
#+end_src
***** org-super-agenda

A package which allows for much greater customization of the org agenda.

#+begin_src emacs-lisp :tangle yes
(use-package org-super-agenda
  :after org-agenda
  :config
  (setq org-agenda-custom-commands
	'(("a" "All"
	   ((agenda ""
		    ((org-agenda-span 'day)
		     (org-super-agenda-groups
		      '((:discard (:tag "refile"))
			(:name "Agenda"
			       :time-grid t)
			(:name "Personal"
			       ;; :time-grid t
			       :tag "personal")
			(:auto-property "Class")
			(:name "School Other"
			       :file-path "school")
			(:auto-property "Goal")))))
	    (alltodo ""
		     ((org-super-agenda-groups
		       '((:name "Refile"
				:and (:scheduled nil :deadline nil :todo "TODO")
				:tag "refile")
			 (:discard (:anything))
			 ))))
	    ;; TODO This is not useful as it is
	    ;; (alltodo ""
	    ;; 	     ((org-agenda-overriding-header "Stuck Projects")
	    ;; 	      (org-agenda-skip-function 'my--skip-non-stuck-projects)))
	    (todo "NEXT"
		  ((org-agenda-overriding-header "Next Tasks")))
	    (todo "WAITING"
		  ((org-agenda-overriding-header "Waiting For Others")))
	    (todo "SOMEDAY"
		  ((org-agenda-overriding-header "Someday")))))
	  ("t" "Today"
	   ((agenda ""
		    ((org-agenda-span 'day)
		     (org-deadline-warning-days 0)
		     (org-super-agenda-groups
		      '((:name "Agenda"
			       :time-grid t)
			(:name "Must do"
			       :priority "A")
			(:name "Good to do"
			       :priority "B")
			(:name "Time-permitting"
			       :priority "C")
			(:name "Unsorted"
			       :anything)))))))))

  (setq org-super-agenda-header-map (make-sparse-keymap)) ;; org-super-agenda does not copy keymap late enough
  (org-super-agenda-mode))
#+end_src

***** Helper Functions

#+begin_src emacs-lisp :tangle yes
(use-feature org-agenda
  :config
  (defun my--is-project-p ()
    "Any task with a todo keyword subtask."
    (save-restriction
      (widen)
      (let ((has-subtask)
	    (subtree-end (save-excursion (org-end-of-subtree t)))
	    (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
	(save-excursion
	  (forward-line 1)
	  (while (and (not has-subtask)
		      (< (point) subtree-end)
		      (re-search-forward "^\*+ " subtree-end t))
	    (when (member (org-get-todo-state) org-todo-keywords-1)
	      (setq has-subtask t))))
	(and is-a-task has-subtask))))

  (defun my--skip-non-stuck-projects ()
    "Skip trees that are not stuck projects"
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
	(if (my--is-project-p)
	    (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
		   (has-next ))
	      (save-excursion
		(forward-line 1)
		(while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
		  (unless (member "WAITING" (org-get-tags-at))
		    (setq has-next t))))
	      (if has-next
		  next-headline
		nil)) ; a stuck project, has subtasks but no next task
	  next-headline)))))
#+end_src

**** org-clock
#+begin_src emacs-lisp :tangle yes
(use-feature org-clock
  :config
  (setq org-clock-out-remove-zero-time-clocks t))
#+end_src
**** org-modules
#+begin_src emacs-lisp :tangle yes
(require 'org-install)
(setq org-modules '(org-habit))
(org-load-modules-maybe t)
#+end_src

***** Habits

#+begin_src emacs-lisp :tangle yes
(use-feature org-habit
  :config
  (setq org-log-repeat 'time
        org-log-into-drawer t))
#+end_src
**** Variable Pitch Mode

We use a font that's easier on the eyes for long blocks of text

#+begin_src emacs-lisp :tangle yes
(add-hook 'org-mode-hook
          '(lambda ()
             (setq line-spacing 0.2) ;; Add more line padding for readability
             (mapc
              (lambda (face) ;; Other fonts with fixed-pitch.
                (set-face-attribute face nil :inherit 'fixed-pitch))
              (list 'org-code
                    'org-link
                    'org-block
                    'org-table
                    'org-verbatim
                    'org-block-begin-line
                    'org-block-end-line
                    'org-meta-line
                    'org-document-info-keyword))))
#+end_src 

**** SRC blocks
#+begin_src emacs-lisp :tangle yes
(use-feature org-src
  :general
  (leader-key
    :map org-mode-map
    "o=" 'my--org-indent-src-block)

  :config
  (setq org-src-tab-acts-natively t
        org-src-preserve-indentation t) ; use native major-mode indentation

  (setq org-src-window-setup 'current-window)

  ;; Indents an src block without having to enter it
  (defun my--org-indent-src-block ()
    (interactive)
    (org-edit-special)
    (indent-region (point-min) (point-max))
    (org-edit-src-exit))
  )
#+end_src
**** Circular Bullets
Make bullets circular
#+begin_src emacs-lisp :tangle yes
(font-lock-add-keywords 'org-mode
                        '(("^ *\\([-]\\) "
                           0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•")))
                          ("\\(->\\)"
                           0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "→")))))
#+end_src

**** Autosort
#+begin_src emacs-lisp :tangle yes
(defun my--org-entry-has-subentries ()
  "Any entry with subheadings"
  (let ((subtree-end (save-excursion (org-end-of-subtree t))))
    (save-excursion
      (org-back-to-heading)
      (forward-line 1)
      (when (< (point) subtree-end)
        (re-search-forward "^\*+ " subtree-end t)))))

(defun my--org-entry-sort-by-property nil
  (let ((property (org-entry-get (point) "SORT" 'INHERIT)))
    (when (and (not (seq-empty-p property))
               (my--org-entry-has-subentries))
      (funcall #'org-sort-entries nil (string-to-char property) nil nil nil)))
  (let ((property_second (org-entry-get (point) "SORT_AFTER" 'INHERIT)))
    (when (and (not (seq-empty-p property_second))
               (my--org-entry-has-subentries))
      (funcall #'org-sort-entries nil (string-to-char property_second) nil nil nil))))

(defun my--org-buffer-sort-by-property (&optional MATCH)
  (interactive)
  (org-map-entries #'my--org-entry-sort-by-property MATCH 'file)
  (org-set-startup-visibility))

                                        ;(add-hook 'org-mode-hook #'my--org-buffer-sort-by-property)
#+end_src
**** Search headlines in agenda files

Taken from https://github.com/jkitchin/scimax/blob/131f7f6f537c56f1d30396e79634a8b6cd6c887b/scimax-org.el#L693

#+begin_src emacs-lisp :tangle yes

(defun my--ivy-org-jump-to-heading (headlines)
  (ivy-read "Headline: "
	    (reverse headlines)
	    :action (lambda (candidate)
		      (org-mark-ring-push)
		      (find-file (plist-get (cdr candidate) :file))
		      (goto-char (plist-get (cdr candidate) :position))
		      (outline-show-entry))))

(defun my--ivy-org-jump-to-agenda-heading ()
  "Jump to a heading in an agenda file. More visceral than
counsel-org-agenda-headlines"
  (interactive)
  (let ((headlines '()))
    (cl-loop for file in (org-agenda-files) do
	  (with-current-buffer (find-file-noselect file)
	    (save-excursion
	      (goto-char (point-min))
	      (while (re-search-forward org-heading-regexp nil t)
		(cl-pushnew (list
			     (format "%-80s (%s)"
				     (match-string 0)
				     (file-name-nondirectory file))
			     :file file
			     :position (match-beginning 0))
			    headlines)))))
(my--ivy-org-jump-to-heading headlines)))

(defun my--ivy-org-jump-to-file-heading ()
  "Jump to org heading in current buffer."
  (interactive)
  (let ((headlines '()))
	    (save-excursion
	      (goto-char (point-min))
	      (while (re-search-forward org-heading-regexp nil t)
		(cl-pushnew (list
			     (format "%-80s (%s)"
				     (match-string 0)
				     (file-name-nondirectory buffer-file-name))
			     :file buffer-file-name
			     :position (match-beginning 0))
			    headlines)))
  (my--ivy-org-jump-to-heading headlines)))
#+end_src
*** Packages
**** Babel
***** ob-mermaid
#+begin_src emacs-lisp :tangle yes
(use-package ob-mermaid
  :custom
  (ob-mermaid-cli-path "~/node_modules/.bin/mmdc"))
#+end_src
**** EVIL-Org
#+begin_src emacs-lisp :tangle yes
(use-package evil-org
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda ()
              (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src

**** org-Bullets
Make the header bullets look prettier
#+begin_src emacs-lisp :tangle yes
(use-package org-bullets
  :init
  (setq org-bullets-face-name "Inconsolata-12")
  (setq org-bullets-bullet-list
        '("◉" "◎" "⚫" "○" "►" "◇"))
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src
**** org-calfw
#+begin_src emacs-lisp :tangle yes
(use-package calfw
  :commands cfw:open-calendar-buffer
  :config
  ;; better frame. Taken from doom-emacs
  (setq cfw:face-item-separator-color nil
        cfw:render-line-breaker 'cfw:render-line-breaker-none
        cfw:fchar-junction ?╋
        cfw:fchar-vertical-line ?┃
        cfw:fchar-horizontal-line ?━
        cfw:fchar-left-junction ?┣
        cfw:fchar-right-junction ?┫
        cfw:fchar-top-junction ?┯
        cfw:fchar-top-left-corner ?┏
        cfw:fchar-top-right-corner ?┓))

(use-package calfw-org
  :general (leader-key "ot" 'cfw:open-org-calendar)
  :commands (cfw:open-org-calendar
             cfw:org-create-source
             cfw:open-org-calendar-withkevin
             my-open-calendar))
#+end_src

**** org-checklist

Allows for resetting of checkboxes when item is marked DONE.

#+begin_src emacs-lisp :tangle yes
(use-feature org-checklist
  :after org)
#+end_src
**** org-download
Automatically insert images via drag-and-drop

#+begin_src emacs-lisp :tangle yes
(use-package org-download
  :after org
  :config
  (defun my--org-download-annotate-function (link)
    "Do note annotate link"
    "#+DOWNLOADED: \n")

  (setq org-download-annotate-function #'my--org-download-annotate-function)
  (setq org-download-screenshot-method "maim -u -s %s")


  (defun my-org-download-method (link)
    "This is a helper function for org-download.
It creates a folder in the root directory named after the
org filename (sans extension) and puts all images from that file in there.
Inspired by https://github.com/daviderestivo/emacs-config/blob/6086a7013020e19c0bc532770e9533b4fc549438/init.el#L701"
    (let ((filename
	   (file-name-nondirectory
	    (car (url-path-and-query
		  (url-generic-parse-url link)))))
	  ;; Create folder name with current buffer name, and place in root dir
	  (dirname (concat "./img/"
			   (replace-regexp-in-string " " "_" (downcase (file-name-base buffer-file-name))))))

      ;; Add timestamp to filename
      (setq filename-with-timestamp (format "%s%s.%s"
					    (file-name-sans-extension filename)
					    (format-time-string org-download-timestamp)
					    (file-name-extension filename)))
      ;; Create folder if necessary
      (unless (file-exists-p dirname)
	(make-directory dirname))
      (expand-file-name filename-with-timestamp dirname)))
  (setq org-download-method 'my-org-download-method))
#+end_src
**** org-edna
Advanced dependency management

#+begin_src emacs-lisp :tangle yes
(use-package org-edna
:after org
:config
(org-edna-mode))
#+end_src
**** org-journal
#+begin_src emacs-lisp :tangle yes
(use-package org-journal
  :after org
  :init
  (setq org-journal-cache-dir emacs-cache-dir
        org-journal-date-prefix "#+title: "
        org-journal-dir journal-dir
        org-journal-file-format "%Y-%m-%d.org"
        org-journal-date-format "%A %Y-%m-%d"
        org-journal-time-format "" ))
#+end_src
**** org-oxclip
Let you copy formatted org-mode content to the clipboard. Requires the package =xclip= to run.

#+begin_src emacs-lisp :tangle yes
(use-package htmlize
  :after org)

(use-package ox-clip
  :general
  (leader-key
    "oy" 'ox-clip-formatted-copy)
  :after org)
#+end_src
**** org-pomodoro
#+begin_src emacs-lisp :tangle yes
(use-package org-pomodoro
  :general
  (leader-key
    "op" 'org-pomodoro)
  (general-mmap
    :keymaps 'org-agenda-mode-map
    "P" 'org-pomodoro)

  :config
  ;; prefer PulseAudio to ALSA
  (setq org-pomodoro-audio-player (or (executable-find "paplay") org-pomodoro-audio-player)))
#+end_src
**** org-Protocol

Allows for external applications to trigger custom actions without external dependencies

#+begin_src emacs-lisp :tangle yes
(require 'org-protocol)

(defun transform-square-brackets-to-round-ones(string-to-transform)
  "Transforms [ into ( and ] into ), other chars left unchanged."
  (concat 
   (mapcar #'(lambda (c) (if (equal c ?[) ?\( (if (equal c ?]) ?\) c))) string-to-transform))
  )

#+end_src

**** ox-hugo
#+begin_src emacs-lisp :tangle yes
(use-package ox-hugo
  :ensure-system-package hugo
  :after ox
  :init
  (setq org-hugo-set-lastmod t
        org-hugo-default-section-directory "notes"))
#+end_src
**** ox-Pandoc
(use-package ox-pandoc
  :ensure-system-package pandoc
  :init
  (setq org-pandoc-menu-entry
        '(
          (?l "to latex-pdf and open." org-pandoc-export-to-latex-pdf-and-open)
          (?L "to latex-pdf." org-pandoc-export-to-latex-pdf)
          (?4 "to html5 and open." org-pandoc-export-to-html5-and-open)
          (?$ "as html5." org-pandoc-export-as-html5))))
#+end_src
*** Zettelkasten
**** org-roam
#+begin_src emacs-lisp :tangle yes
(use-package org-roam
  :ensure-system-package
  ((dot . graphviz)
   (sqlite3))
  :hook
  (after-init . org-roam-mode)
  :init
  (setq org-roam-directory brain-dir
	org-roam-db-location "~/org-roam.db"
        org-roam-tag-sources '(prop last-directory)
        org-roam-graph-exclude-matcher '("journal")
        org-roam-link-title-format "§%s")

  :config
  (require 'org-roam-protocol)
  (setq org-roam-capture-templates
        '(("d" "default" plain (function org-roam--capture-get-point)
           "%?"
           :file-name "${slug}"
           :head "#+setupfile: ../hugo_setup.org
,#+title: ${title}\n"
           :unnarowed t)
          ("b" "book" plain (function org-roam--capture-get-point)
           "%?"
           :file-name "books/${slug}"
           :head "#+setupfile: ../../hugo_setup.org
,#+title: ${title}

- author ::
- tags :: "
           :unnarowed t)))
  (setq org-roam-capture-ref-templates
        '(("r" "ref" plain (function org-roam--capture-get-point)
           "%?"
           :file-name "websites/${slug}"
           :head "#+setupfile: ../hugo_setup.org
	   ,#+roam_key: ${ref}
,#+title: ${title}

-  source :: ${ref}"
	   :unnarrowed t))))
#+end_src
**** org-roam-bibtex
#+begin_src emacs-lisp :tangle yes
(use-package org-roam-bibtex
  :after org-roam
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :config
  (setq org-roam-bibtex-preformat-keywords
        '("=key=" "title" "url" "file" "author-or-editor" "keywords"))
  (setq orb-templates
        '(("r" "ref" plain (function org-roam-capture--get-point)
           ""
           :file-name "papers/%(org-roam--title-to-slug \"${title}\")"
           :head "#+TITLE: ${title}\n#+ROAM_KEY: ${ref}

- tags ::
- keywords :: ${keywords}
- author :: ${author-or-editor}"
           :unnarrowed t))))
#+end_src
**** ivy-bibtex

#+begin_src emacs-lisp :tangle yes
(use-package ivy-bibtex
  :after org-roam
  :commands ivy-bibtex
  :general
  (leader-key
    "ob" 'ivy-bibtex)
  :config
  (setq bibtex-completion-notes-path brain-dir
        bibtex-completion-bibliography "~/Documents/zotero-bib.bib"
        bibtex-completion-pdf-field "file"
        bibtex-completion-notes-template-multiple-files
        (concat
         "#+TITLE: ${title}\n"
         "#+ROAM_KEY: cite:${=key=}\n"
         "* TODO Notes\n"
         ":PROPERTIES:\n"
         ":Custom_ID: ${=key=}\n"
         ":NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n"
         ":AUTHOR: ${author-abbrev}\n"
         ":JOURNAL: ${journaltitle}\n"
         ":DATE: ${date}\n"
         ":YEAR: ${year}\n"
         ":DOI: ${doi}\n"
         ":URL: ${url}\n"
         ":END:\n\n")))

#+end_src
**** org-ref
#+begin_src emacs-lisp :tangle yes
(use-package org-ref
  :after org
  :init
  ;; must be called at init
  (setq org-ref-completion-library 'org-ref-ivy-cite)
  :config
  (setq org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex
   org-ref-default-bibliography (list (concat docs-dir "zotero-bib.bib"))
   org-ref-notes-directory brain-dir))
#+end_src

**** (disabled) org-ref-ox-hugo
#+begin_src emacs-lisp :tangle yes
(use-package org-ref-ox-hugo
  :disabled t
  :straight (:host github :repo "jethrokuan/org-ref-ox-hugo")
  :after org org-ref ox-hugo
  :config
  (add-to-list 'org-ref-formatted-citation-formats
               '("md"
                 ("article" . "${author}, *${title}*, ${journal}, *${volume}(${number})*, ${pages} (${year}). ${doi}")
                 ("inproceedings" . "${author}, *${title}*, In ${editor}, ${booktitle} (pp. ${pages}) (${year}). ${address}: ${publisher}.")
                 ("book" . "${author}, *${title}* (${year}), ${address}: ${publisher}.")
                 ("phdthesis" . "${author}, *${title}* (Doctoral dissertation) (${year}). ${school}, ${address}.")
                 ("inbook" . "${author}, *${title}*, In ${editor} (Eds.), ${booktitle} (pp. ${pages}) (${year}). ${address}: ${publisher}.")
                 ("incollection" . "${author}, *${title}*, In ${editor} (Eds.), ${booktitle} (pp. ${pages}) (${year}). ${address}: ${publisher}.")
                 ("proceedings" . "${editor} (Eds.), _${booktitle}_ (${year}). ${address}: ${publisher}.")
                 ("unpublished" . "${author}, *${title}* (${year}). Unpublished manuscript.")
                 ("misc" . "${author} (${year}). *${title}*. Retrieved from [${howpublished}](${howpublished}). ${note}.")
                 (nil . "${author}, *${title}* (${year})."))))
#+end_src
**** org-noter
#+begin_src emacs-lisp :tangle yes
(use-package org-noter
  :after (:any org pdf-view)
  :config
  (setq
   ;; The WM can handle splits
   org-noter-notes-window-location 'other-frame
   ;; Please stop opening frames
   org-noter-always-create-frame nil
   ;; I want to see the whole file
   org-noter-hide-other nil
   ;; Everything is relative to the main notes file
   org-noter-notes-search-path (list (concat brain-dir "papers/"))))
#+end_src
*** Reviews

Daily review inspired by [[https://youtu.be/reazJx4INyM?t=77][Ali Abdaal]].

#+begin_src emacs-lisp :tangle yes
(defun my--daily-review ()
  (interactive)
  (let ((org-capture-templates `(("d" "Daily Review" entry (file (lambda () (concat org-dir "Reviews/daily/" (format-time-string "%Y-%m-%d") ".org")))
                                  (file ,(concat org-dir "Templates/daily-review.org"))))))
    (progn
      (org-capture nil "d")
      (org-capture-finalize t)
      (org-speed-move-safe 'outline-up-heading)
      (org-narrow-to-subtree))))

(defun my--visit-daily-review ()
"Visit the file corresponding to today's daily review"
(interactive)
(find-file (concat org-dir "Reviews/daily/" (format-time-string "%Y-%m-%d") ".org")))

(defun my--weekly-review ()
  (interactive)
  (let ((org-capture-templates `(("w" "weekly review" entry (file+olp+datetree (lambda () (concat org-dir "Reviews/reviews_" (format-time-string "%Y") ".org")))
                                  (file ,(concat org-dir "Templates/weekly-review.org"))))))
    (progn
      (org-capture nil "w")
      (org-capture-finalize t)
      (org-speed-move-safe 'outline-up-heading)
      (org-narrow-to-subtree))))

(defun my--monthly-review ()
  (interactive)
  (let ((org-capture-templates `(("m" "Monthly Review" entry (file+olp+datetree (lambda () (concat org-dir "Reviews/reviews_" (format-time-string "%Y") ".org")))
                                  (file ,(concat org-dir "Templates/monthly-review.org"))))))
    (progn
      (org-capture nil "m")
      (org-capture-finalize t)
      (org-speed-move-safe 'outline-up-heading)
      (org-narrow-to-subtree))))
#+end_src
** LaTeX
#+begin_src emacs-lisp :tangle yes
(use-package latex
  :straight auctex
  :bind
  (:map TeX-mode-map
        ("C-<return>" . my--triple-newline))
  :config
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (prettify-symbols-mode)))
  (add-hook 'LaTeX-mode-hook 'visual-line-mode)

  (setq TeX-save-query nil)
  (setq TeX-auto-save t)
  (setq Tex-parse-self t)
  (setq TeX-PDF-mode t)

  ;; Set up pdf viewer
  (setq TeX-view-program-list '(("Evince" "evince --page-index=%(outpage) %o")))
  (setq TeX-view-program-selection '((output-pdf "Evince")))
  ;; Method for enabling forward and inverse search 
  (setq TeX-source-correlate-method 'synctex)
  ;; inhibit the question to start a server process
  (setq TeX-source-correlate-start-server t)


  (set-default 'preview-scale-function 2.0)

  ;; TODO Function to repeat newline?
  (defun my--triple-newline ()
    "Inserts three newlines. Useful for rephrasing"
    (interactive)
    (save-excursion
      (newline)
      (newline)
      (newline))))
#+end_src

*** CdLaTeX

#+begin_src emacs-lisp :tangle yes
(use-package cdlatex
  :after latex
  :hook (LaTeX-mode . turn-on-cdlatex))
#+end_src

*** RefTeX

Allow RefTeX to plug into AUCTeX

#+begin_src emacs-lisp :tangle yes
(use-package reftex
  :after latex
  :hook (LaTeX-mode . turn-on-reftex)
  :custom
  (reftex-plug-into-AUCTeX t)
  (reftex-extra-bindings t)
  (reftex-use-external-file-handlers t))
#+end_src

** Writing
*** olivetti

#+begin_src emacs-lisp :tangle yes
(use-package olivetti
  :config
  (setq olivetti-body-width 80))

#+end_src

*** langtool
#+begin_src emacs-lisp :tangle yes
(use-package langtool
  :ensure-system-package languagetool
  :commands (langtool-check
             langtool-check-done
             langtool-show-message-at-point
             langtool-correct-buffer)
  :general
  (leader-key
    "llb" 'langtool-check-buffer
    "lld" 'langtool-check-done)
  :init
  (setq langtool-default-language "en-CA")
  :config
  (setq langtool-java-classpath "/usr/share/languagetool:/usr/share/java/languagetool/*"))
#+end_src

*** writegood

Checks for signs of bad writing.

#+begin_src emacs-lisp :tangle yes
(use-package writegood-mode
:general
(leader-key
"lw" 'writegood-mode))
#+end_src


*** Writing Function

#+begin_src emacs-lisp :tangle yes
(defvar writemode 1 "Set default writing mode state.")
(defun writing-mode ()
  "Configure writing environment."
  (interactive)
  (cond
   ((= writemode 1)
    ;;(focus-mode t)
    (olivetti-mode t)
    (variable-pitch-mode 1) ;; All fonts with variable pitch.
    (text-scale-increase 0.5)
    (display-line-numbers-mode -1)
    (setq-local writemode 2))
   ((= writemode 2)
    ;;(focus-mode -1)
    (olivetti-mode -1)
    (variable-pitch-mode 0) ;; All fonts with variable pitch.
    (text-scale-decrease 0)
    (display-line-numbers-mode t)
    (setq-local display-line-numbers 'relative)
    (setq-local writemode 1))))
#+end_src
*** Flyspell

#+begin_src emacs-lisp :tangle yes
;; find aspell and hunspell automatically
(use-package flyspell
  :hook ((org-mode markdown-mode TeX-mode rst-mode mu4e-compose-mode notmuch-message-mode git-commit-mode) . flyspell-mode)
  :config
  (setq ispell-program-name "aspell"
        ispell-dictionary "canadian"
        ispell-silently-savep t
        flyspell-issue-welcome-flag nil
        ;; Significantly speeds up flyspell, which would otherwise print
        ;; messages for every word when checking the entire buffer
        flyspell-issue-message-flag nil))
#+end_src
** PDF
#+begin_src emacs-lisp :tangle yes
(use-package pdf-tools
  :mode ("\\.[pP][dD][fF]\\'" . pdf-view-mode)
  :init
  ;; build automatically
  (pdf-tools-install :no-query)
  :config

  (setq pdf-view-display-size 'fit-page)

  ;; HiDPI support
  (setq pdf-view-use-scaling t
	pdf-view-use-imagemagick nil)

  ;; revert pdf automatically after latex compilation completes in auctex
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)

  ;; automatically annotate highlights
  (setq pdf-annot-activate-created-annotations t)

  ;; add history for PDF files
  (add-hook 'pdf-view-mode-hook #'pdf-history-minor-mode))

(use-feature pdf-view
  :after pdf-tools
  :config
  (setq pdf-view-display-size 'fit-page)

  ;; HiDPI support
  (setq pdf-view-use-scaling t
	pdf-view-use-imagemagick nil))
#+end_src
* Email

** Reading Email

Configuration adapted from Doom Emacs and https://github.com/rememberYou/.emacs.d/blob/master/config.org
#+begin_src emacs-lisp :tangle yes
(use-package mu4e
  :commands mu4e mu4e-compose-new
  :hook ((mu4e-compose-mode) . olivetti-mode)
  :general
  (leader-key
    "mm" 'mu4e
    "mc" 'mu4e-compose-new)
  :init
  (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")

  (setq mu4e-maildir "~/.mail")
  (setq mu4e-attachment-dir "~/Downloads")
  :config
  (setq mu4e-get-mail-command "mbsync -a")

  ;; Fixes duplicate UID errors
  (setq mu4e-change-filenames-when-moving t)

  (setq mu4e-compose-format-flowed t ; visual-line-mode + auto-fill upon sending
	mu4e-view-show-addresses t
	mu4e-sent-messages-behavior 'sent
	mu4e-hide-index-messages t
	;; try to show images
	mu4e-view-show-images t
	mu4e-view-image-max-width 800
	mu4e-compose-dont-reply-to-self t
	;; use helm/ivy
	mu4e-completing-read-function 'ivy-completing-read
        ;; Do not reply to self
        mu4e-compose-dont-reply-to-self t
	;; set user agent
	mail-user-agent 'mu4e-user-agent
	;; no need to ask
	mu4e-confirm-quit nil)

  ;; Folders
  (setq mu4e-sent-folder "/Sent"
	mu4e-drafts-folder "/Drafts"
	mu4e-trash-folder "/Trash"
	mu4e-refile-folder "/Archive"
	mu4e-compose-signature  "Alex Koen\nhttps://alexkoen.com")

  ;; Use fancy icons
  (setq mu4e-use-fancy-chars t
	mu4e-headers-draft-mark '("D" . "")
	mu4e-headers-flagged-mark '("F" . "")
	mu4e-headers-new-mark '("N" . "")
	mu4e-headers-passed-mark '("P" . "")
	mu4e-headers-replied-mark '("R" . "")
	mu4e-headers-seen-mark '("S" . "")
	mu4e-headers-trashed-mark '("T" . "")
	mu4e-headers-attach-mark '("a" . "")
	mu4e-headers-encrypted-mark '("x" . "")
	mu4e-headers-signed-mark '("s" . "")
	mu4e-headers-unread-mark '("u" . ""))

  ;; Auto update
  (setq mu4e-update-interval (* 15 60))
  (setq mu4e-index-update-in-background t)

  ;; Saved queries
  (setq mu4e-bookmarks
	'(( :name  "Unread messages"
		   :query "flag:unread AND NOT flag:trashed"
		   :key ?u)
	  ( :name "Today's messages"
		  :query "date:today..now"
		  :key ?t)
	  ( :name "All in inbox"
		  :query "maildir:/Inbox OR maildir:/Inbox/*"
		  :key ?i)
	  ( :name "Last 7 days"
		  :query "date:7d..now"
		  :key ?w)
	  ( :name "Messages with images"
		  :query "mime:image/*"
		  :key ?p)))

  (add-to-list 'org-capture-templates
	       `("m" "Mail" entry (file+olp ,(concat org-dir "refile.org") "Refile")
		 "* TODO %? Link: %a"))

  (define-key mu4e-headers-mode-map (kbd "C-c c") 'mu4e-org-store-and-capture)
  (define-key mu4e-view-mode-map    (kbd "C-c c") 'mu4e-org-store-and-capture)

  ;; Set from address based on address that message was sent to. See https://www.djcbsoftware.nl/code/mu/mu4e/Compose-hooks.html
  (defun my--set-from-address ()
    "Set the From address based on the To address of the original."
    (let ((msg mu4e-compose-parent-message)) ;; msg is shorter...
      (when msg
	(setq user-mail-address
	      (cond
	       ((mu4e-message-contact-field-matches msg :to "akoen@mailbox.org")
		"akoen@mailbox.org")
	       ((mu4e-message-contact-field-matches msg :to "jx7gq@mailbox.org")
		"jx7gq@mailbox.org")
	       (t "alex@koen.ca"))))))

  (add-hook 'mu4e-compose-pre-hook #'my--set-from-address)

  ;; Remove the +T flag from trash. This emulates the behaviour of GUI clients. Emails are otherwise deleted when moving to trash.
  (setf (alist-get 'trash mu4e-marks)
	(list :char '("d" . "▼")
	      :prompt "dtrash"
	      :dyn-target (lambda (target msg)
			    (mu4e-get-trash-folder msg))
	      :action (lambda (docid msg target)
			;; Here's the main difference to the regular trash mark,
			;; no +T before -N so the message is not marked as
			;; IMAP-deleted:
			(mu4e~proc-move docid (mu4e~mark-check-target target) "-N"))))

  ;; Html mails might be better rendered in a browser
  (add-to-list 'mu4e-view-actions '("View in browser" . mu4e-action-view-in-browser)))

  #+end_src

** Receiving Mail


Create ~/.authinfo.gpg
#+begin_src
machine imap.mailbox.com login alex@koen.ca password <password> port 993
machine smtp.mailbox.com login alex@koen.ca password <password> port 587
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-feature message
  :init
  (setq message-send-mail-function 'smtpmail-send-it
	message-signature "Alex Koen\nhttps://alexkoen.com"
	message-kill-buffer-on-exit t)) ; close after sending

(use-feature smtpmail
  :init
  (setq smtpmail-smtp-server "smtp.mailbox.org"
	smtpmail-smtp-service 587
	smtpmail-smtp-user "alex@koen.ca"
	smtpmail-stream-type 'starttls))
#+end_src
** Notmuch

#+begin_src emacs-lisp :tangle yes
(use-package notmuch
  :disabled t
  :defer t
  :ensure-system-package (notmuch mbsync afew)
  :general
  (leader-key
    "mm" 'notmuch
    "mc" 'notmuch-mua-new-mail
    "mu" 'my--notmuch-update
    )
  :init
  ;; Allows org-mode links to notmuch files.
  (with-eval-after-load 'org
    (use-feature ol-notmuch))

  (defun my--notmuch-update ()
    (interactive)
    (message "Starting update")
    (let ((buf (get-buffer-create "*notmuch-update")))
      (with-current-buffer buf
	(erase-buffer))
      ;; (pop-to-buffer buf nil t)
      (set-process-sentinel
       (start-process-shell-command
	"notmuch update" buf "mbsync -a && notmuch new && afew -a -t")
       (lambda (_process event)
	 (if (string= event "finished\n")
	     (progn
	       (notmuch-refresh-all-buffers)
	       (message "Finished getting new mail.")))))))
  :config
  (setq notmuch-show-logo nil
	notmuch-search-oldest-first nil
	notmuch-message-headers-visible nil
	notmuch-saved-searches
	'((:name "Inbox"
		 :query "tag:screened and tag:unread"
		 :search-type 'tree
		 :key "i")
	  (:name "Previously Seen"
		 :query "tag:screened and not tag:unread"
		 :search-type 'tree
		 :key "I")
	  (:name "Unscreened"
		 :query "tag:inbox and not tag:screened"
		 :key "s")
	  (:name "The Feed"
		 :query "tag:thefeed"
		 :search-type 'tree
		 :key "f")
	  (:name "The Papertrail"
		 :query "tag:ledger"
		 :key "p")
	  (:name "Set Aside "
		 :query "tag:aside"
		 :key "a")
	  (:name "Drafts"
		 :query "tag:draft"
		 :key "d"))
	notmuch-show-mark-read-tags '("-unread")
	notmuch-archive-tags '("-unread"))

  (setq notmuch-hooks-dir "~/.notmuch/hooks"
	notmuch-drafts-folder "Drafts"
	notmuch-fcc-dirs "Sent")

  (general-nmap
    :keymaps 'notmuch-hello-mode-map
    "u" 'my--notmuch-update
    )

  ;; Bindings in `notmuch-show-mode'
  (general-nmap
    :keymaps 'notmuch-show-mode-map
    "r" 'notmuch-show-reply
    "R" 'notmuch-show-reply-sender
    "C" 'my--notmuch-reply-later
    )

  ;; Bindings in `notmuch-search-mode'
  (general-nmap
    :keymaps 'notmuch-search-mode-map
    "M-RET" 'notmuch-tree-from-search-current-query
    "r" 'notmuch-search-reply-to-thread
    "R" 'notmuch-search-reply-to-thread-sender
    "/" 'notmuch-search-filter
    "A" 'my--notmuch-archive-all
    "D" 'my--notmuch-delete-all
    "L" 'my--notmuch-filter-by-from
    ";" 'my--notmuch-search-by-from
    "d" 'my--notmuch-search-delete-and-archive-thread

    ;; The HEY Workflow Bindings
    "S" 'my--notmuch-move-sender-to-spam
    "I" 'my--notmuch-move-sender-to-screened
    "P" 'my--notmuch-move-sender-to-papertrail
    "F" 'my--notmuch-move-sender-to-thefeed
    "C" 'my--notmuch-reply-later
    )

  ;; Bindings in `notmuch-tree-mode'
  (general-nmap
    :keymaps 'notmuch-tree-mode-map
    "C" 'my--notmuch-reply-later
    )


  ;; Adapted from mu4e to send format=flowed messages
  (add-hook 'notmuch-message-mode-hook '(lambda ()
					  (turn-off-auto-fill)
					  (setq truncate-lines nil
						word-wrap t
						mml-enable-flowed t
						use-hard-newlines t)
					  (visual-line-mode t)))

  (defun my--notmuch-search-get-from ()
    "A helper function to find the email address for the given email."
    (let ((notmuch-addr-sexp (car
			      (notmuch-call-notmuch-sexp "address"
							 "--format=sexp"
							 "--format-version=1"
							 "--output=sender"
							 (notmuch-search-find-thread-id)))))
      (plist-get notmuch-addr-sexp :name-addr)))



  (defun my--notmuch-tree-get-from ()
    "A helper function to find the email address for the given email.
Assumes `notmuch-tree-mode'."
    (plist-get (notmuch-tree-get-prop :headers) :From))

  (defun my--notmuch-get-from ()
    "Find the From email address for the email at point."
    (car (notmuch-clean-address (cond
				 ((eq major-mode 'notmuch-show-mode)
				  (notmuch-show-get-from))
				 ((eq major-mode 'notmuch-tree-mode)
				  (my--notmuch-tree-get-from))
				 ((eq major-mode 'notmuch-search-mode)
				  (my--notmuch-search-get-from))
				 ((t nil))))))

  (defun my--notmuch-filter-by-from ()
    "Filter the current search view to show all emails sent from the sender of the current thread."
    (interactive)
    (notmuch-search-filter (concat "from:" (my--notmuch-get-from))))

  (defun my--notmuch-search-by-from (&optional no-display)
    "Show all emails sent from the sender of the current thread.
NO-DISPLAY is sent forward to `notmuch-search'."
    (interactive)
    (notmuch-search (concat "from:" (my--notmuch-get-from))
		    notmuch-search-oldest-first
		    nil
		    nil
		    no-display))

  (defun my--notmuch-tag-by-from (tag-changes &optional beg end refresh)
    "Apply TAG-CHANGES to all emails from the sender of the current thread.
BEG and END provide the region, but are ignored. They are defined
since `notmuch-search-interactive-tag-changes' returns them. If
REFRESH is true, refresh the buffer from which we started the
search."
    (interactive (notmuch-search-interactive-tag-changes))
    (let ((this-buf (current-buffer)))
      (my--notmuch-search-by-from t)
      ;; This is a dirty hack since I can't find a way to run a
      ;; temporary hook on `notmuch-search' completion. So instead of
      ;; waiting on the search to complete in the background and then
      ;; making tag-changes on it, I will just sleep for a short amount
      ;; of time. This is generally good enough and works, but is not
      ;; guaranteed to work every time. I'm fine with this.
      (sleep-for 0.5)
      (notmuch-search-tag-all tag-changes)
      (when refresh
	(set-buffer this-buf)
	(notmuch-refresh-this-buffer))))

  (defun my--notmuch-add-addr-to-db (nmaddr nmdbfile)
    "Add the email address NMADDR to the db-file NMDBFILE."
    (append-to-file (format "%s\n" nmaddr) nil nmdbfile)
    (notmuch-refresh-this-buffer))

  (defun my--notmuch-remove-addr-from-db (nmaddr nmdbfile)
    "Remove the email address NMADDR from the db-file NMDBFILE and remove all db tags."
    (with-temp-file nmdbfile
      (insert-file-contents nmdbfile)
      (delete-matching-lines nmaddr)))

  ;; TODO Make removal a function
  (defun my--notmuch-move-sender-to-thefeed ()
    "For the email at point, move the sender of that email to the feed.
This means:
1. All new email should go to the feed and skip the inbox altogether.
2. All existing email should be updated with the tag =thefeed=.
3. All existing email should be removed from the inbox."
    (interactive)
    (my--notmuch-add-addr-to-db (my--notmuch-get-from) (format "%s/thefeed.db" notmuch-hooks-dir))
    (my--notmuch-remove-addr-from-db (my--notmuch-get-from) (format "%s/ledger.db" notmuch-hooks-dir))
    (my--notmuch-remove-addr-from-db (my--notmuch-get-from) (format "%s/screened.db" notmuch-hooks-dir))
    (my--notmuch-remove-addr-from-db (my--notmuch-get-from) (format "%s/spam.db" notmuch-hooks-dir))
    (my--notmuch-tag-by-from '("+thefeed" "-inbox" "-ledger" "-screened" "-spam")))

  (defun my--notmuch-move-sender-to-papertrail ()
    "For the email at point, move the sender of that email to the papertrail.
This means:
1. All new email should go to the papertrail and skip the inbox altogether.
2. All existing email should be updated with the tag =ledger/TAG-NAME=.
3. All existing email should be removed from the inbox."
    (interactive)
    (my--notmuch-add-addr-to-db (my--notmuch-get-from) (format "%s/ledger.db" notmuch-hooks-dir))
    (my--notmuch-remove-addr-from-db (my--notmuch-get-from) (format "%s/thefeed.db" notmuch-hooks-dir))
    (my--notmuch-remove-addr-from-db (my--notmuch-get-from) (format "%s/screened.db" notmuch-hooks-dir))
    (my--notmuch-remove-addr-from-db (my--notmuch-get-from) (format "%s/spam.db" notmuch-hooks-dir))
    (my--notmuch-tag-by-from '("+ledger" "-inbox" "-unread" "-thefeed" "-screened" "-spam")))

  (defun my--notmuch-move-sender-to-screened ()
    "For the email at point, move the sender of that email to Screened Emails.
This means:
1. All new email should be tagged =screened= and show up in the inbox.
2. All existing email should be updated to add the tag =screened=."
    (interactive)
    (my--notmuch-add-addr-to-db (my--notmuch-get-from) (format "%s/screened.db" notmuch-hooks-dir))
    (my--notmuch-remove-addr-from-db (my--notmuch-get-from) (format "%s/ledger.db" notmuch-hooks-dir))
    (my--notmuch-remove-addr-from-db (my--notmuch-get-from) (format "%s/thefeed.db" notmuch-hooks-dir))
    (my--notmuch-remove-addr-from-db (my--notmuch-get-from) (format "%s/spam.db" notmuch-hooks-dir))
    (my--notmuch-tag-by-from '("+screened" "-ledger" "-thefeed" "-spam")))

  (defun my--notmuch-move-sender-to-spam ()
    "For the email at point, move the sender of that email to spam.
This means:
1. All new email should go to =spam= and skip the inbox altogether.
2. All existing email should be updated with the tag =spam=.
3. All existing email should be removed from the inbox."
    (interactive)
    (my--notmuch-add-addr-to-db (my--notmuch-get-from) (format "%s/spam.db" notmuch-hooks-dir))
    (my--notmuch-remove-addr-from-db (my--notmuch-get-from) (format "%s/ledger.db" notmuch-hooks-dir))
    (my--notmuch-remove-addr-from-db (my--notmuch-get-from) (format "%s/thefeed.db" notmuch-hooks-dir))
    (my--notmuch-remove-addr-from-db (my--notmuch-get-from) (format "%s/screened.db" notmuch-hooks-dir))
    (my--notmuch-tag-by-from '("+spam" "-inbox" "-unread" "-screened" "-ledger" "-screened" "-thefeed")))

  (defun my--notmuch-reply-later ()
    "Capture this email for replying later."
    (interactive)
    (org-capture nil "m"))

  (setq notmuch-address-selection-function
	(lambda (prompt collection initial-input)
	  (completing-read prompt
			   (cons initial-input collection)
			   nil
			   t
			   nil
			   'notmuch-address-history))))


(use-package org-mime
  :after (org notmuch)
  :config (setq org-mime-library 'mml))

;; This package can be used to search emails, searching result displays as you type thanks to helm, though notmuch-search does the real search.
(use-package counsel-notmuch
  :commands counsel-notmuch
  :after notmuch)
#+end_src
* Development
** Tools
*** Folding
#+begin_src emacs-lisp :tangle yes
;; Adapted from doom emacs
(use-feature hideshow
  :config
  ;; Do not fold comments
  (setq hs-hide-comments-when-hiding-all nil)
  (add-hook 'prog-mode-hook 'hs-minor-mode))
#+end_src


*** Flycheck
#+begin_src emacs-lisp :tangle yes
(use-package flycheck)
#+end_src
*** EditorConfig
#+begin_src emacs-lisp :tangle yes
(use-package editorconfig
  :config
  (editorconfig-mode 1))
#+end_src
*** Compilation

Hide compilation buffer if successful.

#+begin_src emacs-lisp :tangle yes
(use-feature compile
  :config
  (add-hook 'compilation-finish-functions
	    (lambda (buf str)
	      (if (null (string-match ".*exited abnormally.*" str))
		  ;;no errors, make the compilation window go away in a few seconds
		  (progn
		    (run-at-time
		     "1 sec" nil 'delete-windows-on
		     (get-buffer-create "*compilation*"))
		    (message "No Compilation Errors!"))))))
#+end_src
** Lang
*** Web
**** web mode
#+begin_src emacs-lisp :tangle yes
;; Config mostly stolen from https://github.com/raxod502/radian/blob/develop/emacs/radian.el
(use-package web-mode
  :mode (("\\.phtml\\'" . web-mode)
         ("\\.tpl\\.php\\'" . web-mode)
         ("\\.[agj]sp\\'" . web-mode)
         ("\\.as[cp]x\\'" . web-mode)
         ("\\.erb\\'" . web-mode)
         ("\\.mustache\\'" . web-mode)
         ("\\.djhtml\\'" . web-mode)
         ("\\.html?\\'" . web-mode))
  :config
  (setq web-mode-enable-auto-closing t
        web-mode-auto-close-style 2 ;; 2 is a nice number I suppose
        web-mode-enable-auto-quoting nil ;; messes with jsx
        web-mode-markup-indent-offset 2
        web-mode-code-indent-offset 2
        web-mode-css-indent-offset 2)
  (add-to-list 'web-mode-content-types-alist
               '("jsx" . "\\.js[x]?\\'"))

  ;; Fix comments in javascript mode
  (let ((types '("javascript" "jsx")))
    (setq web-mode-comment-formats
          (cl-remove-if (lambda (item)
                          (member (car item) types))
                        web-mode-comment-formats))
    (dolist (type types)
      (push (cons type "//") web-mode-comment-formats))))

(use-package gulp-task-runner
  :defer t)
#+END_SRC
**** restclient

#+BEGIN_SRC emacs-lisp :tangle yes
;; Make sure to use comments (#) as separators
(use-package restclient
  :mode (("\\.rest" . restclient-mode)))
#+END_SRC
*** Javascript
**** js2-mode
#+BEGIN_SRC emacs-lisp :tangle yes
;; Mostly borrowed from https://github.com/CSRaghunandan/.emacs.d/blob/master/setup-files/setup-js.el
(use-package js2-mode
  :ensure-system-package (tsserver . "sudo npm i -g typescript-language-server && sudo pacman -S typescript")
  :mode "\\.m?js\\'"
  :interpreter "node"
  :hook ((js2-mode . (lambda ()
                       (flycheck-mode)
                       (company-mode))))
  :init 
  (with-eval-after-load 'projectile
    (add-to-list 'projectile-globally-ignored-directories "node_modules"))
  :config
  ;; have 2 space indentation by default
  (setq js-indent-level 2
        js2-basic-offset 2
        js-chain-indent t)

  ;; Try to highlight most ECMA built-ins
  (setq js2-highlight-level 3)
  ;; have a shorter idle time delay
  (setq js2-idle-timer-delay 0.1)

  ;; turn off all warnings in js2-mode
  (setq js2-mode-show-parse-errors t
        js2-mode-show-strict-warnings nil
        js2-strict-missing-semi-warning nil
        js2-strict-trailing-comma-warning nil))
#+END_SRC
**** prettier-js

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package prettier-js
  :ensure-system-package prettier
  :hook ((js2-mode rjsx-mode json-mode) . prettier-js-mode)
  :custom (prettier-js-args '("--print-width" "100"
                              "--single-quote" "true"
                              "--trailing-comma" "all")))
#+END_SRC
**** rjsx-mode
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package rjsx-mode
  :mode "components/.+\\.js$")
#+END_SRC
*** LSP-mode
#+BEGIN_SRC emacs-lisp :tangle yes
;; Make sure to install jansson
(use-package lsp-mode
  :commands lsp
  :general
  (leader-key
    :keymaps 'lsp-mode-map
    "cr" 'lsp-rename
    "cl" 'lsp-find-definition
    "cd" 'lsp-ui-doc-glance
    "cpl" 'lsp-ui-peek-find-references)
  :hook (lsp-mode . lsp-enable-which-key-integration)
  :init
  ;; FIXME keymap does not work
  (setq lsp-keymap-prefix "C-l"
	lsp-before-save-edits nil ;; Do not autoformat buffer
	lsp-file-watch-threshold 1500)
  (defun my--lsp-enable ()
    "Enable lsp-mode in all programming modes except those specified below. Taken from https://github.com/raxod502/radian/blob/develop/emacs/radian.el"
    (when (derived-mode-p #'prog-mode #'text-mode)
      (unless (or (null buffer-file-name)
		  (derived-mode-p
		   ;; `lsp-mode' doesn't support Elisp, so let's avoid
		   ;; triggering the autoload just for checking that, yes,
		   ;; there's nothing to do for the *scratch* buffer.
		   #'emacs-lisp-mode
		   ;; Disable for modes that we currently use a specialized
		   ;; framework for, until they are phased out in favor of
		   ;; LSP.

		   ;; other modes go HERE
		   #'org-mode))
	(lsp))))

  (add-hook 'after-change-major-mode-hook 'my--lsp-enable)

  ;; Ignore specific directories in projectile
  (with-eval-after-load 'projectile
    (add-to-list 'projectile-globally-ignored-directories ".clangd"))

  :config
  (setq lsp-server-install-dir (concat emacs-etc-dir "lsp/"))
  (setq lsp-enable-indentation nil
	lsp-enable-on-type-formatting nil
	lsp-session-file (concat emacs-etc-dir "lsp-session")
	read-process-ouput-max (* 1024 1024)))  ;; As per <https://github.com/emacs-lsp/lsp-mode#performance>.

  #+end_src

*** lsp-ui
#+begin_src emacs-lisp :tangle yes
(use-package lsp-ui
  :commands lsp-ui-mode
  :custom
  (lsp-ui-doc-enable nil)
  (lsp-ui-doc-position 'top)
  (lsp-ui-doc-delay 0)
  (lsp-ui-peek-fontify 'always)
  (lsp-ui-doc-include-signature t)
  (lsp-eldoc-enable-hover nil) ; Disable eldoc displays in minibuffer
  (lsp-ui-doc-max-height 8)

  (lsp-ui-sideline-enable nil)
  (lsp-ui-sideline-delay 0.5)
  (lsp-ui-sideline-show-symbol nil) ;; only show code actions
  (lsp-ui-sideline-update-mode 'line)
  (lsp-ui-sideline-show-code-actions t)
  (lsp-ui-sideline-show-hover t)
  (lsp-ui-sideline-ignore-duplicate t)

  (lsp-ui-imenu-enable nil))
  #+end_src

*** lsp-treemacs

#+begin_src emacs-lisp :tangle yes
(use-package lsp-treemacs
  :after lsp
  :general
  (leader-key
    ;; FIXME
    "cts" 'lsp-treemacs-symbols
    "cte" 'lsp-treemacs-errors-list))
#+end_src


*** DAP
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package dap-mode
  :ensure-system-package lldb
  :after lsp-mode
  :general
  (leader-key
    "dd" 'dap-debug
    "dr" 'dap-debug-restart
    "dh" 'dap-hydra
    "dbt" 'dap-breakpoint-toggle
    "du" 'dap-ui-show-many-windows)

  :config
  (add-hook 'dap-stopped-hook
            (lambda (arg) (call-interactively #'dap-hydra)))

  (dap-mode 1)
  (dap-ui-mode 1)
  (require 'dap-gdb-lldb)
  (require 'dap-node)
  (require 'dap-python))
#+END_SRC
(use-feature dap-python
  :after dap-mode
  :custom
  (dap-python-debugger 'debugpy)
  
  :config
  ;; Do not let dap ignore the virtual environment
  (defun dap-python--pyenv-executable-find (command)
    (executable-find "python")))
#+end_src
*** C/C++
To configure a new C program:
1. Create a =CMakeLists.txt= file. Eg:
#+begin_src cmake :tangle no
cmake_minimum_required(VERSION 3.10)

# set the project name
project(Tutorial)

# add the executable
add_executable(Tutorial tutorial.cxx)
#+end_src

2. Run the following commands:
#+begin_src shell :tangle no
cmake -H. -BDebug -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=YES
ln -s Debug/compile_commands.json
#+end_src

**** CMake

#+begin_src emacs-lisp :tangle yes
(use-package cmake-mode
  :mode ("CMAKELists\\.txt\\'" "\\.cmake\\'"))

(use-package cmake-font-lock
  :after (cmake-mode)
  :hook (cmake-mode . cmake-font-lock-activate))
#+end_src

*** CSharp
#+begin_src emacs-lisp :tangle yes
(use-package csharp-mode)
#+end_src
*** GLSL
For OpenGl shader programming.

#+begin_src emacs-lisp :tangle yes
(use-package glsl-mode
  :mode ("\\.vs\\'"
         "\\.fs\\'"
         "\\.glsl\\'"
         "\\.geom\\'"
         "\\.frag\\'"
         "\\.vert\\'"))
#+end_src
*** Python

As always, trying to make use of LSP.

Arch packages:
1. flake8 for flycheck
2. python-black for style
3. python-language-server for lsp

#+begin_src emacs-lisp :tangle yes
(use-feature python
  :mode ("/Pipfile\\'" . conf-mode)
  :hook (python-mode . importmagic-mode))


(use-package lsp-pyright
  :if (executable-find "pyright")
  :after lsp-mode
  :custom
  (lsp-pyright-typechecking-mode "off"))

(use-package direnv
  :config
  (direnv-mode))

(use-package pyenv-mode
  :after python
  :hook ((python-mode . pyenv-mode)
         (projectile-switch-project . projectile-pyenv-mode-set))
  :custom (pyenv-mode-set "3.8.5")
  :preface
  (defun projectile-pyenv-mode-set ()
    "Set pyenv version matching project name."
    (let ((project (projectile-project-name)))
      (if (member project (pyenv-mode-versions))
          (pyenv-mode-set project)
        (pyenv-mode-unset))))

  :config
  ;; Pyenv overrides the org-schedule keybind
  (define-key pyenv-mode-map (kbd "C-c C-s") nil)
  (define-key pyenv-mode-map (kbd "C-M-s") 'pyenv-mode-set))


(use-package blacken
  :commands blacken-mode
  :hook (python-mode . blacken-mode))

(use-package importmagic
  :commands importmagic-mode)


#+END_SRC
*** Lua
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package lua-mode
  :mode "\\.lua\\'"
  :interpreter "lua")
#+END_SRC

*** Json

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package json-mode
  :mode "\\.json\\'")
#+END_SRC
** Functions
*** Align Comments in Region

#+BEGIN_SRC emacs-lisp :tangle yes
(defun my--align-comments (beginning end)
  "Align comments in region"
  (interactive "*r")
  (align-regexp beginning end (concat "\\(\\s-*\\)"
                                      (regexp-quote comment-start)) nil 2))
(leader-key
  "c=c" 'my--align-comments)
#+END_SRC

#+TITLE: Alex Koen's Emacs configuration

I've now been using Emacs as my primary editor for almost two years. Most of the time, it feels like piloting an inter-galactic starship through the turbulence of spacetime, free from the sluggishness of earthbound life. The rest of time, I feel like printing out my config and lighting it on fire.

Regardless, Emacs is tremendous fun. I have made every possible effort to write clean, well-document code but there are bound to be bugs and inconsistencies.

If you are looking for inspiration, here are the best configurations I have found.
[[https://github.com/hlissner/doom-emacs]]
[[https://github.com/rememberYou/.emacs.d]]
https://github.com/raxod502/radian/blob/develop/emacs/radian.el
https://github.com/CSRaghunandan/.emacs.d/tree/master/setup-files

Alright, let's do this:
* Initialization
** Lexical binding

[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][Lexical binding]] improves performance.

#+BEGIN_SRC emacs-lisp :tangle yes :comments no
;;; init.el --- The personal Emacs configuration of Alex Koen -*- lexical-binding: t; -*-
#+END_SRC

** Personal information

#+BEGIN_SRC emacs-lisp :tangle yes
(setq user-full-name "Alex Koen"
      user-mail-address "alex@koen.ca")
#+END_SRC

** Macros and functions

use-feature from [[https://github.com/raxod502/radian/blob/develop/emacs/radian.el]]. Tells straight not to look for a package.
#+BEGIN_SRC emacs-lisp :tangle yes
(defmacro use-feature (name &rest args)
  "Like `use-package', but with `straight-use-package-by-default' disabled.
NAME and ARGS are as in `use-package'."
  (declare (indent defun))
  `(use-package ,name
     :straight nil
     ,@args))
#+END_SRC

** Optimizations
*** Garbage collector

The garbage collector eats up a lot of time during startup, so turn up its memory threshold to prevent it from getting triggered.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq gc-cons-threshold (* 100 1024 1024)
      gc-cons-percentage 0.6)
#+END_SRC

** Set Directories

Note that system directories are set in init.el

#+BEGIN_SRC emacs-lisp :tangle yes
(defconst docs-dir "~/Documents/"
  "The root Drive directory, where all documents are stored.")

(defconst archive-dir (concat docs-dir "Archive/")
  "Archive directory")

(defconst org-dir "~/Org/"
  "Tasks directory")

(defconst brain-dir "~/Brain/org/"
  "Braindump directory")

(defconst dotfiles-dir "~/.dotfiles/"
  "Dotfiles directory")
#+END_SRC

Move files are folders to appropriate locations:
#+BEGIN_SRC emacs-lisp :tangle yes
(setq bookmarks-default-file (concat emacs-etc-dir "bookmarks")
      tramp-auto-save-directory (concat emacs-cache-dir "tramp-auto-save/")
      tramp-backup-directory-alist backup-directory-alist
      tramp-persistency-file-name (concat emacs-cache-dir "tramp-persistency.el"))
#+END_SRC

** Appearance
*** Theme

Doom one is beautiful

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package doom-themes
  :config
  (load-theme 'doom-one t)
  (doom-themes-org-config))
#+END_SRC

*** Text
**** Font

#+BEGIN_SRC emacs-lisp :tangle yes
(set-frame-font "Fira Code 12")
(set-face-attribute 'default nil :height 100)
#+END_SRC

*** Disable unecessary UI elements
**** Tool Bar

#+BEGIN_SRC emacs-lisp :tangle yes
(menu-bar-mode -1)
(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
#+END_SRC

**** Startup Screen

#+BEGIN_SRC emacs-lisp :tangle yes
(setq inhibit-startup-screen t)	; inhibit useless and old-school startup screen
#+END_SRC

*** Prompts

Make yes or no prompts be y or n prompts

#+BEGIN_SRC emacs-lisp :tangle yes
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Relative line numbers

#+BEGIN_SRC emacs-lisp :tangle yes
(global-display-line-numbers-mode t)
(setq display-line-numbers-type 'relative
      display-line-numbers-grow-only t
      display-line-numbers-width-start t)
#+END_SRC

*** Show matching parentheses

#+BEGIN_SRC emacs-lisp :tangle yes
(setq show-paren-delay 0)
(show-paren-mode 1)
#+END_SRC

*** Smooth Scrolling
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package smooth-scrolling
  :init
  (setq smooth-scroll-margin 5
        scroll-conservatively 101
        scroll-preserve-screen-position t
        auto-window-vscroll nil)
  :config
  (setq scroll-margin 5))
#+END_SRC
*** All the icons
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package all-the-icons
  :defer t)
#+END_SRC

*** Doom-modeline

A fancy and fast mode-line inspired by minimalistic design

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package doom-modeline
  :init (doom-modeline-mode 1))
#+END_SRC

*** hl-todo

Highlights keywords in comments

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package hl-todo
  :hook (prog-mode . hl-todo-mode)
  :config
  (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        `(;; For things that need to be done, just not today.
          ("TODO" warning bold)
          ;; For problems that will become bigger problems later if not
          ;; fixed ASAP.
          ("FIXME" error bold)
          ;; For tidbits that are unconventional and not intended uses of the
          ;; constituent parts, and may break in a future update.
          ("HACK" font-lock-constant-face bold)
          ;; For things that were done hastily and/or hasn't been thoroughly
          ;; tested. It may not even be necessary!
          ("REVIEW" font-lock-keyword-face bold)
          ;; For especially important gotchas with a given implementation,
          ;; directed at another user other than the author.
          ("NOTE" success bold)
          ;; For things that just gotta go and will soon be gone.
          ("DEPRECATED" font-lock-doc-face bold))))
#+END_SRC
** Revert

Automatically reload buffers on file change

#+BEGIN_SRC emacs-lisp :tangle yes
(global-auto-revert-mode 1)
#+END_SRC

** Backups

By default, Emacs saves backups relative to the current directory. This is abhorrent. We change this.

# TODO fix auto-save

#+BEGIN_SRC emacs-lisp :tangle yes
(setq make-backup-files t ; make backups file even when in version controlled dir
      create-lockfiles nil ; they cause problems
      backup-directory-alist (list (cons "." (concat emacs-cache-dir "backups/")))
      backup-by-copying t  ; Don't delink hardlinks
      version-control t  ; Use version numbers on backups
      delete-old-versions t  ; Automatically delete excess backups
      kept-new-versions 20  ; how many of the newest versions to keep
      kept-old-versions 5  ; and how many of the old
      auto-save-list-file-prefix (concat emacs-cache-dir "autosave/"))
#+END_SRC

** Better Defaults
#+BEGIN_SRC emacs-lisp :tangle yes
(setq-default vc-follow-symlinks t           ; don't ask for confirmation when opening symlinked file
              indent-tabs-mode nil           ; prefer spaces
              tab-width	4                    ; set width for tabs
              ring-bell-function 'ignore     ; silent bell when you make a mistake
              x-select-enable-clipboard t    ; allow pasting selection outside of emacs
              kill-buffer-query-functions nil
              initial-major-mode 'org-mode
              delete-by-moving-to-trash t    ; move files to trash when deleting
              sentence-end-double-space nil) ; end sentences with a single space
#+END_SRC

* Keybindings
** Unbind RET


Unbind return from evil, so that org-return-follows-link works.

#+BEGIN_SRC emacs-lisp :tangle yes
(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "RET") nil))
#+END_SRC

** General

Space is the best leader key.

#+BEGIN_SRC emacs-lisp :tangle yes
;; load general
(use-package general
  :after which-key
  :config
  (general-override-mode)

  (general-create-definer leader-key
    :states '(normal insert visual motion emacs)
    :keymaps 'override
    :prefix "SPC"
    :non-normal-prefix "M-SPC")

  (leader-key
    ;; Misc
    "u" 'universal-argument

    ;; Buffer
    "bb" 'switch-to-buffer
    "br" 'revert-buffer
    "`" 'evil-switch-to-windows-last-buffer

    ;; Code
    "cc" 'counsel-compile

    ;; Eval
    "eb" 'eval-buffer
    "ed" 'eval-defun
    "ee" 'eval-last-sexp
    "ef" 'load-file
    "er" 'eval-region
    "el" 'load-library

    ;; Files
    "." 'find-file
    "ff" 'dired-jump
    "fr" 'counsel-recentf
    "fs" 'save-buffer

    ;; Magit
    "gg" 'magit-status
    "gfh" 'magit-log-buffer-file

    ;; Language
    "le" 'english-mode
    "lg" 'writing-mode
    "ls" 'flyspell-mode
    "lb" 'ispell-buffer

    ;; Org mode
    "oa" 'org-agenda
    "oc" 'org-capture
    "or" 'org-roam
    "oi" 'org-roam-insert
    "of" 'org-roam-find-file
    "og" 'org-roam-graph
    "oS" 'my--ivy-org-jump-to-agenda-heading

    "ojj" 'org-journal-new-entry
    "oje" 'org-journal-new-scheduled-entry
    "ojs" 'org-journal-search-forever

    ;; Search
    "sb" 'swiper
    "sp" 'counsel-projectile-rg

    ;; Projects
    "SPC" 'projectile-find-file
    "pp" 'counsel-projectile-switch-project
    "pi" 'projectile-invalidate-cache
    "pk" 'projectile-kill-buffers
    "pd" 'my--projectile-find-file-in-project-dotfiles
    "pt" 'my--projectile-find-file-in-project-tasks
    "pc" 'my--projectile-find-file-in-project-config

    ;; Terminal
    "tn" 'vterm-other-window
    ))
#+END_SRC

** Hydra

[[https://github.com/abo-abo/hydra][Hydra]] is a package that allows for families of short keybindings to be defined.

#+BEGIN_QUOTE
Once you summon the Hydra through the prefixed binding (the body + any one head), all heads can be called in succession with only a short extension.

The Hydra is vanquished once Hercules, any binding that isn't the Hydra's head, arrives. Note that Hercules, besides vanquishing the Hydra, will still serve his original purpose, calling his proper command. This makes the Hydra very seamless, it's like a minor mode that disables itself auto-magically.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package hydra
  :bind ("C-x C-=" . hydra-zoom/body))
#+END_SRC

*** Zooming

#+BEGIN_SRC emacs-lisp :tangle yes
(defhydra hydra-zoom ()
  "zoom"
  ("+" text-scale-increase "in")
  ("=" text-scale-increase "in")
  ("-" text-scale-decrease "out")
  ("_" text-scale-decrease "out")
  ("0" (text-scale-adjust 0) "reset")
  ("q" nil "quit" :color blue))
#+END_SRC

** EVIL

Allows for traditional vim bindings inside of emacs

#+BEGIN_SRC emacs-lisp :tangle yes
;; load evil
(use-package evil
  :init
  (setq evil-search-module 'evil-search
        evil-ex-substitute-global t
        evil-esc-mode nil ;; performance. Only used for jj/jk type mappings
        evil-want-C-u-scroll t)
  :bind
  ;; (("C-f" . forward-word)
  ;; ("C-b" . backward-word))
  :config ;; tweak evil after loading it
  ;; Make movement keys work like they should
  (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
  (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
  (define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
  (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
                                        ; Make horizontal movement cross lines                                    
  (setq-default evil-cross-lines t)
  (evil-mode 1))
#+END_SRC

*** A more peaceful keyboard-quit

This code allows us to quit basically everything using ESC.

#+BEGIN_SRC emacs-lisp :tangle yes
(defvar my--escape-hook nil
  "A hook run when esc is pressed")

(defun escape-quit ()
  "Run `my--escape-hook'."
  (interactive)
  (cond ((minibuffer-window-active-p (minibuffer-window))
         ;; quit the minibuffer if open.
         (abort-recursive-edit))
        ;; Run all escape hooks. If any returns non-nil, then stop there.
        ((run-hook-with-args-until-success 'my--escape-hook))
        ;; don't abort macros
        ((or defining-kbd-macro executing-kbd-macro) nil)
        ;; Back to the default
        ((keyboard-quit))))

(global-set-key [remap keyboard-quit] #'escape-quit)
#+END_SRC

*** evil-surround

This package emulates surround.vim by Tim Pope.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package evil-surround
  :config
  (global-evil-surround-mode 1))
#+END_SRC

*** evil-nerd-commenter
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package evil-nerd-commenter
  :init
  (evilnc-default-hotkeys))
#+END_SRC

*** evil-snipe

Allows for quick movement to 2-char sequences.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package evil-snipe
  :config
  (evil-snipe-mode +1))
#+END_SRC
*** winner-mode

Pressing Q restores the window configuration to the last state. Useful for killing compilation buffers etc. Redo with C-c right

#+BEGIN_SRC emacs-lisp :tangle yes
(use-feature winner
  :after evil
  :config
  ;; We do not want to defer since winner does not start logging until
  ;; it is loaded
  (bind-key "Q" #'winner-undo evil-normal-state-map)
  (winner-mode 1))
#+END_SRC
* Core Utilities

Utilities which are essential for rational operation of Emacs

** Exec Path From Shell

This sets the variable exec-path to the normal shell's PATH variable. This doesn't normally get set in daemon mode.

[[https://www.reddit.com/r/emacs/comments/f8xwau/hack_replace_execpathfromshell/fioa62n/]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package exec-path-from-shell
  :config
  (cond ((display-graphic-p)
         (setq exec-path
               (or (eval-when-compile
                     (when (require 'exec-path-from-shell nil t)
                       (setq exec-path-from-shell-check-startup-files nil)
                       (nconc exec-path-from-shell-variables '("SSH_AUTH_LOCK" "PATH" "NNN_PLUG"))
                       (exec-path-from-shell-initialize)
                       exec-path))
                   exec-path)))))
#+END_SRC
** Which Key

A small buffer which shows the list of commands you can execute next.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package which-key
  :init
  (setq which-key-separator " ")
  (setq which-key-prefix-prefix "+")
  :config
  (which-key-mode 1))
#+END_SRC

** Completion
*** Ivy

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ivy
  :defer 1 ;; wait one second before loading
  :config
  (setq ivy-height 15
        ivy-wrap t
        ;; don't use ^ as initial input
        ivy-initial-inputs-alist nil
        ;; highlight til EOL
        ivy-format-function #'ivy-format-function-line
        ;; don't show recent files in switch-buffer
        ivy-use-virtual-buffers nil
        ;; don't quit minibuffer on delete-error
        ivy-on-del-error-function nil
        ;; enable ability to select prompt
        ivy-use-selectable-prompt t)

  (ivy-mode 1))
#+END_SRC
*** Ivy-Rich

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ivy-rich
  :after ivy
  :preface
  (defun ivy-rich-branch-candidate (candidate)
    "Displays the branch candidate of the candidate for ivy-rich."
    (let ((candidate (expand-file-name candidate ivy--directory)))
      (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
          ""
        (format "%s%s"
                (propertize
                 (replace-regexp-in-string abbreviated-home-dir "~/"
                                           (file-name-directory
                                            (directory-file-name candidate)))
                 'face 'font-lock-doc-face)
                (propertize
                 (file-name-nondirectory
                  (directory-file-name candidate))
                 'face 'success)))))

  (defun ivy-rich-compiling (candidate)
    "Displays compiling buffers of the candidate for ivy-rich."
    (let* ((candidate (expand-file-name candidate ivy--directory)))
      (if (or (not (file-exists-p candidate)) (file-remote-p candidate)
              (not (magit-git-repo-p candidate)))
          ""
        (if (my--projectile-compilation-buffers candidate)
            "compiling"
          ""))))

  (defun ivy-rich-file-group (candidate)
    "Displays the file group of the candidate for ivy-rich"
    (let ((candidate (expand-file-name candidate ivy--directory)))
      (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
          ""
        (let* ((group-id (file-attribute-group-id (file-attributes candidate)))
               (group-function (if (fboundp #'group-name) #'group-name #'identity))
               (group-name (funcall group-function group-id)))
          (format "%s" group-name)))))

  (defun ivy-rich-file-modes (candidate)
    "Displays the file mode of the candidate for ivy-rich."
    (let ((candidate (expand-file-name candidate ivy--directory)))
      (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
          ""
        (format "%s" (file-attribute-modes (file-attributes candidate))))))

  (defun ivy-rich-file-size (candidate)
    "Displays the file size of the candidate for ivy-rich."
    (let ((candidate (expand-file-name candidate ivy--directory)))
      (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
          ""
        (let ((size (file-attribute-size (file-attributes candidate))))
          (cond
           ((> size 1000000) (format "%.1fM " (/ size 1000000.0)))
           ((> size 1000) (format "%.1fk " (/ size 1000.0)))
           (t (format "%d " size)))))))

  (defun ivy-rich-file-user (candidate)
    "Displays the file user of the candidate for ivy-rich."
    (let ((candidate (expand-file-name candidate ivy--directory)))
      (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
          ""
        (let* ((user-id (file-attribute-user-id (file-attributes candidate)))
               (user-name (user-login-name user-id)))
          (format "%s" user-name)))))

  (defun ivy-rich-switch-buffer-icon (candidate)
    "Returns an icon for the candidate out of `all-the-icons'."
    (with-current-buffer
        (get-buffer candidate)
      (let ((icon (all-the-icons-icon-for-mode major-mode :height 0.9)))
        (if (symbolp icon)
            (all-the-icons-icon-for-mode 'fundamental-mode :height 0.9)
          icon))))
  :config
  (plist-put ivy-rich-display-transformers-list
             'counsel-find-file
             '(:columns
               ((ivy-rich-candidate               (:width 73))
                (ivy-rich-file-user               (:width 8 :face font-lock-doc-face))
                (ivy-rich-file-group              (:width 4 :face font-lock-doc-face))
                (ivy-rich-file-modes              (:width 11 :face font-lock-doc-face))
                (ivy-rich-file-size               (:width 7 :face font-lock-doc-face))
                (ivy-rich-file-last-modified-time (:width 30 :face font-lock-doc-face)))))
  (plist-put ivy-rich-display-transformers-list
             'ivy-switch-buffer
             '(:columns
               ((ivy-rich-switch-buffer-icon       (:width 2))
                (ivy-rich-candidate                (:width 40))
                (ivy-rich-switch-buffer-size       (:width 7))
                (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
                (ivy-rich-switch-buffer-major-mode (:width 20 :face warning)))
               :predicate (lambda (cand) (get-buffer cand))))
  (ivy-rich-mode 1))
#+END_SRC

**** Flx

Sublime-text fuzzy matching for Emacs. Package used following Doom's ivy configuration.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package flx
  :defer t  ; loaded by ivy
  :init
  (setq ivy-re-builders-alist
        '((counsel-ag . ivy--regex-plus)
          (counsel-rg . ivy--regex-plus)
          (counsel-grep . ivy--regex-plus)
          (swiper . ivy--regex-plus)
          (swiper-isearch . ivy--regex-plus)
          (t . ivy--regex-fuzzy))
        ivy-initial-inputs-alist nil))
#+END_SRC

*** Counsel

Counsel contains ivy enhancements for commonly-used functions.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package counsel
  :demand
  :diminish (ivy-mode . "")
  :bind
  (("C-x b" . ivy-switch-buffer)
   ("C-x C-f" . counsel-find-file))
  :config
  (define-key ivy-minibuffer-map [escape] 'minibuffer-keyboard-quit)

  ;; cleanup
  (setq recentf-save-file (concat emacs-cache-dir "recentf"))

  ;; Search Debug folders for makefiles
  (add-to-list 'counsel-compile-build-directories "Debug")

  (ivy-add-actions
   'counsel-find-file
   `(("b" counsel-find-file-cd-bookmark-action "cd bookmark")
     ("s" counsel-find-file-as-root "open as root")
     ("m" counsel-find-file-mkdir-action "mkdir")
     ("r" (lambda (path) (rename-file path (read-string "New name: "))) "rename")
     ("f" find-file-other-window "other window")
     ("F" find-file-other-frame "other frame")
     ("p" (lambda (path) (with-ivy-window (insert (file-relative-name path default-directory)))) "insert relative path")
     ("P" (lambda (path) (with-ivy-window (insert path))) "insert absolute path")
     ("l" (lambda (path) "Insert org-link with relative path"
            (with-ivy-window (insert (format "[[./%s]]" (file-relative-name path default-directory))))) "insert org-link (rel. path)")
     ("L" (lambda (path) "Insert org-link with absolute path"
            (with-ivy-window (insert (format "[[%s]]" path)))) "insert org-link (abs. path)")))
  (counsel-mode 1))

#+END_SRC

**** Counsel-projectile

Allows for further integration between ivy and projectile.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package counsel-projectile
  :after projectile
  :config
  (counsel-projectile-mode 1))
#+END_SRC

*** Swiper
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package swiper
  :bind (("M-s" . swiper)))
#+END_SRC
*** wgrep
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package wgrep)
#+END_SRC
** Projectile

Project management.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package projectile
  :init
  (setq projectile-cache-file (concat emacs-cache-dir "projectile.cache")
        projectile-enable-caching t
        projectile-known-projects-file (concat emacs-cache-dir "projectile.projects")
        projectile-require-project-root 'prompt
        projectile-files-cache-expire 604800 ; expire after a week
        projectile-sort-order 'recentf
        projectile-use-git-grep t) ; use git-grep for text searches

  ;; TODO - Temp fix for git repositories with submodules: see https://github.com/bbatsov/projectile/issues/1302#issuecomment-433894379
  (setq projectile-git-submodule-command nil)

  :config
  (projectile-mode +1)
  (setq projectile-project-root-files-bottom-up
        (append '(".project"))))
#+END_SRC

*** Projectile for specific projects

#+BEGIN_SRC emacs-lisp :tangle yes
(defun my--projectile-find-file-in-project-config ()
  (interactive)
  (let ((default-directory emacs-dir))
    (counsel-projectile-find-file)))

(defun my--projectile-find-file-in-project-tasks ()
  (interactive)
  (let ((default-directory org-dir))
    (counsel-projectile-find-file)))

(defun my--projectile-find-file-in-project-dotfiles ()
  (interactive)
  (let ((default-directory dotfiles-dir))
    (counsel-projectile-find-file)))
#+END_SRC
** Dired

#+BEGIN_SRC emacs-lisp :tangle yes
(use-feature dired
  :commands dired-jump
  :config
  (setq dired-auto-revert-buffer t  ; don't prompt to revert; just do it
        dired-dwim-target t  ; suggest a target for moving/copying intelligently
        ;; Always copy/delete recursively
        dired-recursive-copies  'always
        dired-recursive-deletes 'top
        dired-clean-confirm-killing-deleted-buffers nil) ;; don't ask just do

  ;; Show directories before files + default -al
  (setq dired-listing-switches "-ahl -v --group-directories-first")

  ;; The standard ls details are extraneous
  (add-hook 'dired-mode-hook #'dired-hide-details-mode)

  (defun my--dired-do-command (command)
    "Run COMMAND on marked files. Any files not already open will be opened.
After this command has been run, any buffers it's modified will remain
open and unsaved."
    (interactive "CRun on marked files M-x ")
    (save-window-excursion
      (mapc (lambda (filename)
              (find-file filename)
              (call-interactively command))
            (dired-get-marked-files)))))
#+END_SRC
*** Dired-x

Adds additional functionality on top of dired.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-feature dired-x
  :config
  (setq dired-omit-verbose nil)

  ;; Set the default application when using ! or & on files.
  ;; Taken from doom emacs
  (setq dired-guess-shell-alist-user
        `(("\\.\\(?:docx\\|pdf\\|djvu\\|eps\\)\\'" xdg-open)
          ("\\.\\(?:jpe?g\\|png\\|gif\\|xpm\\)\\'" xdg-open)
          ("\\.\\(?:xcf\\)\\'" xdg-open)
          ("\\.csv\\'" xdg-open)
          ("\\.tex\\'" xdg-open)
          ("\\.\\(?:mp4\\|mkv\\|avi\\|flv\\|rm\\|rmvb\\|ogv\\)\\(?:\\.part\\)?\\'" xdg-open)
          ("\\.\\(?:mp3\\|flac\\)\\'" xdg-open)
          ("\\.html?\\'" xdg-open)
          ("\\.md\\'" xdg-open))))
#+END_SRC

** Smartparens

[[https://github.com/Fuco1/smartparens][Utility]] for managing parenthesis in Emacs

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package smartparens
  :init
  ;; Don't highlight - overly distracting
  (setq sp-highlight-pair-overlay nil
        sp-highlight-wrap-overlay nil
        sp-highlight-wrap-tag-overlay nil)
  :config
  ;; automatically add newline between braces
  (dolist (brace '("(" "{" "["))
    (sp-pair brace nil :post-handlers '(:add ("||\n[i]" "RET"))))
  (smartparens-global-mode 1))
#+END_SRC

** Folding
#+BEGIN_SRC emacs-lisp :tangle yes
;; Adapted from doom emacs
(use-feature hideshow
  :config
  ;; Do not fold comments
  (setq hs-hide-comments-when-hiding-all nil)
  (add-hook 'prog-mode-hook 'hs-minor-mode))
#+END_SRC
** Helpful

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package helpful
  :commands helpful--read-symbol
  :init
  (global-set-key [remap describe-function] #'helpful-callable)
  (global-set-key [remap describe-command]  #'helpful-command)
  (global-set-key [remap describe-variable] #'helpful-variable)
  (global-set-key [remap describe-key]      #'helpful-key)
  (global-set-key [remap describe-symbol]   #'helpful-symbol)

  :config
  ;; Always select help window when opened
  (setq help-window-select t)
  ;; Remap counsel keybinds to helpful commands
  (with-eval-after-load 'counsel
    (setq counsel-describe-function-function #'helpful-callable
          counsel-describe-variable-function #'helpful-variable)))
#+END_SRC
* Utilities
Utilities which add functionality to emacs
** Yasnippet

A package with which you can insert code or text snippets based on templates.

We define a function to autocomplete snippets. See [[https://github.com/joaotavora/yasnippet/issues/998]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package yasnippet
  :general
  (leader-key "cy" (defhydra hydra-yas (:color blue
                                        :hint nil)
              "
_i_nsert    _n_ew       _v_isit
_r_eload    e_x_pand    _?_ list
"
              ("i" yas-insert-snippet)
              ("n" yas-new-snippet)
              ("v" yas-visit-snippet-file)
              ("r" yas-reload-all)
              ("x" yas-expand)
              ("?" yas-describe-tables)
              ("q" nil "cancel" :color blue)))
  :init
  ;; Automatically expand snippet when # condition: 'auto is used in snippet header
  (defun my--yas-try-expanding-auto-snippets ()
    (when (and (boundp 'yas-minor-mode) yas-minor-mode)
      (let ((yas-buffer-local-condition ''(require-snippet-condition . auto)))
        (yas-expand))))

  (defun company-mode/backend-with-yas (backend)
    "Add :with company-yasnippet to company BACKENDS. Taken from
https://github.com/syl20bnr/spacemacs/pull/179."
    (if (and (listp backend) (member 'company-yasnippet backend))
        backend
      (append (if (consp backend) backend (list backend))
              '(:with company-yasnippet))))
  (add-hook 'post-command-hook #'my--yas-try-expanding-auto-snippets)
  :config
  (with-eval-after-load 'company
    (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends)))

  ;; Disable successful loading messages
  (setq yas-verbosity 2)

  (yas-global-mode 1))
#+END_SRC

** NeoTree and Icons
Displays the folder tree
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package all-the-icons)

(use-package neotree
  :init
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))
#+END_SRC

** Magit

An inteface to version control system Git

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package magit
  :defer t
  :init
  (setq transient-history-file (concat emacs-etc-dir "transient/history")))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package evil-magit
  :after magit)
#+END_SRC

** Company

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package company
  :defer 0.5
  :bind (:map company-active-map
              ("C-n" . company-select-next-or-abort)
              ("C-p" . company-select-previous-or-abort)

              ;; Make TAB always complete the current selection, instead of
              ;; only completing a common prefix.
              ("<tab>" . #'company-complete-selection)
              ("TAB" . #'company-complete-selection)

              ;; Make RET trigger a completion if and only if the user has
              ;; explicitly interacted with Company, instead of always
              ;; doing so.
              :filter (company-explicit-action-p)
              ("<return>" . #'company-complete-selection)
              ("RET" . #'company-complete-selection))

  :config
  ;; Make completions display faster
  (setq company-idle-delay 0.15)
  ;; don't downcase results from company-dabbrev
  (setq company-dabbrev-downcase nil)
  ;; use only buffers with same major-mode for company-dabbrev
  (setq company-dabbrev-other-buffers t)
  ;; Make completions display when you have only typed one character,
  ;; instead of three.
  (setq company-minimum-prefix-length 1))
#+END_SRC

** Vterm
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package vterm
  :ensure-system-package (vterm-ctrl . libvterm)
  :commands vterm vterm-mode
  :init
  (setq vterm-kill-buffer-on-exit t)
  (with-eval-after-load 'evil (evil-set-initial-state 'vterm-mode 'emacs)))
#+END_SRC
* Org-mode
** Configuration
*** Base
#+BEGIN_SRC emacs-lisp :tangle yes
(use-feature org
  :hook
  (org-mode . visual-line-mode)
  :custom
  ;; calendar ical export
  (org-icalendar-include-todo nil)
  (org-icalendar-store-UID nil)
  (org-icalendar-timezone nil)
  (org-icalendar-use-deadline '(event-if-todo-not-done))
  (org-icalendar-use-scheduled '(event-if-todo-not-done))
  (org-icalendar-combined-agenda-file (concat org-dir "calendar.ics"))
  :init
  (setq org-directory org-dir
        org-archive-location (concat archive-dir "Tasks/archive_" (format-time-string "%Y") ".org::datetree/")
        org-use-fast-todo-selection t                                     ; allow changing to any todo state from a menu
        org-enforce-todo-dependencies t                                   ; block setting task to DONE if there are incomplete subtasks
        org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id ; use unique ID's for links
        org-id-locations-file (concat org-dir ".orgids")
        org-clone-delete-id t
        org-catch-invisible-edits 'show
        org-confirm-babel-evaluate nil                                    ; do not ask for confirmation
        org-return-follows-link t
        org-startup-indented t                                            ; indent each level of heading
        org-hide-emphasis-markers t                                       ; hide the markers for italics and bold
        org-pretty-entities t                                             ; show entities as UTF8 characters
        org-image-actual-width (/ (display-pixel-width) 3)
        org-log-repeat nil                                               ; do not record a closing timestamp
        org-export-with-smart-quotes t)

  :custom-face 
  (variable-pitch ((t (:family "Roboto Mono Light" :height 1.0)))) ; Alternatively, Office Code Pro is second best
  (org-document-title ((t (:weight bold :height 1.5))))
  (org-done ((t (:strike-through t :weight bold))))
  (org-headline-done ((t (:strike-through t))))
  (org-level-1 ((t (:height 1.1))))
  (org-level-2 ((t (:height 1.1))))
  (org-level-3 ((t (:height 1.1))))
  (org-link ((t (:underline t)))))

#+END_SRC

*** Todo keywords

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
              (sequence "SOMEDAY(s)" "WAITING(w)" "HOLD(h)" "|" "CANCELLED(c)")))
      org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
              ("WAITING" ("WAITING" . t))
              ("HOLD" ("WAITING") ("HOLD" . t))
              (done ("WAITING") ("HOLD"))
              ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
              ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
              ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
#+END_SRC
*** Emphasis

(enabled) Replace underline with highlight
#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-emphasis-alist
      (quote (("*" bold)
              ("/" italic)
              ("_" (:background "#595959"))
              ("=" org-verbatim verbatim)
              ("~" org-code verbatim)
              ("+"
               (:strike-through t))
              )))
#+END_SRC

(disabled) Custom highlight face. From [[https://emacs.stackexchange.com/questions/38216/custom-faces-in-org-9-0]].

#+BEGIN_SRC emacs-lisp :tangle no
;;; Create highlighter face for marking up text in org-mode
(defface font-lock-highlight-face
  '((t (:inherit org-default :background "#585858")))
  "Face for highlighting text")
(defvar font-lock-highlight-face 'font-lock-highlight-face)

;;; Add keywords
(defun add-highlight-keywords()
  "adds custom keywords for highlighting text in org-mode."
  (font-lock-add-keywords nil
                          '(("\\(!\\)\\([^[:space:]][^\n\r\t]+[^[:space:]]\\)\\(!\\)" . 'font-lock-highlight-face ))))
(add-hook 'org-mode-hook 'add-highlight-keywords)
#+END_SRC
*** Capture

Set up capture templates. The backquoted list allows me to selectively evaluate parts of the list with a , (in this case the concat statement).

#+BEGIN_SRC emacs-lisp :tangle yes
;; TODO use directory variables
(setq org-capture-templates
      `(("t" "Todo" entry (file+headline ,(concat org-dir "refile.org") "Refile")
         "* TODO %?")
        ("p" "Project" entry (file+headline ,(concat org-dir "inbox.org") "Projects") 
         "* %?")
        ("n" "Next" entry (file+headline ,(concat org-dir "refile.org") "Refile") 
         "* NEXT %? \n:PROPERTIES:\n:TRIGGER: next-sibling todo!(\"NEXT\") chain!(\"TRIGGER\") deadline!(cp)\n:END:\n")
        ("l" "Protocol" entry (file+headline ,(concat org-dir "refile.org") "Inbox")
         "* TODO %? [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE")	
        ("L" "Protocol Link" entry (file+headline ,(concat org-dir "refile.org") "Inbox")
         "* TODO %? [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\n")))

;; Allow system-wide org-capture shortcut. Adapted from https://www.reddit.com/r/emacs/comments/74gkeq/system_wide_org_capture/
(defadvice org-switch-to-buffer-other-window
    (after supress-window-splitting activate)
  "Delete the extra window if we're in a capture frame"
  (if (equal "capture" (frame-parameter nil 'name))
      (delete-other-windows)))

(defadvice org-capture-finalize
    (after delete-capture-frame activate)
  "Advise capture-finalize to close the frame"
  (when (and (equal "capture" (frame-parameter nil 'name))
             (not (eq this-command 'org-capture-refile)))
    (delete-frame)))

(defadvice org-capture-refile
    (after delete-capture-frame activate)
  "Advise org-refile to close the frame"
  (when (equal "capture" (frame-parameter nil 'name))
    (delete-frame)))

(defun my--activate-capture-frame ()
  "run org-capture in capture frame"
  (select-frame-by-name "capture")
  (switch-to-buffer (get-buffer-create "*scratch*"))
  (org-capture))
#+END_SRC

*** Refile configuration

#+BEGIN_SRC emacs-lisp :tangle yes
(use-feature org-refile
  :init
  (setq org-refile-targets (quote ((nil :maxlevel . 3)
                                   (org-agenda-files :maxlevel . 3))))
  (setq org-refile-use-outline-path t)
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-allow-creating-parent-nodes (quote confirm))
  (setq org-indirect-buffer-display 'current-window)
  :config
  (defun bh/verify-refile-target ()
    "Exclude todo keywords with a done state from refile targets"
    (not (member (nth 2 (org-heading-components)) org-done-keywords)))

  (setq org-refile-target-verify-function 'bh/verify-refile-target)
  (advice-add 'org-refile :after 'org-save-all-org-buffers))
#+END_SRC

*** Agenda

Set agenda settings

#+BEGIN_SRC emacs-lisp :tangle yes
(use-feature org-agenda
  :config
  ;; warn me of any deadlines in next 7 days
  (setq org-deadline-warning-days 7)

  ;;don't show tasks as scheduled if they are already shown as a deadline
  (setq org-agenda-skip-scheduled-if-deadline-is-shown t)

  ;; Remove uneccesary whitespace
  (setq org-agenda-compact-blocks t)

  ;; Use entire window
  (setq org-agenda-window-setup 'only-window)

  ;; Set agenda files
  (setq org-agenda-files (list org-dir))

  ;; Skip done items in agenda
  (setq org-agenda-skip-scheduled-if-done t)

  (setq org-agenda-skip-deadline-if-done t)

  ;; align tags to right side
  (setq org-agenda-tags-column -100)

  (setq org-agenda-skip-unavailable-files t)

  (advice-add 'org-agenda-quit :before 'org-save-all-org-buffers))
#+END_SRC

*** Variable Pitch Mode

We use a font that's easier on the eyes for long blocks of text

#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'org-mode-hook
          '(lambda ()
             (setq line-spacing 0.2) ;; Add more line padding for readability
             (mapc
              (lambda (face) ;; Other fonts with fixed-pitch.
                (set-face-attribute face nil :inherit 'fixed-pitch))
              (list 'org-code
                    'org-link
                    'org-block
                    'org-table
                    'org-verbatim
                    'org-block-begin-line
                    'org-block-end-line
                    'org-meta-line
                    'org-document-info-keyword))))
#+END_SRC 

*** SRC blocks
#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-src-tab-acts-natively t
      org-src-preserve-indentation t) ; use native major-mode indentation
#+END_SRC
*** Circular Bullets
Make bullets circular
#+BEGIN_SRC emacs-lisp :tangle yes
(font-lock-add-keywords 'org-mode
                        '(("^ *\\([-]\\) "
                           0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•")))
                          ("\\(->\\)"
                           0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "→")))))
#+END_SRC

*** Autosort
#+BEGIN_SRC emacs-lisp :tangle yes
(defun my--org-entry-has-subentries ()
  "Any entry with subheadings"
  (let ((subtree-end (save-excursion (org-end-of-subtree t))))
    (save-excursion
      (org-back-to-heading)
      (forward-line 1)
      (when (< (point) subtree-end)
        (re-search-forward "^\*+ " subtree-end t)))))

(defun my--org-entry-sort-by-property nil
  (let ((property (org-entry-get (point) "SORT" 'INHERIT)))
    (when (and (not (seq-empty-p property))
               (my--org-entry-has-subentries))
      (funcall #'org-sort-entries nil (string-to-char property) nil nil nil)))
  (let ((property_second (org-entry-get (point) "SORT_AFTER" 'INHERIT)))
    (when (and (not (seq-empty-p property_second))
               (my--org-entry-has-subentries))
      (funcall #'org-sort-entries nil (string-to-char property_second) nil nil nil))))

(defun my--org-buffer-sort-by-property (&optional MATCH)
  (interactive)
  (org-map-entries #'my--org-entry-sort-by-property MATCH 'file)
  (org-set-startup-visibility))

                                        ;(add-hook 'org-mode-hook #'my--org-buffer-sort-by-property)
#+END_SRC
*** Search headlines in agenda files

Taken from https://github.com/jkitchin/scimax/blob/131f7f6f537c56f1d30396e79634a8b6cd6c887b/scimax-org.el#L693

#+BEGIN_SRC emacs-lisp :tangle yes
(defun my--ivy-org-jump-to-agenda-heading ()
  "Jump to a heading in an agenda file."
  (interactive)
  (let ((headlines '()))
    (loop for file in (org-agenda-files) do
	  (with-current-buffer (find-file-noselect file)
	    (save-excursion
	      (goto-char (point-min))
	      (while (re-search-forward org-heading-regexp nil t)
		(cl-pushnew (list
			     (format "%-80s (%s)"
				     (match-string 0)
				     (file-name-nondirectory file))
			     :file file
			     :position (match-beginning 0))
			    headlines)))))
    (ivy-read "Headline: "
	      (reverse headlines)
	      :action (lambda (candidate)
			(org-mark-ring-push)
			(find-file (plist-get (cdr candidate) :file))
			(goto-char (plist-get (cdr candidate) :position))
			(outline-show-entry)))))
#+END_SRC
** Packages
*** Babel
**** ob-mermaid
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ob-mermaid
  :custom
  (ob-mermaid-cli-path "~/node_modules/.bin/mmdc"))
#+END_SRC
*** EVIL-Org
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package evil-org
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda ()
              (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+END_SRC

*** org-Bullets
Make the header bullets look prettier
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-bullets
  :init
  (setq org-bullets-face-name "Inconsolata-12")
  (setq org-bullets-bullet-list
        '("◉" "◎" "⚫" "○" "►" "◇"))
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
*** org-calfw
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package calfw
  :commands cfw:open-calendar-buffer
  :config
  ;; better frame. Taken from doom-emacs
  (setq cfw:face-item-separator-color nil
        cfw:render-line-breaker 'cfw:render-line-breaker-none
        cfw:fchar-junction ?╋
        cfw:fchar-vertical-line ?┃
        cfw:fchar-horizontal-line ?━
        cfw:fchar-left-junction ?┣
        cfw:fchar-right-junction ?┫
        cfw:fchar-top-junction ?┯
        cfw:fchar-top-left-corner ?┏
        cfw:fchar-top-right-corner ?┓))

(use-package calfw-org
  :general (leader-key "os" 'cfw:open-org-calendar)
  :commands (cfw:open-org-calendar
             cfw:org-create-source
             cfw:open-org-calendar-withkevin
             my-open-calendar))
#+END_SRC

*** org-checklist

Allows for resetting of checkboxes when item is marked DONE.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-feature org-checklist
  :after org)
#+END_SRC
*** org-download
Automatically insert images via drag-and-drop

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-download
  :after org
  :general
  (leader-key
    :keymaps 'org-mode-map
    "ods" 'org-download-screenshot)
  :config
  (setq org-download-screenshot-method "maim -s %s")
  (defun my-org-download-method (link)
    "This is a helper function for org-download.
It creates a folder in the root directory named after the
org filename (sans extension) and puts all images from that file in there.
Inspired by https://github.com/daviderestivo/emacs-config/blob/6086a7013020e19c0bc532770e9533b4fc549438/init.el#L701"
    (let ((filename
           (file-name-nondirectory
            (car (url-path-and-query
                  (url-generic-parse-url link)))))
          ;; Create folder name with current buffer name, and place in root dir
          (dirname (concat "./img/"
                           (replace-regexp-in-string " " "_" (downcase (file-name-base buffer-file-name))))))

      ;; Add timestamp to filename
      (setq filename-with-timestamp (format "%s%s.%s"
                                            (file-name-sans-extension filename)
                                            (format-time-string org-download-timestamp)
                                            (file-name-extension filename)))
      ;; Create folder if necessary
      (unless (file-exists-p dirname)
        (make-directory dirname))
      (expand-file-name filename-with-timestamp dirname)))
  (setq org-download-method 'my-org-download-method))
#+END_SRC
*** org-edna
Advanced dependency management

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-edna
:after org
:config
(org-edna-mode))
#+END_SRC
*** org-journal
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-journal
  :custom
  (org-journal-cache-dir emacs-cache-dir)
  (org-journal-date-prefix "#+TITLE: ")
  (org-journal-dir (concat brain-dir "/journal/"))
  (org-journal-file-format "%Y-%m-%d.org")
  (org-journal-date-format "%A %Y-%m-%d")
  (org-journal-time-format "" ))

#+END_SRC
*** org-modules
#+BEGIN_SRC emacs-lisp :tangle yes
(require 'org-install)
(setq org-modules '(org-habit))
(org-load-modules-maybe t)
#+END_SRC

*** org-oxclip
Let you copy formatted org-mode content to the clipboard. Requires the package =xclip= to run.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package htmlize
  :after org)

(use-package ox-clip
  :general
  (leader-key
    :keymaps 'org-mode-map
    "oy" 'ox-clip-formatted-copy)
  :after org)
#+END_SRC
*** org-Protocol

Allows for external applications to trigger custom actions without external dependencies

#+BEGIN_SRC emacs-lisp :tangle yes
(require 'org-protocol)

(defun transform-square-brackets-to-round-ones(string-to-transform)
  "Transforms [ into ( and ] into ), other chars left unchanged."
  (concat 
   (mapcar #'(lambda (c) (if (equal c ?[) ?\( (if (equal c ?]) ?\) c))) string-to-transform))
  )

#+END_SRC

*** org-super-agenda

A package which allows for much greater customization of the org agenda.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-super-agenda
  :after org-agenda
  :config
  (setq org-agenda-custom-commands
        '(("v" "Agenda"
           ((agenda "" ((org-agenda-span 'day)
                        (org-super-agenda-groups
                        '((:name "Personal"
                                 :time-grid t
                                 :tag "personal")
                          (:auto-property "Class")
                          (:name "School Other"
                                 :file-path "school")))))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-agenda-block-separator "")
                         (org-super-agenda-groups
                          '((:name "This week"
                                   :tag "this_week")
                            (:name "All Todos")))))))))

  (setq org-super-agenda-header-map (make-sparse-keymap)) ;; removes custom keybindings which are in opposition to evil-org
  (org-super-agenda-mode))
#+END_SRC

*** ox-hugo
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ox-hugo
  :ensure-system-package hugo
  :after ox
  :init
  (setq org-hugo-set-lastmod t
        org-hugo-default-section-directory "notes"))
#+END_SRC
*** ox-Pandoc
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ox-pandoc
  :ensure-system-package pandoc
  :init
  (setq org-pandoc-menu-entry
        '(
          (?l "to latex-pdf and open." org-pandoc-export-to-latex-pdf-and-open)
          (?L "to latex-pdf." org-pandoc-export-to-latex-pdf)
          (?4 "to html5 and open." org-pandoc-export-to-html5-and-open)
          (?$ "as html5." org-pandoc-export-as-html5))))
#+END_SRC
** Zettelkasten
*** org-roam
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-roam
  :ensure-system-package
  ((dot . graphviz)
   (sqlite3))
  :hook
  (after-init . org-roam-mode)
  :init
  (setq org-roam-directory brain-dir
        org-roam-tag-sources '(prop last-directory)
        org-roam-graph-exclude-matcher '("journal")
        org-roam-link-title-format "§%s")

  :config
  (require 'org-roam-protocol)
  (setq org-roam-capture-templates
        '(("d" "default" plain (function org-roam--capture-get-point)
           "%?"
           :file-name "${slug}"
           :head "#+title: ${title}\n"
           :unnarowed t)
          ("b" "book" plain (function org-roam--capture-get-point)
           "%?"
           :file-name "books/${slug}"
           :head "#+title: ${title}\n

- author ::
- tags :: "
           :unnarowed t)))
  (setq org-roam-capture-ref-templates
        '(("r" "ref" plain (function org-roam--capture-get-point)
           "%?"
           :file-name "websites/${slug}"
           :head "#+roam_key: ${ref}
,#+title: ${title}

-  source :: ${ref}"
           :unnarrowed t))))
#+END_SRC
*** org-roam-bibtex
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-roam-bibtex
  :after org-roam
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :config
  (setq org-roam-bibtex-preformat-keywords
        '("=key=" "title" "url" "file" "author-or-editor" "keywords"))
  (setq orb-templates
        '(("r" "ref" plain (function org-roam-capture--get-point)
           ""
           :file-name "papers/%(org-roam--title-to-slug \"${title}\")"
           :head "#+TITLE: ${title}\n#+ROAM_KEY: ${ref}

- tags ::
- keywords :: ${keywords}
- author :: ${author-or-editor}"
           :unnarrowed t))))
#+END_SRC
*** ivy-bibtex

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ivy-bibtex
  :after org-roam
  :commands ivy-bibtex
  :general
  (leader-key
    "ob" 'ivy-bibtex)
  :config
  (setq bibtex-completion-notes-path brain-dir
        bibtex-completion-bibliography "~/Documents/zotero-bib.bib"
        bibtex-completion-pdf-field "file"
        bibtex-completion-notes-template-multiple-files
        (concat
         "#+TITLE: ${title}\n"
         "#+ROAM_KEY: cite:${=key=}\n"
         "* TODO Notes\n"
         ":PROPERTIES:\n"
         ":Custom_ID: ${=key=}\n"
         ":NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n"
         ":AUTHOR: ${author-abbrev}\n"
         ":JOURNAL: ${journaltitle}\n"
         ":DATE: ${date}\n"
         ":YEAR: ${year}\n"
         ":DOI: ${doi}\n"
         ":URL: ${url}\n"
         ":END:\n\n")))

#+END_SRC
*** org-ref
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-ref
  :after org
  :init
  ;; must be called at init
  (setq org-ref-completion-library 'org-ref-ivy-cite)
  :config
  (setq org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex
   org-ref-default-bibliography (list (concat docs-dir "zotero-bib.bib"))
   org-ref-notes-directory brain-dir))
#+END_SRC

*** (disabled) org-ref-ox-hugo
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-ref-ox-hugo
  :disabled t
  :straight (:host github :repo "jethrokuan/org-ref-ox-hugo")
  :after org org-ref ox-hugo
  :config
  (add-to-list 'org-ref-formatted-citation-formats
               '("md"
                 ("article" . "${author}, *${title}*, ${journal}, *${volume}(${number})*, ${pages} (${year}). ${doi}")
                 ("inproceedings" . "${author}, *${title}*, In ${editor}, ${booktitle} (pp. ${pages}) (${year}). ${address}: ${publisher}.")
                 ("book" . "${author}, *${title}* (${year}), ${address}: ${publisher}.")
                 ("phdthesis" . "${author}, *${title}* (Doctoral dissertation) (${year}). ${school}, ${address}.")
                 ("inbook" . "${author}, *${title}*, In ${editor} (Eds.), ${booktitle} (pp. ${pages}) (${year}). ${address}: ${publisher}.")
                 ("incollection" . "${author}, *${title}*, In ${editor} (Eds.), ${booktitle} (pp. ${pages}) (${year}). ${address}: ${publisher}.")
                 ("proceedings" . "${editor} (Eds.), _${booktitle}_ (${year}). ${address}: ${publisher}.")
                 ("unpublished" . "${author}, *${title}* (${year}). Unpublished manuscript.")
                 ("misc" . "${author} (${year}). *${title}*. Retrieved from [${howpublished}](${howpublished}). ${note}.")
                 (nil . "${author}, *${title}* (${year})."))))
#+END_SRC
*** org-noter
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-noter
  :after (:any org pdf-view)
  :config
  (setq
   ;; The WM can handle splits
   org-noter-notes-window-location 'other-frame
   ;; Please stop opening frames
   org-noter-always-create-frame nil
   ;; I want to see the whole file
   org-noter-hide-other nil
   ;; Everything is relative to the main notes file
   org-noter-notes-search-path (list (concat brain-dir "papers/"))))
#+END_SRC
* LaTeX
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package latex
  :straight auctex
  :config
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (prettify-symbols-mode)))
  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  (setq TeX-save-query nil)
  (setq TeX-auto-save t)
  (setq Tex-parse-self t)
  (setq TeX-PDF-mode t)
  ;; Method for enabling forward and inverse search 
  (setq TeX-source-correlate-method 'synctex)
  ;; inhibit the question to start a server process
  (setq TeX-source-correlate-start-server t)
  (setq TeX-view-program-selection '((output-pdf "Okular"))))
(set-default 'preview-scale-function 2.0)
#+END_SRC

** RefTeX

Allow RefTeX to plug into AUCTeX

#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)
(setq reftex-extra-bindings t)
(setq reftex-use-external-file-handlers t)
#+END_SRC

* Development
** Flycheck
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package flycheck)
#+END_SRC
** EditorConfig
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package editorconfig
  :config
  (editorconfig-mode 1))
#+END_SRC
* Lang
** Web
*** web mode
#+BEGIN_SRC emacs-lisp :tangle yes
;; Config mostly stolen from https://github.com/raxod502/radian/blob/develop/emacs/radian.el
(use-package web-mode
  :mode (("\\.phtml\\'" . web-mode)
         ("\\.tpl\\.php\\'" . web-mode)
         ("\\.[agj]sp\\'" . web-mode)
         ("\\.as[cp]x\\'" . web-mode)
         ("\\.erb\\'" . web-mode)
         ("\\.mustache\\'" . web-mode)
         ("\\.djhtml\\'" . web-mode)
         ("\\.html?\\'" . web-mode))
  :config
  (setq web-mode-enable-auto-closing t
        web-mode-auto-close-style 2 ;; 2 is a nice number I suppose
        web-mode-enable-auto-quoting nil ;; messes with jsx
        web-mode-markup-indent-offset 2
        web-mode-code-indent-offset 2
        web-mode-css-indent-offset 2)
  (add-to-list 'web-mode-content-types-alist
               '("jsx" . "\\.js[x]?\\'"))

;; Fix comments in javascript mode
  (let ((types '("javascript" "jsx")))
    (setq web-mode-comment-formats
          (cl-remove-if (lambda (item)
                          (member (car item) types))
                        web-mode-comment-formats))
    (dolist (type types)
      (push (cons type "//") web-mode-comment-formats))))

(use-package gulp-task-runner
  :defer t)
#+END_SRC
*** restclient

#+BEGIN_SRC emacs-lisp :tangle yes
;; Make sure to use comments (#) as separators
(use-package restclient
  :mode (("\\.rest" . restclient-mode)))
#+END_SRC
** Javascript
*** js2-mode
#+BEGIN_SRC emacs-lisp :tangle yes
;; Mostly borrowed from https://github.com/CSRaghunandan/.emacs.d/blob/master/setup-files/setup-js.el
(use-package js2-mode
  :ensure-system-package (tsserver . "sudo npm i -g typescript-language-server")
  :mode "\\.m?js\\'"
  :interpreter "node"
  :hook ((js2-mode . (lambda ()
                       (flycheck-mode)
                       (company-mode))))
  :init 
  (with-eval-after-load 'projectile
    (add-to-list 'projectile-globally-ignored-directories "node_modules"))
  :config
  ;; have 2 space indentation by default
  (setq js-indent-level 2
        js2-basic-offset 2
        js-chain-indent t)

  ;; Try to highlight most ECMA built-ins
  (setq js2-highlight-level 3)
  ;; have a shorter idle time delay
  (setq js2-idle-timer-delay 0.1)

  ;; turn off all warnings in js2-mode
  (setq js2-mode-show-parse-errors t
        js2-mode-show-strict-warnings nil
        js2-strict-missing-semi-warning nil
        js2-strict-trailing-comma-warning nil))
#+END_SRC
*** prettier-js

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package prettier-js
  :ensure-system-package prettier
  :hook ((js2-mode rjsx-mode json-mode) . prettier-js-mode)
  :custom (prettier-js-args '("--print-width" "100"
                              "--single-quote" "true"
                              "--trailing-comma" "all")))
#+END_SRC
*** rjsx-mode
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package rjsx-mode
  :mode "components/.+\\.js$")
#+END_SRC
** LSP-mode
#+BEGIN_SRC emacs-lisp :tangle yes
;; Make sure to install jansson
(use-package lsp-mode
  :commands lsp
  :general
  (leader-key
    :keymaps 'lsp-mode-map
    "cr" 'lsp-rename
    "cl" 'lsp-find-definition
    "cd" 'lsp-describe-thing-at-point
    "cpd" 'lsp-ui-peek-find-definitions
    "cpl" 'lsp-ui-peek-find-references)

  :init
  (defun my--lsp-enable ()
    "Enable lsp-mode in all programming modes except those specified below. Taken from https://github.com/raxod502/radian/blob/develop/emacs/radian.el"
     (when (derived-mode-p #'prog-mode #'text-mode)
      (unless (or (null buffer-file-name)
                  (derived-mode-p
                   ;; `lsp-mode' doesn't support Elisp, so let's avoid
                   ;; triggering the autoload just for checking that, yes,
                   ;; there's nothing to do for the *scratch* buffer.
                   #'emacs-lisp-mode
                   ;; Disable for modes that we currently use a specialized
                   ;; framework for, until they are phased out in favor of
                   ;; LSP.

                   ;; other modes go HERE
                   #'org-mode))
        (lsp))))

  (add-hook 'after-change-major-mode-hook 'my--lsp-enable)

  ;; Ignore specific directories in projectile
  (with-eval-after-load 'projectile
    (add-to-list 'projectile-globally-ignored-directories ".clangd"))

  :config
  ;; TODO - Add company-capf to front of backends. The following line is a fix. See https://github.com/emacs-lsp/lsp-mode/issues/1736
  (add-hook 'lsp-managed-mode-hook (lambda ()
        (setq-local company-backends
                    (cons 'company-capf
                          (remq 'company-capf company-backends)))))

  (setq lsp-enable-indentation nil
        lsp-enable-on-type-formatting nil
        lsp-prefer-capf t
        lsp-session-file (concat emacs-etc-dir "lsp-session")
        read-process-ouput-max (* 1024 1024)))  ;; As per <https://github.com/emacs-lsp/lsp-mode#performance>.

(use-package lsp-ui
  :commands lsp-ui-mode
  :config
  (setq lsp-ui-doc-enable nil
        lsp-ui-sideline-show-hover nil
        lsp-ui-doc-max-height 8))
#+END_SRC

** DAP
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package dap-mode
  :ensure-system-package lldb
  :after lsp-mode
  :general
  (leader-key
    :keymaps 'lsp-mode-map
    "dd" 'dap-debug
    "dr" 'dap-debug-restart
    "dh" 'dap-hydra
    "dbt" 'dap-breakpoint-toggle
    "du" 'dap-ui-show-many-windows)

  :config
  (add-hook 'dap-stopped-hook
            (lambda (arg) (call-interactively #'dap-hydra)))

  (dap-mode 1)
  (dap-ui-mode 1)
  (require 'dap-gdb-lldb)
  (require 'dap-node)
  (require 'dap-python))
#+END_SRC
** C/C++
To configure a new C program:
1. Create a =CMakeLists.txt= file. Eg:
#+BEGIN_SRC cmake :tangle no
cmake_minimum_required(VERSION 3.10)

# set the project name
project(Tutorial)

# add the executable
add_executable(Tutorial tutorial.cxx)
#+END_SRC

2. Run the following commands:
#+BEGIN_SRC shell :tangle no
cmake -H. -BDebug -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=YES
ln -s Debug/compile_commands.json
#+END_SRC

*** ccls

While ccls in nice in theory, it has given me nothing but trouble. We will use clangd instead.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ccls
  :disabled t
  :ensure-system-package ccls
  :after lsp
  :init
  (with-eval-after-load 'projectile
    (add-to-list 'projectile-globally-ignored-directories ".ccls-cache")
    (add-to-list 'projectile-project-root-files-bottom-up ".ccls-root")
    (add-to-list 'projectile-project-root-files-top-down-recurring "compile_commands.json")))
#+END_SRC

*** CMake

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package cmake-mode
  :mode ("CMAKELists\\.txt\\'" "\\.cmake\\'"))

(use-package cmake-font-lock
  :after (cmake-mode)
  :hook (cmake-mode . cmake-font-lock-activate))
#+END_SRC

** GLSL
For OpenGl shader programming.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package glsl-mode
  :mode ("\\.vs\\'"
         "\\.fs\\'"
         "\\.glsl\\'"
         "\\.geom\\'"
         "\\.frag\\'"
         "\\.vert\\'"))
#+END_SRC
** Python

As always, trying to make use of LSP.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package lsp-python-ms
  :after lsp-clients
  :init
  (setq lsp-python-ms-dir (concat emacs-etc-dir "mspyls/")))

(use-feature python)
#+END_SRC
** Lua
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package lua-mode
  :mode "\\.lua\\'"
  :interpreter "lua")
#+END_SRC

** Json

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package json-mode
  :mode "\\.json\\'")
#+END_SRC
* Writing
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package olivetti
  :config
  (setq olivetti-body-width 80))

(use-package langtool
  :ensure-system-package languagetool
  :commands (langtool-check
             langtool-check-done
             langtool-show-message-at-point
             langtool-correct-buffer)
  :general
  (leader-key
    :keymaps 'org-mode-map
    "llb" 'langtool-check-buffer
    "llc" 'langtool-check-done)
  :init
  (setq langtool-default-language "en-CA")
  :config
  (setq langtool-java-classpath "/usr/share/languagetool:/usr/share/java/languagetool/*"))
#+END_SRC

* Functions
** Writing Function

#+BEGIN_SRC emacs-lisp :tangle yes
(defvar writemode 1 "Set default writing mode state.")
(defun writing-mode ()
  "Configure writing environment."
  (interactive)
  (cond
   ((= writemode 1)
    ;;(focus-mode t)
    (olivetti-mode t)
    (variable-pitch-mode 1) ;; All fonts with variable pitch.
    (text-scale-increase 0.5)
    (display-line-numbers-mode -1)
    (setq english-mode 1)
    (setq-local writemode 2))
   ((= writemode 2)
    ;;(focus-mode -1)
    (olivetti-mode -1)
    (variable-pitch-mode 0) ;; All fonts with variable pitch.
    (text-scale-decrease 0)
    (display-line-numbers-mode t)
    (setq english-mode 2)
    (setq-local display-line-numbers 'relative)
    (setq-local writemode 1))))
#+END_SRC
** Ispell

#+BEGIN_SRC emacs-lisp :tangle yes
;; find aspell and hunspell automatically
(use-package flyspell
  :config
  (setq ispell-program-name "aspell"
        ispell-dictionary "canadian"
        ispell-silently-savep t))
#+END_SRC
* Organization
** Reviews

Daily review inspired by [[https://youtu.be/reazJx4INyM?t=77][Ali Abdaal]].

#+BEGIN_SRC emacs-lisp :tangle yes
(defun my--daily-review ()
  (interactive)
  (let ((org-capture-templates `(("d" "Daily Review" entry (file (lambda () (concat org-dir "Reviews/daily/" (format-time-string "%Y-%m-%d") ".org")))
                                  (file ,(concat org-dir "Templates/daily-review.org"))))))
    (progn
      (org-capture nil "d"))))

(defun my--visit-daily-review ()
"Visit the file corresponding to today's daily review"
(interactive)
(find-file (concat org-dir "Reviews/daily/" (format-time-string "%Y-%m-%d") ".org")))

(defun my--weekly-review ()
  (interactive)
  (let ((org-capture-templates `(("w" "weekly review" entry (file+olp+datetree (lambda () (concat org-dir "Reviews/reviews_" (format-time-string "%Y") ".org")))
                                  (file ,(concat org-dir "Templates/weekly-review.org"))))))
    (progn
      (org-capture nil "w")
      (org-capture-finalize t)
      (org-speed-move-safe 'outline-up-heading)
      (org-narrow-to-subtree))))

(defun my--monthly-review ()
  (interactive)
  (let ((org-capture-templates `(("m" "Monthly Review" entry (file+olp+datetree (lambda () (concat org-dir "Reviews/reviews_" (format-time-string "%Y") ".org")))
                                  (file ,(concat org-dir "Templates/monthly-review.org"))))))
    (progn
      (org-capture nil "m")
      (org-capture-finalize t)
      (org-speed-move-safe 'outline-up-heading)
      (org-narrow-to-subtree))))
#+END_SRC

#+title: Alex Koen's Emacs configuration

I have now been using Emacs as my primary editor for almost three years. Most of the time, it feels like piloting an inter-galactic starship through the turbulence of spacetime, free from the sluggishness of earthbound life. The rest of time, I feel like printing out my config and lighting it on fire. Regardless, it is tremendous fun and a worthy distraction from my homework.

Alright, let's do this:
* Usage
** Use-package

Usage of :preface, :init, :config
#+begin_src emacs-lisp :tangle no
(use-package example
  ;; Note that errors are never trapped in the preface, since doing so would hide definitions from the byte-compiler.
  :preface (message "I'm here at byte-compile and load time")
  :init (message "I'm always here at startup")
  :config
  (message "I'm always here after the package is loaded"))
#+end_src

** Debugging

The following blocks may be tangled to debug certain features:

*** Package Loading

#+begin_src emacs-lisp :tangle no
(setq use-package-verbose t
      use-package-compute-statistics t)
#+end_src

To see what's loading a package:
#+begin_src emacs-lisp :tangle no
(with-eval-after-load 'ob (debug))
#+end_src

* Initialization
** Lexical Binding

[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][Lexical binding]] improves performance.

#+begin_src emacs-lisp :tangle yes :comments no
;;; init.el --- The personal Emacs configuration of Alex Koen -*- lexical-binding: t; -*-
#+end_src

** Performance Optimizations
*** Garbage collector

The garbage collector eats up a lot of time during startup, so turn up its memory threshold to prevent it from getting triggered.

#+begin_src emacs-lisp :tangle yes
(setq gc-cons-threshold (* 100 1024 1024)
      gc-cons-percentage 0.6)
#+end_src

** Benchmarking

https://github.com/jschaf/esup

#+begin_src emacs-lisp :tangle yes
(use-package esup
  :commands esup
  :custom
  (esup-depth 2))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package explain-pause-mode
  :custom
  (explain-pause-alert-style 'silent))
#+end_src
** Personal Information

#+begin_src emacs-lisp :tangle yes
(setq user-full-name "Alex Koen"
      user-mail-address "alex@koen.ca")
#+end_src

** Macros & Functions

use-feature from [[https://github.com/raxod502/radian/blob/develop/emacs/radian.el]]. Tells straight not to look for a package.
#+begin_src emacs-lisp :tangle yes
(defmacro use-feature (name &rest args)
  "Like `use-package', but with `straight-use-package-by-default' disabled.
NAME and ARGS are as in `use-package'."
  (declare (indent defun))
  `(use-package ,name
     :straight nil
     ,@args))
#+end_src

Sometimes you mistakenly add advice to a function. This function removes all advice.
#+begin_src emacs-lisp :tangle yes
(defun my--advice-unadvice (sym)
  "Remove all advices from symbol SYM."
  (interactive "aFunction symbol: ")
  (advice-mapc (lambda (advice _props) (advice-remove sym advice)) sym))
#+end_src

** Exec Path From Shell

This sets the variable exec-path to the normal shell's PATH variable. This doesn't normally get set in daemon mode.

[[https://www.reddit.com/r/emacs/comments/f8xwau/hack_replace_execpathfromshell/fioa62n/]]
#+begin_src emacs-lisp :tangle yes
(use-package exec-path-from-shell
  :config
  (cond ((display-graphic-p)
         (setq exec-path
               (or (eval-when-compile
                     (when (require 'exec-path-from-shell nil t)
                       (setq exec-path-from-shell-check-startup-files nil)
                       (nconc exec-path-from-shell-variables '("SSH_AUTH_LOCK" "PATH" "NNN_PLUG"))
                       (exec-path-from-shell-initialize)
                       exec-path))
                   exec-path)))))
#+end_src
** Set Directories

Note that system directories are set in init.el

#+begin_src emacs-lisp :tangle yes
(defconst docs-dir "~/Documents/"
  "The root Drive directory, where all documents are stored.")

(defconst org-dir "~/Nextcloud/Org/"
  "Org directory")

(defconst journal-dir "~/Journal/"
  "Org directory")

(defconst brain-dir "~/Brain/org/"
  "Braindump directory")

(defconst dotfiles-dir "~/.dotfiles/"
  "Dotfiles directory")
#+end_src

Move files are folders to appropriate locations:
#+begin_src emacs-lisp :tangle yes
(setq bookmarks-default-file (concat emacs-etc-dir "bookmarks")
      tramp-auto-save-directory (concat emacs-cache-dir "tramp-auto-save/")
      tramp-backup-directory-alist backup-directory-alist
      tramp-persistency-file-name (concat emacs-cache-dir "tramp-persistency.el"))
#+end_src

** Native comp
#+begin_src emacs-lisp :tangle yes
(use-feature comp
  :if (eql emacs-major-version 28)
  :custom
  (warning-suppress-log-types '((comp))))
#+end_src
** Secrets
#+begin_src emacs-lisp :tangle yes
(load-file (concat emacs-dir "secrets.el"))
#+end_src

* Better Defaults
** Asynchronously tangle literate config

Tangling this org file on save. This code is borrowed from https://github.com/rememberYou/.emacs.d/blob/master/config.org

#+begin_src emacs-lisp :tangle yes
(use-package async)
(defun my--async-babel-tangle (org-file)
  "Tangles the org file asynchronously."
  (let ((init-tangle-start-time (current-time))
        (file (buffer-file-name))
        (async-quiet-switch "-q"))
    (async-start
     `(lambda ()
        (require 'org)
        (org-babel-tangle-file ,org-file))
       `(lambda (result)
          (if result
              (message "SUCCESS: %s successfully tangled (%.2fs)."
                       ,org-file
                       (float-time (time-subtract (current-time)
                                                  ',init-tangle-start-time)))
            (message "ERROR: %s as tangle failed." ,org-file))))))
#+end_src

** Misc
#+begin_src emacs-lisp :tangle yes
(setq vc-follow-symlinks t           ; don't ask for confirmation when opening symlinked file
      ring-bell-function 'ignore     ; silent bell when you make a mistake
      x-select-enable-clipboard t    ; allow pasting selection outside of emacs
      suggest-key-bindings nil
      kill-buffer-query-functions nil
      initial-major-mode 'emacs-lisp-mode
      initial-scratch-message nil
      debug-on-error nil
      save-interprogram-paste-before-kill t
      default-input-method 'TeX
      compilation-scroll-output 'first-error
      compilation-skip-threshold 2   ; don't stop on info or warnings
      delete-by-moving-to-trash t    ; move files to trash when deleting
      sentence-end-double-space nil) ; end sentences with a single space

(setq-default truncate-lines t)
#+end_src

** Backups

By default, Emacs saves backups relative to the current directory. This is abhorrent. We change this.

#+begin_src emacs-lisp :tangle yes
(setq make-backup-files t ; make backups file even when in version controlled dir
      create-lockfiles nil ; they cause problems
      backup-directory-alist (list (cons "." (concat emacs-cache-dir "backups/")))
      backup-by-copying t  ; Don't delink hardlinks
      version-control t  ; Use version numbers on backups
      delete-old-versions t  ; Automatically delete excess backups
      kept-new-versions 20  ; how many of the newest versions to keep
      kept-old-versions 5  ; and how many of the old
      auto-save-list-file-prefix (concat emacs-cache-dir "autosave/"))
#+end_src

** Tabs

Use spaces instead of tabs.

#+begin_src emacs-lisp :tangle yes
(setq-default tab-width 2
              evil-shift-width tab-width
              indent-tabs-mode nil)
#+end_src
** Whitespace
#+begin_src emacs-lisp :tangle yes
(use-package ws-butler
  :hook (prog-mode . ws-butler-mode)
  :custom
  (ws-butler-keep-whitespace-before-point nil))

#+end_src
** Revert

Automatically reload buffers on file change

#+begin_src emacs-lisp :tangle yes
(global-auto-revert-mode 1)
#+end_src

** Helpful

#+begin_src emacs-lisp :tangle yes
(use-package helpful
  :commands helpful--read-symbol
  :init
  (global-set-key [remap describe-function] #'helpful-callable)
  (global-set-key [remap describe-command]  #'helpful-command)
  (global-set-key [remap describe-variable] #'helpful-variable)
  (global-set-key [remap describe-key]      #'helpful-key)
  (global-set-key [remap describe-symbol]   #'helpful-symbol)

  :config
  ;; By default, evil shadows helpful keys
  (evil-define-key 'normal helpful-mode-map "q" 'quit-window)

  ;; Always select help window when opened
  (setq help-window-select t))
#+end_src
** Which Key

A small buffer which shows the list of commands you can execute next.

#+begin_src emacs-lisp :tangle yes
(use-package which-key
  :demand t
  :custom
  (which-key-idle-delay 0.2)
  (which-key-separator " ")
  (which-key-prefix-prefix "+")
  :config
  (which-key-mode 1))
#+end_src
** Custom
#+begin_src emacs-lisp :tangle yes
;; FIXME General must be loaded first
;; (use-feature custom
;;   :general
;;   (general-nmap :keymaps 'custom-mode-map
;;     "<mouse-down-1>" 'widget-button-click))
#+end_src

** No littering

#+begin_src emacs-lisp :tangle yes
(use-package no-littering
  :config
  (with-eval-after-load 'recentf
    (add-to-list 'recentf-exclude no-littering-var-directory)
    (add-to-list 'recentf-exclude no-littering-etc-directory))

  (setq auto-save-file-name-transforms
	`((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

  ;; no-littering changes default snippets directory, so I changed it back.
  (add-to-list 'yas-snippet-dirs
	       (expand-file-name "snippets" user-emacs-directory)))
#+end_src
* Appearance
** Theme
*** Modus-themes

The Modus themes are striking and are noticeably easier to read than alternatives. The following code is taken from the theme's [[https://protesilaos.com/modus-themes/#h:69b92089-069c-4ba1-9d94-cc3415fc4f87][manual]].

#+begin_src emacs-lisp :tangle yes
(use-package modus-themes
  :config
  (load-theme 'modus-vivendi t))
#+end_src

*** Doom-themes

#+begin_src emacs-lisp :tangle yes

(use-package doom-themes
  :defer t
  :custom-face
  (font-lock-comment-face ((t (:slant italic))))

  :config
  ;; (load-theme 'doom-spacegrey t)
  (doom-themes-org-config))
#+end_src

** Text
*** Font

#+begin_src emacs-lisp :tangle yes
(defun my--configure-fonts (_)
  (set-face-attribute 'default nil
                      :font "Pragmata Pro"
                      :height 120)

  (set-face-attribute 'fixed-pitch nil
                      :font "Pragmata Pro"
                      :height 120)

  (set-face-attribute 'variable-pitch nil
                      :font "Pragmata Pro"
                      :weight 'normal
                      :height 120)

 (remove-hook 'after-make-frame-functions #'my-configure-fonts))

;; In daemon mode, fonts must be set after frame creation.
(if (daemonp)
    (add-hook 'after-make-frame-functions #'my--configure-fonts)
  (my--configure-fonts t))
#+end_src

** Frame
*** Parameters
#+begin_src emacs-lisp :tangle yes
(add-to-list 'default-frame-alist '(internal-border-width . 16))
#+end_src
*** Tool Bar

#+begin_src emacs-lisp :tangle yes
(menu-bar-mode -1)
(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
#+end_src

*** Startup Screen

#+begin_src emacs-lisp :tangle yes
(setq inhibit-startup-screen t)	; inhibit useless and old-school startup screen
#+end_src

** Prompts

Make yes or no prompts be y or n prompts

#+begin_src emacs-lisp :tangle yes
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Dashboard
#+begin_src emacs-lisp :tangle yes
(use-package dashboard
  :custom
  (dashboard-startup-banner (concat emacs-dir "splash.png"))
  (dashboard-set-heading-icons t)
  (dashboard-set-file-icons t)
  (dashboard-center-content t)
  (dashboard-items nil)
  (dashboard-page-separator "\n")
  :config
  (dashboard-setup-startup-hook))
#+end_src
** Relative line numbers

#+begin_src emacs-lisp :tangle yes
(global-display-line-numbers-mode t)
(setq display-line-numbers-type 'relative
      display-line-numbers-grow-only t)

;; Prevent lines from being shifted when order of magnitude increases.
(setq display-line-numbers-width-start t)

;; Disable line numbers for some modes
(dolist (mode '(term-mode-hook
                shell-mode-hook
                vterm-mode-hook
                org-agenda-mode-hook
                jupyter-repl-mode-hook
                treemacs-mode-hook
                olivetti-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Highlight current line
#+begin_src emacs-lisp :tangle yes
(use-feature hl-line
  :hook (prog-mode . hl-line-mode))
#+end_src
** Show matching parentheses

#+begin_src emacs-lisp :tangle yes
(setq show-paren-delay 0)
(show-paren-mode 1)
#+end_src

** Smooth Scrolling

Copied from Doom Emacs

#+begin_src emacs-lisp :tangle yes
(setq hscroll-margin 2
      fast-but-imprecise-scrolling t
      hscroll-step 1
      ;; Emacs spends too much effort recentering the screen if you scroll the
      ;; cursor more than N lines past window edges (where N is the settings of
      ;; `scroll-conservatively'). This is especially slow in larger files
      ;; during large-scale scrolling commands. If kept over 100, the window is
      ;; never automatically recentered.
      scroll-conservatively 101
      scroll-margin 0
      scroll-preserve-screen-position t
      ;; Reduce cursor lag by a tiny bit by not auto-adjusting `window-vscroll'
      ;; for tall lines.
      auto-window-vscroll nil
      ;; mouse
      mouse-wheel-scroll-amount '(5 ((shift) . 2))
      mouse-wheel-progressive-speed nil)  ; don't accelerate scrolling

#+end_src
** smartparens

[[https://github.com/Fuco1/smartparens][Utility]] for managing parenthesis in Emacs

#+begin_src emacs-lisp :tangle yes
(use-package smartparens
  :init
  ;; Don't highlight - overly distracting
  (setq sp-highlight-pair-overlay nil
        sp-highlight-wrap-overlay nil
        sp-highlight-wrap-tag-overlay nil
        sp-escape-quotes-after-insert nil)
  (setq-default sp-autoskip-closing-pair nil)
  :config
  (require 'smartparens-config)

  (defun sp-point-before-whitespace-p (_id action _context)
    "Return t if point is followed by a whitespace character, nil
otherwise. This predicate is only tested on \"insert\" action."
    (when (eq action 'insert)
      (sp--looking-at-p "\\s-")))

  (defun sp-point-before-closing-brace-p (_id action _context)
    "Return t if point is followed by a closing brace character, nil
otherwise. This predicate is only tested on \"insert\" action."
    (when (eq action 'insert)
      (sp--looking-at-p "[])}]")))

  (dolist (brace '("(" "{" "["))
    (sp-pair brace nil
             ;; Expand {|} => SPC => { | }
             ;; Expand {|} => RET => {
             ;;   |
             ;; }
             :post-handlers '(("||\n[i]" "RET") ("| " "SPC"))
             ;; Don't autopair opening braces if before a non-whitespace
             ;; character. The rationale: it interferes with manual balancing of
             ;; braces, and is odd form to have s-exps with no whitespace in
             ;; between, e.g. ()()(). Insert whitespace if genuinely want to
             ;; start a new form in the middle of a word.
             :when '(sp-point-before-whitespace-p
                     sp-point-before-closing-brace-p
                     sp-point-before-eol-p)))

  ;; Don't do square-bracket space-expansion where it doesn't make sense to
  (sp-local-pair '(emacs-lisp-mode org-mode markdown-mode)
                 "[" nil :post-handlers '(:rem ("| " "SPC")))

  (smartparens-global-mode 1))
#+end_src


** All the icons
#+begin_src emacs-lisp :tangle yes
(use-package all-the-icons
  :defer t)
#+end_src

** Doom-modeline

A fancy and fast mode-line inspired by minimalistic design

#+begin_src emacs-lisp :tangle yes
(use-package doom-modeline
  :init (doom-modeline-mode 1))
#+end_src

** Hide modeline
#+begin_src emacs-lisp :tangle yes
(use-package hide-mode-line
  :commands hide-mode-line-mode)
#+end_src
** hl-todo

Highlights keywords in comments

#+begin_src emacs-lisp :tangle yes
(use-package hl-todo
:hook ((org-mode markdown-mode prog-mode) . hl-todo-mode)
:config
(setq hl-todo-highlight-punctuation ":"
      hl-todo-keyword-faces
      `(;; For things that need to be done, just not today.
        ("TODO" warning bold)
        ;; For problems that will become bigger problems later if not
        ;; fixed ASAP.
        ("FIXME" error bold)
        ;; For tidbits that are unconventional and not intended uses of the
        ;; constituent parts, and may break in a future update.
        ("HACK" font-lock-constant-face bold)
        ;; For things that were done hastily and/or hasn't been thoroughly
        ;; tested. It may not even be necessary!
        ("REVIEW" font-lock-keyword-face bold)
        ;; For especially important gotchas with a given implementation,
        ;; directed at another user other than the author.
        ("NOTE" success bold)
        ;; For things that just gotta go and will soon be gone.
        ("DEPRECATED" font-lock-doc-face bold))))
#+end_src
** Doom-Popup

#+begin_src emacs-lisp :tangle yes
(use-package doom-popup
  :commands (set-popup-rule! set-popup-rules!)
  :straight (:host github :repo "akoen/doom-popup")
  :custom
  (+popup-all-popups t)
  :config
  (+popup-mode +1)
  ;; General keyword doesn't seem to work with :straight
  (general-define-key :states '(normal insert motion)
                      :keymaps 'override
                      "C-<tab>"   #'+popup/toggle
                      ;; "C-~"   #'+popup/raise
                      "C-x p" #'+popup/other)

  (set-popup-rules!
    '(("\\*Async Shell Command\\*" :ttl nil))))
#+end_src

* Keybindings
** Unbind RET

Unbind return from evil, so that org-return-follows-link works.
#+begin_src emacs-lisp :tangle yes
(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "RET") nil))
#+end_src

** General

Space is the best leader key.

#+begin_src emacs-lisp :tangle yes
(use-package general
  :after which-key
  :config
  (general-override-mode)
  (general-evil-setup)
  (general-auto-unbind-keys)

  (general-create-definer leader-key
    :keymaps 'override
    :states '(normal insert hybrid visual motion operator emacs)
    :prefix "SPC"
    :non-normal-prefix "C-SPC")

  (leader-key
    ;; Misc
    "u" 'universal-argument

    ;; Buffer
    "b" '(:wk "buffer")
    "br" 'revert-buffer
    "bD" 'kill-buffer
    "`" 'evil-switch-to-windows-last-buffer

    "d" '(:wk "debug")

    ;; Files
    "." 'find-file
    "ff" 'dired-jump
    "fs" 'save-buffer
    "fR" '((lambda (new-path)
             (interactive (list (read-file-name "Move file to: ")))
             (rename-file (buffer-file-name) (expand-file-name new-path)))
           :wk "move/rename")

    ;; Magit
    "g" '(:wk "git")
    "gg" 'magit-status
    "gfh" 'magit-log-buffer-file

    ;; Language
    "lg" 'writing-mode
    "ls" 'flyspell-mode
    "lb" 'ispell-buffer

    ;; Org mode
    "o" '(:wk "org")
    "oa" 'org-agenda
    "oc" 'org-capture
    "ojj" 'org-journal-new-entry
    "oje" 'org-journal-new-date-entry
    "ojs" 'org-journal-search-forever

    ;; Terminal
    "t" '(:wk "term")
    "tn" 'vterm-other-window
    ))
#+end_src

** Hydra

[[https://github.com/abo-abo/hydra][Hydra]] is a package that allows for families of short keybindings to be defined.

#+BEGIN_QUOTE
Once you summon the Hydra through the prefixed binding (the body + any one head), all heads can be called in succession with only a short extension.

The Hydra is vanquished once Hercules, any binding that isn't the Hydra's head, arrives. Note that Hercules, besides vanquishing the Hydra, will still serve his original purpose, calling his proper command. This makes the Hydra very seamless, it's like a minor mode that disables itself auto-magically.
#+END_QUOTE

#+begin_src emacs-lisp :tangle yes
(use-package hydra
  :general
  ("C-x C-=" 'hydra-zoom/body)
  (general-nmap "C-w" 'hydra-window/body)

  :config
  (defhydra hydra-window ()
    "Window"

    ("C-w" ace-select-window "select" :exit t)
    ("d" delete-window "delete" :exit t)

    ("C-h" evil-window-left "left" :exit t :column "Move")
    ("C-j" evil-window-down "down" :exit t)
    ("C-k" evil-window-up "up" :exit t)
    ("C-l" evil-window-right "right" :exit t)

    ("h" evil-window-left "left" :column "Move Stay")
    ("j" evil-window-down "down")
    ("k" evil-window-up "up")
    ("l" evil-window-right "right")

    ("H" shrink-window-horizontally "←" :column "Resize")
    ("J" enlarge-window "↓")
    ("K" shrink-window "↑")
    ("L" enlarge-window-horizontally "→")

    ("x" ace-delete-window "delete" :exit t :column "Operate")
    ("m" ace-delete-other-windows "maximize" :exit t)
    ("b" balance-windows "balance")

    ("sh" evil-window-split "horizontally" :column "Split" :exit t)
    ("sv" evil-window-vsplit "vertically" :exit t)

    ("q" quit-window "quit" :color blue))

  (defhydra hydra-zoom ()
    "zoom"
    ("+" text-scale-increase "in")
    ("=" text-scale-increase "in")
    ("-" text-scale-decrease "out")
    ("_" text-scale-decrease "out")
    ("0" (text-scale-adjust 0) "reset")
    ("q" nil "quit" :color blue))
  )
#+end_src


** Undo

#+begin_src emacs-lisp :tangle yes
(use-package undo-tree
  :custom
  (undo-tree-visualizer-diff t)
  (undo-tree-auto-save-history t)
  (undo-tree-enable-undo-in-region t)
  :config
  (global-undo-tree-mode +1))
#+end_src

** EVIL
*** Base configuration
Allows for traditional vim bindings inside of emacs

#+begin_src emacs-lisp :tangle yes :noweb no-export
;; load evil
(use-package evil
  :after undo-tree
  :init
  (setq evil-want-keybinding nil) ;; use evil-collection instead. Must be set on init.
  :custom
  (evil-undo-system 'undo-tree)
  (evil-split-window-below t)
  (evil-vsplit-window-right t)
  (evil-search-module 'evil-search)
  (evil-ex-substitute-global t)
  (evil-esc-mode nil) ;; performance. Only used for jj/jk type mappings
  (evil-want-C-u-scroll t)
  (evil-want-Y-yank-to-eol t)
  ;; (evil-ex-search-vim-style-regexp t) Consider this
  (evil-visual-state-cursor 'hollow)
  (evil-want-C-u-delete t)
  (evil-jumps-cross-buffers nil)
  (evil-cross-lines t)
  (evil-emacs-state-cursor "#ff9999")
  (evil-normal-state-cursor "#ffffff")
  :config
  (evil-define-operator my--evil-replace-with-kill-ring (beg end)
    "Replace text object with kill ring contents without replacing them."
    :move-point nil
    (interactive "<r>")
    (save-excursion
      (delete-region beg end)
      (goto-char beg)
      (call-interactively 'evil-paste-before 1)))

  (define-key evil-normal-state-map "go" 'my--evil-replace-with-kill-ring)

  ;; By default indenting moves the point to the beginning of the region. Quite
  ;; honestly, this is evil.
  (defadvice evil-indent (around evil-indent-advice activate)
    (save-excursion
      ad-do-it))

  <<custom text objects>>
  <<better line movement>>

  (evil-mode 1))
#+end_src

*** Better line movement

Especially when writing text, moving by visual lines instead of by numbered lines is the way to go. However, when using relative line numbers, this can make large relative jumps like 13k inaccurate. Here, we define j and k to only move by visual lines if there is no associated COUNT.

#+begin_src emacs-lisp :tangle no :noweb-ref better line movement
(evil-define-motion evil-next-visual-line-or-next-line (count)
  "Move the cursor 1 visual lines down or COUNT numbered lines down."
  :type exclusive
    (let ((line-move-visual (if count nil t)))
      (evil-line-move (or count 1))))

(evil-define-motion evil-previous-visual-line-or-previous-line (count)
  "Move the cursor 1 visual lines up or COUNT numbered lines up."
  :type exclusive
    (let ((line-move-visual (if count nil t)))
      (evil-line-move (- (or count 1)))))

  (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line-or-next-line)
  (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line-or-previous-line)
  (define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line-or-next-line)
  (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line-or-previous-line)
#+end_src
*** CamelCase word movement
#+begin_src emacs-lisp :tangle yes
(global-subword-mode +1)
#+end_src
*** Custom text objects
#+begin_src emacs-lisp :tangle no :noweb-ref custom text objects
(defmacro define-and-bind-text-object (key start-regex end-regex)
  (let ((inner-name (make-symbol "inner-name"))
        (outer-name (make-symbol "outer-name")))
    `(progn
       (evil-define-text-object ,inner-name (count &optional beg end type)
         (evil-select-paren ,start-regex ,end-regex beg end type count nil))
       (evil-define-text-object ,outer-name (count &optional beg end type)
         (evil-select-paren ,start-regex ,end-regex beg end type count t))
       (define-key evil-inner-text-objects-map ,key (quote ,inner-name))
       (define-key evil-outer-text-objects-map ,key (quote ,outer-name)))))

;; FIXME These do not work at beginning/end of region
;; create "il"/"al" (inside/around) line text objects:
;; (define-and-bind-text-object "l" "^\\s-*" "\\s-*$")
;; create "ie"/"ae" (inside/around) entire buffer text objects:

;; See https://github.com/emacs-evil/evil-surround#add-new-surround-pairs-through-creation-of-evil-objects
(define-and-bind-text-object "e" "\\`\\s-*" "\\s-*\\'")
(define-and-bind-text-object "/" "/" "/")
(define-and-bind-text-object "*" "*" "*")
(define-and-bind-text-object "~" "\\~" "\\~")
(define-and-bind-text-object "=" "=" "=")
(define-and-bind-text-object "$" "\\$" "\\$")
(define-and-bind-text-object "," "," ",")

;; Inner/around line text object from https://github.com/emacsorphanage/evil-textobj-line
(defun evil-line-range (count beg end type &optional inclusive)
  (if inclusive
      (evil-range (line-beginning-position) (line-end-position))
    (let ((start (save-excursion
                   (back-to-indentation)
                   (point)))
          (end (save-excursion
                 (goto-char (line-end-position))
                 (skip-syntax-backward " " (line-beginning-position))
                 (point))))
      (evil-range start end))))

(evil-define-text-object evil-a-line (count &optional beg end type)
  "Select range between a character by which the command is followed."
  (evil-line-range count beg end type t))
(evil-define-text-object evil-inner-line (count &optional beg end type)
  "Select inner range between a character by which the command is followed."
  (evil-line-range count beg end type))

(define-key evil-outer-text-objects-map "l" 'evil-a-line)
(define-key evil-inner-text-objects-map "l" 'evil-inner-line)

(with-eval-after-load 'evil-nerd-commenter
  (define-key evil-outer-text-objects-map "c" 'evilnc-outer-commenter)
  (define-key evil-inner-text-objects-map "c" 'evilnc-inner-comment))

(evil-define-text-object evil-inner-url (count &optional _beg _end type)
  "Text object to select the inner url at point.

This excludes the protocol and querystring."
  (cl-destructuring-bind (beg . end)
      (bounds-of-thing-at-point 'url)
    (evil-range
     (save-excursion
       (goto-char beg)
       (re-search-forward "://" end t))
     (save-excursion
       (goto-char end)
       (- (if-let (pos (re-search-backward "[?#]" beg t))
              pos
            end)
          (if (evil-visual-state-p)
              1
            0)))
     type)))

(evil-define-text-object evil-outer-url (count &optional _beg _end type)
  "Text object to select the whole url at point."
  (cl-destructuring-bind (beg . end)
      (bounds-of-thing-at-point 'url)
    (evil-range
     beg (- end (if (evil-visual-state-p) 1 0))
     type)))

(define-key evil-outer-text-objects-map "u" 'evil-outer-url)
(define-key evil-inner-text-objects-map "u" 'evil-inner-url)
#+end_src
*** EVIL-Collection
#+begin_src emacs-lisp :tangle yes
(use-package evil-collection
  :after evil
  :config
  (setq evil-collection-company-use-tng nil)
  (evil-collection-init))
#+end_src

*** A more peaceful keyboard-quit

This code allows us to quit basically everything using ESC.

#+begin_src emacs-lisp :tangle yes
(setq evil-intercept-esc nil) ;; May need to be set to t

(defvar my--escape-hook nil
  "A hook run when esc is pressed")

(defun escape-quit ()
  "Run `my--escape-hook'."
  (interactive)
  (cond ((evil-insert-state-p) (evil-force-normal-state))
	 ;; quit the minibuffer if open.
   ((minibuffer-window-active-p (minibuffer-window))
         (abort-recursive-edit))
	;; Run all escape hooks. If any returns non-nil, then stop there.
	((run-hook-with-args-until-success 'my--escape-hook))
	;; don't abort macros
	((or defining-kbd-macro executing-kbd-macro) nil)
  ;; Back to the default
  ((keyboard-quit))))

;; We want this *everywhere*
(general-define-key :states '(insert normal visual motion) "<escape>" 'escape-quit)
;; Covers other places like the minibufer
(general-define-key :keymaps 'override "<escape>" 'escape-quit)
#+end_src

*** evil-surround

This package emulates surround.vim by Tim Pope.

#+begin_src emacs-lisp :tangle yes
(use-package evil-surround
  :config
  (global-evil-surround-mode 1)
  ;; Do not add spaces inside parens
  (evil--add-to-alist
   'evil-surround-pairs-alist
   ?\( '("(" . ")")
   ?\[ '("[" . "]")
   ?\{ '("{" . "}")
   ?\) '("( " . " )")
   ?\] '("[ " . " ]")
   ?\} '("{ " . " }")))
#+end_src

*** evil-nerd-commenter
#+begin_src emacs-lisp :tangle yes
(use-package evil-nerd-commenter
  :general
  (general-nmap "gc" 'evilnc-comment-operator))
#+end_src

*** evil-numbers
#+begin_src emacs-lisp :tangle yes
(use-package evil-numbers
  :general
  (general-nmap
    "g=" 'evil-numbers/inc-at-pt
    "g-" 'evil-numbers/dec-at-pt))
#+end_src

*** evil-args
#+begin_src emacs-lisp :tangle yes
(use-package evil-args
  :commands evil-inner-arg evil-outer-arg
  :init
  (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
  (define-key evil-outer-text-objects-map "a" 'evil-outer-arg))
#+end_src

*** evil-matchit
#+begin_src emacs-lisp :tangle yes
(use-package evil-matchit
  :config
  (global-evil-matchit-mode 1))
#+end_src

*** evil-snipe

Allows for quick movement to 2-char sequences.

#+begin_src emacs-lisp :tangle yes
(use-package evil-snipe
  :config
  (evil-snipe-mode +1)
  (evil-snipe-override-mode +1))
#+end_src
*** evil-goggles

Gives a visual indication as to the region you just edited.

#+begin_src emacs-lisp :tangle yes
(use-package evil-goggles
  :config
  (evil-goggles-mode)
  (evil-goggles-use-diff-faces))
#+end_src
** winner-mode

Pressing Q restores the window configuration to the last state. Useful for killing compilation buffers etc. Redo with C-c right

#+begin_src emacs-lisp :tangle yes
(use-feature winner
  :after evil
  :config
  ;; We do not want to defer since winner does not start logging until
  ;; it is loaded
  (bind-key "Q" #'winner-undo evil-normal-state-map)
  (winner-mode 1))
#+end_src
** Avy

#+begin_src emacs-lisp :tangle yes
(use-package avy
  :general
  (general-nmap "C-s" 'evil-avy-goto-char-timer)
  :custom
  (avy-background t))
#+end_src
** Ace-window

#+begin_src emacs-lisp :tangle yes
(use-package ace-window
  :custom-face
  (aw-leading-char-face ((t (:inherit font-lock-keyword-face :bold t :height 3.0))))
  :custom
  (aw-keys '(?h ?j ?k ?l ?a ?s ?d ?f))
  (aw-dispatch-always t)
  (aw-scope 'frame))
#+end_src
** Link-hint
#+begin_src emacs-lisp :tangle yes
(use-package ace-link
  ;; REVIEW Link-hint was better, but as problems in mu4e emails
  :general
  (general-nmap
    :keymaps '(helpful-mode-map info-mode-map mu4e-view-mode-map)
    "o" 'ace-link)
  (leader-key
    "sl" 'ace-link))
#+end_src
* Completion
** Minibuffer Completion
#+begin_src emacs-lisp :tangle yes
(use-package vertico
  :straight '(vertico :host github
                      :repo "minad/vertico"
                      :branch "main"
                      :files (:defaults "extensions/*")
                      :includes (vertico-directory))
  :custom
  (vertico-cycle t)
  (enable-recursive-minibuffers t)
  :config
  (vertico-mode 1))

(use-package vertico-directory
  ;; More convenient directory navigation commands
  :bind (:map vertico-map
              ("RET" . vertico-directory-enter)
              ("DEL" . vertico-directory-delete-char)
              ("M-DEL" . vertico-directory-delete-word))
  ;; Tidy shadowed file names
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))

(use-feature savehist
  :custom
  (history-length 25)
  :config
  (savehist-mode 1))

(use-package orderless
  :custom
  (completion-styles '(orderless))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles . (partial-completion))))))

(use-package consult
  :general
  (leader-key
    "fr" 'consult-recent-file
    "bb" 'consult-buffer
    "BB" 'consult-bookmark
    "yp" 'consult-yank
    "so" 'consult-outline
    "sO" 'consult-org-agenda
    "ss" 'consult-line
    "sf" 'consult-focus-lines)
  :custom
  (consult-narrow-key "<")
  (consult-project-root-function #'projectile-project-root)
  :init
  ;; Configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0
        register-preview-function #'consult-register-format)
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Replace `completing-read-multiple' with an enhanced version.
  (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple))

(use-package consult-flycheck
  :commands consult-flycheck
  :general
  (leader-key
    "cf" 'consult-flycheck))

(use-package consult-dir
  :general
  (leader-key "fd" 'consult-dir)
  (:keymaps 'vertico-map
            "C-x C-d" 'consult-dir
            "C-x C-j" 'consult-jump-file))

(use-package marginalia
  :config
  (marginalia-mode +1))

(use-package embark
  :general
  ;; Bindings shadow evil-repeat-pop
  (:states '(normal insert)
           "C-." 'embark-act
           "M-." 'embark-dwim
           "C-h B" 'embark-bindings)
  :custom
  (prefix-help-command #'embark-prefix-help-command)
  :config
  (setq embark-action-indicator
        (lambda (map _target)
          (which-key--show-keymap "Embark" map nil nil 'no-paging)
          #'which-key--hide-popup-ignore-command)
        embark-become-indicator embark-action-indicator))

(use-package embark-consult
  :after (embark consult)
  :demand t
  :hook
  (embark-collect-mode . embark-consult-preview-minor-mode))
#+end_src
** Company

#+begin_src emacs-lisp :tangle yes
;; REVIEW Consider replacing with https://github.com/minad/corfu
(use-package company
  :defer 0.5
  :hook (prog-mode . company-mode)
  :general
  (:keymaps 'company-active-map
            "<tab>" nil
            "TAB" nil
            "C-n" 'company-select-next-or-abort
            "C-p" 'company-select-previous-or-abort)
  (:keymaps 'company-active-map
            :predicate 'company-explicit-action-p
            "<return>"  'company-complete-selection
            "RET"  'company-complete-selection)
  (general-imap "TAB" (general-predicate-dispatch nil
           (and (bound-and-true-p yas-minor-mode)
                (yas-maybe-expand-abbrev-key-filter 'yas-expand))
           #'yas-expand
           (>= company-candidates-length 1)
           #'company-complete-selection))

  (general-imap "<tab>" (general-predicate-dispatch nil
           (and (bound-and-true-p yas-minor-mode)
                (yas-maybe-expand-abbrev-key-filter 'yas-expand))
           #'yas-expand
           (>= company-candidates-length 1)
           #'company-complete-selection))

  :config
  ;; Make completions display faster
  (setq company-idle-delay 0.15)
  ;; don't downcase results from company-dabbrev
  (setq company-dabbrev-downcase nil)
  ;; use only buffers with same major-mode for company-dabbrev
  (setq company-dabbrev-other-buffers t)
  ;; Make completions display when you have only typed one character,
  ;; instead of three.
  (setq company-minimum-prefix-length 1))
#+end_src

** Yasnippet

A package with which you can insert code or text snippets based on templates.

We define a function to autocomplete snippets. See [[https://github.com/joaotavora/yasnippet/issues/998]]
#+begin_src emacs-lisp :tangle yes
(use-package yasnippet
  :defer 5
  :general
  (leader-key "cy" (defhydra hydra-yas (:color blue
                                               :hint nil)
		     "
_i_nsert    _n_ew       _v_isit
_r_eload    e_x_pand    _?_ list
"
		     ("i" yas-insert-snippet)
		     ("n" yas-new-snippet)
		     ("v" yas-visit-snippet-file)
		     ("r" yas-reload-all)
		     ("x" yas-expand)
		     ("?" yas-describe-tables)
		     ("q" nil "cancel" :color blue)))
  :bind*
  (:map yas-keymap
	("TAB" . (lambda () (interactive) (company-abort) (yas-next-field)))
	("<tab>" . (lambda () (interactive) (company-abort) (yas-next-field))))
  :config

  ;; Automatically expand snippet when # condition: 'auto is used in snippet header
  (defun my--yas-try-expanding-auto-snippets ()
    (when (and (boundp 'yas-minor-mode) yas-minor-mode)
      (let ((yas-buffer-local-condition ''(require-snippet-condition . auto)))
        (yas-expand))))

  (add-hook 'post-command-hook #'my--yas-try-expanding-auto-snippets)

  (add-to-list 'warning-suppress-types '(yasnippet backquote-change))

  (setq yas-verbosity 2)
  (yas-global-mode 1))
#+END_SRC

** Hippie
#+begin_src emacs-lisp :tangle yes
(use-feature hipie-exp
  :general
  (general-define-key "M-/" 'hippie-expand))
#+end_src
* Project, Files, and System

For tools that deal with files.

** Projectile

Project management.

#+begin_src emacs-lisp :tangle yes
(use-package projectile
  :defer 1
  :general
  (leader-key
    ;; Projects
    "SPC" 'projectile-find-file
    "pd" 'projectile-find-dir
    "pp" 'projectile-switch-project
    "pi" 'projectile-invalidate-cache
    "pk" 'projectile-kill-buffers
    "pt" 'my--projectile-find-file-in-project-tasks
    "pc" 'my--projectile-find-file-in-project-config

    "cc" 'projectile-compile-project
    )

  :init
  (setq projectile-enable-caching nil
        projectile-require-project-root 'prompt
        projectile-sort-order 'recentf
        projectile-use-git-grep t) ; use git-grep for text searches

  ;; TODO - Temp fix for git repositories with submodules: see https://github.com/bbatsov/projectile/issues/1302#issuecomment-433894379
  (setq projectile-git-submodule-command nil)

  :config
  (projectile-mode +1)
  (setq projectile-project-root-files-bottom-up
        (append '(".project"))))
#+end_src

*** Projectile for specific projects

#+begin_src emacs-lisp :tangle yes
(defun my--projectile-find-file-in-project-config ()
  (interactive)
  (let ((default-directory emacs-dir))
    (projectile-find-file)))

(defun my--projectile-find-file-in-project-tasks ()
  (interactive)
  (let ((default-directory org-dir))
    (projectile-find-file)))

(defun my--projectile-find-file-in-project-dotfiles ()
  (interactive)
  (let ((default-directory dotfiles-dir))
    (projectile-find-file)))
#+end_src
** Affe
Find and grep fuzzy searching, inspired by fzf.

#+begin_src emacs-lisp :tangle yes
(use-package affe
  :straight (:host github :repo "minad/affe")
  :general
  (leader-key
    "sp" 'affe-grep
    ;; We handle file searching with projectile
    ;; "fz" 'affe-find
    )
  :custom
  (affe-regexp-function #'orderless-pattern-compiler)
  (affe-highlight-function #'orderless-highlight-matches)
  (affe-grep-command "rg --hidden --null --color=never --max-columns=1000 --no-heading --line-number -v ^$ .")
  :config
  ;; Preview the current match
  (setf (alist-get #'affe-grep consult-config) nil))
#+end_src
** Magit

An inteface to Git. The mascot of Emacs packages.

#+begin_src emacs-lisp :tangle yes
(use-package magit
  :defer t)

(use-package magit-todos
  :after magit hl-todo
  :custom
  (magit-todos-keyword-suffix "\\(?:([^)]+)\\)?:?") ; make colon optional
  :config
  (magit-todos-mode))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package forge
  :after magit)
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package github-review
  :after magit forge
  :config
  (with-eval-after-load 'forge
    (transient-append-suffix 'forge-dispatch "c u"
      '("c r" "Review pull request" github-review-forge-pr-at-point))))

#+end_src

** Comint
#+begin_src emacs-lisp :tangle yes
(use-feature comint
  :preface
  (defun comint-clear-buffer ()
    (interactive)
    (let ((comint-buffer-maximum-size 0))
      (comint-truncate-buffer)))
  :general
  (general-define-key
   :keymaps 'comint-mode-map
   "C-l" 'comint-clear-buffer))
#+end_src
** Vterm

A fantastic terminal emulator for Emacs. Currently, there is no good way to use evil, and since I'm used to Emacs keybindings in other terminals anyways, we just set the default mode to evil.

#+begin_src emacs-lisp :tangle yes
(use-package vterm
  :ensure-system-package (vterm-ctrl . libvterm)
  :commands vterm vterm-mode
  :general
  (general-emap
    :keymaps 'vterm-mode-map
    "<escape>" 'vterm-send-escape)
  :custom
  (vterm-kill-buffer-on-exit t)
  :init
  (set-popup-rule! "\\*vterm\\*" :ttl nil :size 0.4 :select t))

(use-package vterm-toggle
  :commands vterm-toggle vterm-toggle-cd
  :bind
  (("C-`" . vterm-toggle))
  :custom
  (vterm-toggle-scope 'project))
#+end_src
** Dired
*** Dired
#+begin_src emacs-lisp :tangle yes
(use-feature dired
  :commands dired-jump
  :general
  (general-nmap :keymaps 'dired-mode-map
    "=" 'my--diff-files)
  (:keymaps 'dired-mode-map
            "C-c C-p" 'wdired-change-to-wdired-mode)
  :config
  (setq dired-auto-revert-buffer t  ; don't prompt to revert; just do it
        dired-dwim-target t  ; suggest a target for moving/copying intelligently
        ;; Always copy/delete recursively
        dired-recursive-copies  'always
        dired-recursive-deletes 'top
        dired-clean-confirm-killing-deleted-buffers nil) ;; don't ask just do

  ;; Show directories before files + default -al
  (setq dired-listing-switches "-lAX --group-directories-first")

  ;; Show contents of .desc file in minibuffer
  (defun show-folder-description ()
    (interactive)
    (if (file-exists-p "./.desc")
        (let ((description
               (with-temp-buffer
                 (insert-file-contents "./.desc")
                 (buffer-string))))
          (message description))))

  (add-hook 'dired-after-readin-hook #'show-folder-description)

  (add-hook 'dired-mode-hook #'dired-hide-details-mode)

  (defun my--diff-files ()
    (interactive)
    (let ((files (dired-get-marked-files)))
      (if (<= (length files) 2)
          (let ((file1 (car files))
                (file2 (if (cdr files)
                           (cadr files)
                         (read-file-name
                          "File: "
                          (dired-dwim-target-directory)))))
            (if (file-newer-than-file-p file1 file2)
                (diff file2 file1)
              (diff file1 file2)))
        (error "Cannot diff more thatn 2 files"))))

  (defun my--dired-do-command (command)
    "Run COMMAND on marked files. Any files not already open will be opened.
After this command has been run, any buffers it's modified will remain
open and unsaved."
    (interactive "CRun on marked files M-x ")
    (save-window-excursion
      (mapc (lambda (filename)
              (find-file filename)
              (call-interactively command))
            (dired-get-marked-files)))))


(defun my--copy-file-to-clipboard (&rest @fnames)
  "Copy buffer/dired selection in the linux clipboard as URIs.
ALso accepts file-name strings as a paramater"
  (interactive)
  (let* (($file-list (cond (@fnames @fnames)
                           ((string-equal major-mode "dired-mode") (dired-get-marked-files))
                           ((buffer-file-name) (list (buffer-file-name)))
                           (t (user-error "Nothing selected!"))))
         (file-uri-list (cl-loop for file in $file-list collect (concat "file://" file)))
         (process-connection-type nil)
         (proc (start-process "xclip" nil "xclip" "-i" "-selection" "clipboard" "-t" "text/uri-list")))
    (process-send-string proc (mapconcat 'identity file-uri-list "\n"))
    (process-send-eof proc)))
#+end_src
*** Dired-x

Adds additional functionality on top of dired.

#+begin_src emacs-lisp :tangle yes
(use-feature dired-x
  :hook (dired-mode . dired-omit-mode)
  :general
  (general-define-key
   :states 'normal
   :keymaps 'dired-mode-map
   ")" 'dired-omit-mode)
  :config
  (setq dired-omit-verbose nil)

  (setq dired-omit-files "^\\.")

  ;; Set the default application when using ! or & on files.
  ;; Taken from doom emacs
  (setq dired-guess-shell-alist-user
	`(("\\.\\(?:docx\\|pdf\\|djvu\\|eps\\)\\'" "xdg-open")
	  ("\\.\\(?:jpe?g\\|png\\|gif\\|xpm\\)\\'" "xdg-open")
	  ("\\.\\(?:xcf\\)\\'" "xdg-open")
	  ("\\.csv\\'" "xdg-open")
	  ("\\.tex\\'" "xdg-open")
	  ("\\.\\(?:mp4\\|mkv\\|avi\\|flv\\|rm\\|rmvb\\|ogv\\)\\(?:\\.part\\)?\\'" "xdg-open")
	  ("\\.\\(?:mp3\\|flac\\)\\'" "xdg-open")
	  ("\\.html?\\'" "xdg-open")
	  ("\\.md\\'" "xdg-open"))))
#+end_src

*** Peep-Dired

#+begin_src emacs-lisp :tangle yes
(use-package peep-dired
  :general
  (general-nmap
    :keymaps 'dired-mode-map
    "M-RET" 'peep-dired)
  (general-nmap
    :keymaps 'peep-dired-mode-map
    "j" 'peep-dired-next-file
    "k" 'peep-dired-prev-file
    "C-n" 'peep-dired-next-file
    "C-p" 'peep-dired-prev-file
    "M-n" 'peep-dired-scroll-page-down
    "M-p" 'peep-dired-scroll-page-up
    "q" 'peep-dired)
  :config
  (add-hook 'peep-dired-hook 'evil-normalize-keymaps)
  :custom
  (peep-dired-cleanup-eagerly nil) ; breaks the mode if enabled!
  (peep-dired-ignored-extensions '("mkv mp4")))
#+end_src
*** Dired-Single

#+begin_src emacs-lisp :tangle yes
(use-package dired-single
  :disabled t
  :after dired
  :config
  (define-key dired-mode-map [remap dired-find-file]
    'dired-single-buffer)
  (define-key dired-mode-map [remap dired-mouse-find-file-other-window]
    'dired-single-buffer-mouse)
  (define-key dired-mode-map [remap dired-up-directory]
    'dired-single-up-directory))
#+end_src
*** Dired-Subtree

#+begin_src emacs-lisp :tangle yes
(use-package dired-subtree
  :after dired)
#+end_src
*** Dired-Narrow

#+begin_src emacs-lisp :tangle yes
(use-package dired-narrow
  :after dired
  :general
  (general-nmap
    :keymaps 'dired-mode-map
    "/" 'dired-narrow))
#+end_src
*** Trashed
#+begin_src emacs-lisp :tangle yes
(use-package trashed
  :commands trashed)
#+end_src
** Recentf

Keeps a list of recently opened files.

#+begin_src emacs-lisp :tangle yes
(use-feature recentf
  :commands projectile-recentf
  :config
  (setq recentf-save-file (concat emacs-cache-dir "recentf"))
  (setq recentf-max-menu-item 300)
  (setq recentf-max-saved-item 300)
  (setq recentf-exclude
	'("recentf" ;; remove the recentf load file
	  ".*?autoloads.el$"
	  ".gitignore" ;; ignore `.gitignore' files in projects
	  "/tmp/" ;; ignore temporary files
	  "^/\\(?:ssh\\|su\\|sudo\\)?:" ;; ignore tramp/ssh files
	  ))
  (recentf-mode +1))
#+end_src

** NeoTree
Displays the folder tree
#+begin_src emacs-lisp :tangle yes
(use-package neotree
  :general
  (leader-key
    "ft" 'neotree)
  :init
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))
#+end_src

* Text & Organization
** Org-mode
*** Configuration
**** Base
#+begin_src emacs-lisp :tangle yes
  (use-package org
    :hook
    (org-mode . (lambda ()
                  (visual-line-mode)
                  (setq paragraph-start "\\|[  ]*$"
                        paragraph-separate "[  ]*$")))
    
    (org-babel-after-execute . org-redisplay-inline-images)
    :init
    ;; Org knows how to handle its own buffers
    (set-popup-rule! "\\*Org" :ignore t)
    (setq org-directory org-dir
          org-use-fast-todo-selection t                                     ; allow changing to any todo state from a menu
          org-enforce-todo-dependencies t                                   ; block setting task to DONE if there are incomplete subtasks
          org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id ; use unique ID's for links
          org-id-locations-file (concat org-dir ".orgids")
          org-clone-delete-id t
          org-log-done 'time
          org-catch-invisible-edits 'show
          org-confirm-babel-evaluate nil                                    ; do not ask for confirmation
          org-return-follows-link t
          org-startup-indented t                                            ; indent each level of heading
          org-hide-emphasis-markers t                                       ; hide the markers for italics and bold
          org-pretty-entities t                                             ; show entities as UTF8 characters
          org-image-actual-width 600
          org-startup-with-inline-images t
          org-export-with-smart-quotes t)

    :custom-face
    (org-default ((t (:family "Pragmata Pro" :height 1.0)))) ; Alternatively, Office Code Pro is second best
    (org-document-title ((t (:family "Pragmata Pro" :weight bold :height 2.0))))
    (org-document-info ((t (:family "Pragmata Pro"))))
    (org-done ((t (:strike-through t :weight bold))))
    (org-table-header ((t (:weight bold))))
    (org-headline-done ((t (:strike-through t))))
    (org-level-1 ((t (:height 1.2))))
    (org-level-2 ((t (:height 1.1))))
    (org-level-3 ((t (:height 1.1))))
    (org-link ((t (:underline t))))
    ;; FIXME Does not work at startup
    (org-block-end-line ((t (:inherit org-block-begin-line))))
    :config

    ;; Scrolling of inline images in org is a terrible experience, so we
    ;; allow them to be toggled individually with tab and C-c C-c. Alternatively,
    ;; https://github.com/casouri/lunarymacs/blob/master/site-lisp/iscroll.el
    ;; is a promising attempt to fix scrolling itself
    (defun org-toggle-inline-images-at-point ()
      (interactive)
      (when-let* ((link-region (org-in-regexp org-link-bracket-re 1)))
        (let ((org-inline-image-overlays-old org-inline-image-overlays))
          (save-restriction
            (narrow-to-region (car link-region) (cdr link-region))
            (if (-intersection (overlays-at (point)) org-inline-image-overlays)
                (mapc (lambda (ov)
                        (when (member ov org-inline-image-overlays)
                          (delete-overlay ov)
                          (setq org-inline-image-overlays (delete ov org-inline-image-overlays))))
                      (overlays-at (point)))
              (org-display-inline-images 'include-linked 'refresh))
            )
          (unless (equal org-inline-image-overlays org-inline-image-overlays-old) t)) ;; if overlays did not change, the link is not inline image
        ))

    (add-hook 'org-tab-first-hook #'org-toggle-inline-images-at-point)
    (add-hook 'org-ctrl-c-ctrl-c-hook #'org-toggle-inline-images-at-point)

    ;; What's more, when using ipython etc. it is often hard to read
    ;; figure text since the background colour is dark.
    (defun create-image-with-background-color (args)
      "Specify background color of Org-mode inline image through modify `ARGS'."
      (if (eq major-mode 'org-mode)
        (let* ((file (car args))
               (type (cadr args))
               (data-p (caddr args))
               (props (cdddr args)))
          ;; get this return result style from `create-image'
          (append (list file type data-p)
                  (list :background "white")
                  props))
        args))
    (advice-add 'create-image :filter-args #'create-image-with-background-color))
#+end_src

**** Todo keywords

#+begin_src emacs-lisp :tangle yes
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
              (sequence "SOMEDAY(s)" "WAITING(w)" "HOLD(h)" "|" "CANCELLED(c)")))
      org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
              ("WAITING" ("WAITING" . t))
              ("HOLD" ("WAITING") ("HOLD" . t))
              (done ("WAITING") ("HOLD"))
              ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
              ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
              ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
#+end_src
**** Emphasis

Replace underline with highlight
#+begin_src emacs-lisp :tangle yes
(let* ((bg-dark (eq (frame-parameter nil 'background-mode) 'dark))
       (highlight-color (if bg-dark "#585858" "#fffbc2")))
  (setq org-emphasis-alist
        `(("*" bold)
          ("/" italic)
          ("_" (:background ,highlight-color))
          ("=" org-verbatim verbatim)
          ("~" org-code verbatim)
          ("+" (:strike-through t)))))
#+end_src

(disabled) Custom highlight face. From [[https://emacs.stackexchange.com/questions/38216/custom-faces-in-org-9-0]]. Here is possibly a better implementation: https://kitchingroup.cheme.cmu.edu/blog/2016/11/10/Persistent-highlighting-in-Emacs/

#+begin_src emacs-lisp :tangle no
;;; Create highlighter face for marking up text in org-mode
(defface font-lock-highlight-face
  '((t (:inherit org-default :background "#585858")))
  "Face for highlighting text")
(defvar font-lock-highlight-face 'font-lock-highlight-face)

;;; Add keywords
(defun add-highlight-keywords()
  "adds custom keywords for highlighting text in org-mode."
  (font-lock-add-keywords nil
                          '(("\\(!\\)\\([^[:space:]][^\n\r\t]+[^[:space:]]\\)\\(!\\)" . 'font-lock-highlight-face ))))
(add-hook 'org-mode-hook 'add-highlight-keywords)
#+end_src

**** Pretty-symbols
#+begin_src emacs-lisp :tangle yes
(add-hook 'org-mode-hook (lambda ()
			   (push '("#+title: "        . "" ) prettify-symbols-alist)
			   (push '("#+author: "       . "" ) prettify-symbols-alist)
			   (push '("#+begin_src"      . "λ") prettify-symbols-alist)
			   (push '("#+end_src"        . "…") prettify-symbols-alist)
			   (push '("#+results:"       . "→") prettify-symbols-alist)
			   (push '(":results:"        . "⋰") prettify-symbols-alist)
			   (push '("#+name:"          . "-") prettify-symbols-alist)
			   (push '("#+begin_example"  . "~") prettify-symbols-alist)
			   (push '("#+begin_example"  . "~") prettify-symbols-alist)
			   (push '("#+end_example"    . "~") prettify-symbols-alist)
			   (push '("#+end_example"    . "~") prettify-symbols-alist)
			   (push '("#+DOWNLOADED:"    . "→") prettify-symbols-alist)
			   (push '("#+begin_verbatim" . "") prettify-symbols-alist)
			   (push '("#+end_verbatim"   . "") prettify-symbols-alist)
			   (push '("#+begin_verse"    . "") prettify-symbols-alist)
			   (push '("#+end_verse"      . "") prettify-symbols-alist)
			   (push '("#+begin_quote"    . "«") prettify-symbols-alist)
			   (push '("#+end_quote"      . "»") prettify-symbols-alist)
			   (push '("#+tblfm:"         . "∫") prettify-symbols-alist)
			   (push '("[X]"              . (?\[ (Br . Bl) ?✓ (Br . Bl) ?\])) prettify-symbols-alist)
			   (push '("\\\\"             . "↩") prettify-symbols-alist)
			   (prettify-symbols-mode)))
#+end_src
**** Capture

Set up capture templates. The backquoted list allows me to selectively evaluate parts of the list with a , (in this case the concat statement).

#+begin_src emacs-lisp :tangle yes
(setq org-capture-templates
      `(("t" "Todo" entry (file+headline ,(concat org-dir "refile.org") "Refile")
         "* TODO %?")
        ("p" "Project" entry (file+headline ,(concat org-dir "tasks.org") "Projects")
         "* %?")
        ("n" "Next" entry (file+headline ,(concat org-dir "refile.org") "Refile") 
         "* NEXT %? \n:PROPERTIES:\n:TRIGGER: next-sibling todo!(\"NEXT\") chain!(\"TRIGGER\") deadline!(cp)\n:END:\n")
        ("m" "mail" entry (file+olp ,(concat org-dir "refile.org") "Refile")
         "* TODO %? Link: %a")

        ("l" "Protocol" entry (file+headline ,(concat org-dir "refile.org") "Refile")
         "* TODO %? [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE")	
        ("L" "Protocol Link" entry (file+headline ,(concat org-dir "refile.org") "Refile")
         "* TODO %? [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\n")))

;; Allow system-wide org-capture shortcut. Adapted from https://www.reddit.com/r/emacs/comments/74gkeq/system_wide_org_capture/

(defadvice org-switch-to-buffer-other-window
    (after supress-window-splitting activate)
  "Delete the extra window if we're in a capture frame"
  (if (equal "capture" (frame-parameter nil 'name))
      (delete-other-windows)))

(defadvice org-capture-finalize
    (after delete-capture-frame activate)
  "Advise capture-finalize to close the frame"
  (when (and (equal "capture" (frame-parameter nil 'name))
             (not (eq this-command 'org-capture-refile)))
    (delete-frame)))

(defadvice org-capture-refile
    (after delete-capture-frame activate)
  "Advise org-refile to close the frame"
  (when (equal "capture" (frame-parameter nil 'name))
    (delete-frame)))

(defun my--activate-capture-frame ()
  "run org-capture in capture frame"
  (select-frame-by-name "capture")
  (switch-to-buffer (get-buffer-create "*scratch*"))
  (org-capture))

;; System-wide org-agenda
(defadvice org-agenda-quit
    (after delete-capture-frame activate)
  "Advise capture-finalize to close the frame"
  (when (equal "agenda" (frame-parameter nil 'name))
    (delete-frame)))
#+end_src

**** Refile configuration

#+begin_src emacs-lisp :tangle yes
(use-feature org-refile
  :after org
  :init
  (setq org-refile-targets (quote ((nil :maxlevel . 3)
                                   (org-agenda-files :maxlevel . 3))))
  (setq org-refile-use-outline-path t)
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-allow-creating-parent-nodes (quote confirm))
  (setq org-indirect-buffer-display 'current-window)
  :config
  (defun bh/verify-refile-target ()
    "Exclude todo keywords with a done state from refile targets"
    (not (member (nth 2 (org-heading-components)) org-done-keywords)))

  (setq org-refile-target-verify-function 'bh/verify-refile-target)

  ;; FIXME apply: Wrong number of arguments: (0 . 0), 3
  (advice-add 'org-refile :after 'org-save-all-org-buffers))
#+end_src

**** Agenda
***** Settings

#+begin_src emacs-lisp :tangle yes
(use-feature org-agenda
  :after org
  :commands org-agenda
  :hook (org-agenda-mode . (lambda ()
                             ;; (org-agenda-entry-text-mode)
                             (hide-mode-line-mode)))
  :custom
  (org-agenda-remove-tags t)
  (org-agenda-breadcrumbs-separator " ❯ ")
  (org-agenda-format-date "")
  (org-habit-graph-column 90)
  :custom-face
  ;; Distinguish scheduled items with overdue items
  (org-scheduled-today ((t (:foreground nil))))
  :config
  (setq org-deadline-warning-days 7)
  (setq org-agenda-dim-blocked-tasks nil)
  ;; (setq org-agenda-compact-blocks t)
  (setq org-agenda-block-separator nil)
  (setq org-agenda-entry-text-maxlines 1)

  ;; Use current window for agenda buffer
  (setq org-agenda-window-setup 'only-window)

  ;; Use all org files in org-dir
  (setq org-agenda-files (list org-dir))
  (setq org-agenda-skip-unavailable-files t)

  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-skip-deadline-if-done t)

  ;; align tags to right side
  (setq org-agenda-tags-column -100)

  ;; Performance
  ;; https://orgmode.org/org.html#Speeding-Up-Your-Agendas
  (setq org-agenda-inhibit-startup t)
  (setq org-agenda-skip-unavailable-files t)

  
  (setq org-agenda-span 'day)
  (setq org-agenda-custom-commands
        '(("g" "Get Things Done (GTD)"
           ((agenda ""
                    ((org-agenda-skip-function
                      '(org-agenda-skip-entry-if 'deadline))
                     (org-deadline-warning-days 0)
                     (org-agenda-overriding-header "\nAGENDA\n")))
            (todo "NEXT"
                  ((org-agenda-skip-function
                    '(org-agenda-skip-entry-if 'deadline))
                   (org-agenda-prefix-format " %i %-12:c [%e] ")
                   (org-agenda-overriding-header "\nTASKS\n")))
            (agenda nil
                    ((org-agenda-entry-types '(:deadline))
                     (org-agenda-format-date "")
                     (org-deadline-warning-days 7)
                     ;; (org-agenda-skip-function
                     ;;  '(org-agenda-skip-entry-if 'notregexp "\\* NEXT"))
                     (org-agenda-overriding-header "\nDEADLINES\n")))
            (tags-todo "refile"
                       ((org-agenda-prefix-format "  %?-12t% s")
                        (org-agenda-overriding-header "\nREFILE\n")))
            (tags "CLOSED>=\"<today>\""
                  ((org-agenda-overriding-header "\nCOMPLETED TODAY\n")))))))

  (defun my--org-agenda-process-inbox-item ()
    "Process a single item in the org-agenda."
    (interactive)
    (org-with-wide-buffer
     ;; (org-agenda-schedule)
     ;; (org-agenda-deadline)
     ;; (org-agenda-set-tags)
     (org-agenda-priority)
     ;; (call-interactively 'my-org-agenda-set-effort)
     (org-agenda-refile nil nil t)))

  (general-mmap
    :keymaps 'org-agenda-mode-map
    "p" 'my--org-agenda-process-inbox-item)

  (defun my--check-sync-conflicts ()
    (when (directory-files org-dir nil "conflict")
      (message "Warning: Sync conflicts")))

  (add-hook 'org-agenda-finalize-hook #'my--check-sync-conflicts)

  ;; Save all org buffers before exiting agenda
  (advice-add 'org-agenda-quit :before 'org-save-all-org-buffers))
#+end_src
**** org-clock
#+begin_src emacs-lisp :tangle yes
(use-feature org-clock
  :after org
  :config
  (setq org-clock-out-remove-zero-time-clocks t))
#+end_src
**** org-modules
#+begin_src emacs-lisp :tangle yes
(use-feature org-install
  :after org
  :custom
  (org-modules '(org-habit))
  :config
  (org-load-modules-maybe t))
#+end_src

***** Habits

#+begin_src emacs-lisp :tangle yes
(use-feature org-habit
  :after org
  :config
  (setq org-log-repeat 'time
        org-log-into-drawer t))
#+end_src
**** SRC blocks
#+begin_src emacs-lisp :tangle yes
(use-feature ob
  :after org
  :general
  (leader-key
    :map org-mode-map
    "o=" 'my--org-indent-src-block)

  :custom
  (org-src-tab-acts-natively t)
  (org-edit-src-content-indentation 0)
  (org-src-preserve-indentation t)
  (org-src-window-setup 'current-window)

  ;; See https://org-babel.readthedocs.io/en/latest/header-args/
  (org-babel-default-header-args '((:session . "none")
                                   (:results . "replace")
                                   (:exports . "both")
                                   (:cache . "no")
                                   (:noweb . "no")
                                   (:hlines . "no")
                                   (:tangle . "no")))
  :config

  ;; Indents an src block without having to enter it
  (defun my--org-indent-src-block ()
    (interactive)
    (org-edit-special)
    (indent-region (point-min) (point-max))
    (org-edit-src-exit)))
#+end_src

We do not run ~org-babel-do-load-languages~ because it eagerly loads packages. See https://blog.d46.us/advanced-emacs-startup/.

#+begin_src emacs-lisp :tangle yes
(use-feature ob-python
  :commands (org-babel-execute:python))

;; See https://jordiinglada.net/wp/2015/03/25/scripting-in-c-2/
(use-feature ob-C
  :commands (org-edit-special org-babel-execute:C++ org-babel-execute:C))

(use-feature ob-matlab
  ;; :commands (org-babel-execute:matlab)
  :custom
  (org-babel-default-header-args:matlab '((:session . "*MATLAB*"))))

(use-feature ob-java
  :commands (org-babel-execute:java))
#+end_src
**** Circular Bullets
Make bullets circular
#+begin_src emacs-lisp :tangle yes
(font-lock-add-keywords 'org-mode
                        '(("^ *\\([-]\\) "
                           0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•")))
                          ("\\(->\\)"
                           0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "→")))))
#+end_src

**** Autosort
#+begin_src emacs-lisp :tangle yes
(defun my--org-entry-has-subentries ()
  "Any entry with subheadings"
  (let ((subtree-end (save-excursion (org-end-of-subtree t))))
    (save-excursion
      (org-back-to-heading)
      (forward-line 1)
      (when (< (point) subtree-end)
        (re-search-forward "^\*+ " subtree-end t)))))

(defun my--org-entry-sort-by-property nil
  (let ((property (org-entry-get (point) "SORT" 'INHERIT)))
    (when (and (not (seq-empty-p property))
               (my--org-entry-has-subentries))
      (funcall #'org-sort-entries nil (string-to-char property) nil nil nil)))
  (let ((property_second (org-entry-get (point) "SORT_AFTER" 'INHERIT)))
    (when (and (not (seq-empty-p property_second))
               (my--org-entry-has-subentries))
      (funcall #'org-sort-entries nil (string-to-char property_second) nil nil nil))))

(defun my--org-buffer-sort-by-property (&optional MATCH)
  (interactive)
  (org-map-entries #'my--org-entry-sort-by-property MATCH 'file)
  (org-set-startup-visibility))

                                        ;(add-hook 'org-mode-hook #'my--org-buffer-sort-by-property)
#+end_src
*** Packages
**** EVIL-Org
#+begin_src emacs-lisp :tangle yes
(use-package evil-org
  :after org
  :custom
  ;; Defines a bullet as the beginning of a sentence. Note that this regex
  ;; removes some of the complexity of the original definition, and might cause
  ;; problems.
  (sentence-end "\\(^\s*?- \\)\\|\\.\s*")
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda ()
              (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src
**** Good-scroll
Better alternative to pixel-scroll-mode. Makes scrolling over images in org mode tolerable. Another promising alternative is [[https://github.com/casouri/iscroll]].

#+begin_src emacs-lisp :tangle yes
(use-package good-scroll
  :disabled t
  :hook (org-mode . good-scroll-mode))
#+end_src
**** org-Bullets
Make the header bullets look prettier
#+begin_src emacs-lisp :tangle yes
(use-package org-superstar
  :hook (org-mode . org-superstar-mode)
  :custom
  ;; superstar hides leading stars itself
  (org-hide-leading-stars nil)
  (org-indent-mode-turns-on-hiding stars)

  (org-superstar-leading-bullet ?\s)
  (org-superstar-headline-bullets-list '("◉" "◎" "⚫" "○" "►" "◇"))
  (org-superstar-item-bullet-alist '((?- . ?•)
                                     (?* . ?*)
                                     (?+ . ?+)))
  (org-ellipsis " ↴ "))
#+end_src
**** org-calfw
#+begin_src emacs-lisp :tangle yes
(use-package calfw
  :commands cfw:open-calendar-buffer
  :config
  ;; better frame. Taken from doom-emacs
  (setq cfw:face-item-separator-color nil
        cfw:render-line-breaker 'cfw:render-line-breaker-none
        cfw:fchar-junction ?╋
        cfw:fchar-vertical-line ?┃
        cfw:fchar-horizontal-line ?━
        cfw:fchar-left-junction ?┣
        cfw:fchar-right-junction ?┫
        cfw:fchar-top-junction ?┯
        cfw:fchar-top-left-corner ?┏
        cfw:fchar-top-right-corner ?┓))

(use-package calfw-org
  :general (leader-key "ot" 'cfw:open-org-calendar)
  :commands (cfw:open-org-calendar
             cfw:org-create-source
             cfw:open-org-calendar-withkevin
             my-open-calendar))
#+end_src

**** org-checklist

Allows for resetting of checkboxes when item is marked DONE.

#+begin_src emacs-lisp :tangle yes
(use-feature org-checklist
  :disabled t
  :after org)
#+end_src
**** org-download
Automatically insert images via drag-and-drop

#+begin_src emacs-lisp :tangle yes
(use-package org-download
  :after org
  :config
  (defun my--org-download-annotate-function (link)
    "Do not annotate link"
    "\n")

  (setq org-download-annotate-function #'my--org-download-annotate-function)
  (setq org-download-screenshot-method "maim -u -s %s")


  (defun my-org-download-method (link)
    "This is a helper function for org-download.
It creates a folder in the root directory named after the
org filename (sans extension) and puts all images from that file in there.
Inspired by https://github.com/daviderestivo/emacs-config/blob/6086a7013020e19c0bc532770e9533b4fc549438/init.el#L701"
    (let ((filename
	   (file-name-nondirectory
	    (car (url-path-and-query
		  (url-generic-parse-url link)))))
	  ;; Create folder name with current buffer name, and place in root dir
	  (dirname (concat "./img/"
			   (replace-regexp-in-string " " "_" (downcase (file-name-base buffer-file-name))))))

      ;; Add timestamp to filename
      (setq filename-with-timestamp (format "%s%s.%s"
					    (file-name-sans-extension filename)
					    (format-time-string org-download-timestamp)
					    (file-name-extension filename)))
      ;; Create folder if necessary
      (unless (file-exists-p dirname)
	(make-directory dirname))
      (expand-file-name filename-with-timestamp dirname)))
  (setq org-download-method 'my-org-download-method))
#+end_src
**** org-edna
Advanced dependency management

#+begin_src emacs-lisp :tangle yes
(use-package org-edna
  :after org
  :config
  (org-edna-mode))
#+end_src
**** org-journal
#+begin_src emacs-lisp :tangle yes
(use-package org-journal
  :after org
  :init
  (setq org-journal-cache-dir emacs-cache-dir
        org-journal-date-prefix "#+title: "
        org-journal-dir journal-dir
        org-journal-file-format "%Y-%m-%d.org"
        org-journal-date-format "%A %Y-%m-%d"
        org-journal-time-format "" ))
#+end_src
**** org-oxclip
Let you copy formatted org-mode content to the clipboard. Requires the package =xclip= to run.

#+begin_src emacs-lisp :tangle yes
(use-package htmlize
  :after org)

(use-package ox-clip
  :general
  (leader-key
    "oy" 'ox-clip-formatted-copy)
  :after org)
#+end_src
**** org-pomodoro
#+begin_src emacs-lisp :tangle yes
(use-package org-pomodoro
  :commands org-pomodoro
  :general
  (leader-key
    "op" 'org-pomodoro)
  (general-nmap
    :keymaps 'org-agenda-mode-map
    "P" 'org-pomodoro)

  :config
  ;; prefer PulseAudio to ALSA
  (setq org-pomodoro-audio-player (or (executable-find "paplay") org-pomodoro-audio-player)))
#+end_src
**** org-Protocol

Allows for external applications to trigger custom actions without external dependencies

#+begin_src emacs-lisp :tangle yes
(use-feature org-protocol
  :after org
  :config
  (defun transform-square-brackets-to-round-ones(string-to-transform)
    "Transforms [ into ( and ] into ), other chars left unchanged."
    (concat 
     (mapcar #'(lambda (c) (if (equal c ?\[) ?\( (if (equal c ?\]) ?\) c))) string-to-transform))))
#+end_src

**** org-transclusion
#+begin_src emacs-lisp :tangle yes
(use-package org-transclusion
  :disabled t
  :straight (:host github :branch "main" :repo "nobiot/org-transclusion")
  :hook (org-mode . org-transclusion-mode)
  :custom
  (org-transclusion-activate-persistent-message nil)
  (org-transclusion-include-first-section t))
#+end_src

**** org-appear

#+begin_src emacs-lisp :tangle yes
(use-package org-appear
  :hook (org-mode . org-appear-mode))
#+end_src
**** ox-hugo
#+begin_src emacs-lisp :tangle yes
(use-package ox-hugo
  :ensure-system-package hugo
  :after ox org
  :init
  (setq org-hugo-set-lastmod t
#+end_src
**** ox-Pandoc
#+begin_src emacs-lisp :tangle yes
(use-package ox-pandoc
  :after ox org
  :ensure-system-package pandoc
  :init
  (setq org-pandoc-menu-entry
        '(
          (?l "to latex-pdf and open." org-pandoc-export-to-latex-pdf-and-open)
          (?L "to latex-pdf." org-pandoc-export-to-latex-pdf)
          (?4 "to html5 and open." org-pandoc-export-to-html5-and-open)
          (?$ "as html5." org-pandoc-export-as-html5))))
#+end_src
*** Zettelkasten
**** org-roam
#+begin_src emacs-lisp :tangle yes
(use-package org-roam
  :straight (:host github :repo "org-roam/org-roam" :branch "v2")
  :after org
  :commands
  (org-roam-buffer
   org-roam-setup
   org-roam-capture
   org-roam-node-find)
  :general
  (leader-key
    "or" 'org-roam-buffer-toggle
    "oi" 'org-roam-node-insert
    "og" 'org-roam-graph
    "of" 'org-roam-node-find)
  :init
  (setq org-roam-v2-ack t)
  :custom
  ;; (org-roam-verbose nil)
  (org-roam-directory brain-dir)
  ;; (org-roam-tag-sources '(prop last-directory))
  (org-roam-capture-templates
   '(("d" "default" plain
      "%?"
      :if-new (file+head "${slug}.org"
                         "#+setupfile: ../hugo_setup.org
,#+title: ${title}\n")
      :immediate-finish t
      :unnarowed t)
     ("b" "book" plain
      "%?"
      :if-new (file+head "${slug}.org"
                         "#+setupfile: ../../hugo_setup.org
,#+filetags: books
,#+title: ${title}

- author ::
- tags ::

,* The Book in 3 Sentences

,* Impressions

,* How the Book Changed Me

,* Top 3 Highlights")
      :immediate-finish t
      :unnarowed t)))
  (org-roam-capture-ref-templates
   '(("r" "ref" plain
      "%?"
      :if-new (file+head "${slug}.org"
                         "#+title: ${title}\n")
      :unnarrowed t)))
  :config
  (org-roam-setup)
  (set-popup-rule! "\\org-roam" :side 'right :select t))
#+end_src
**** org-roam-server

Visualize the Zettelkasten.

#+begin_src emacs-lisp :tangle yes
(use-package org-roam-ui
  :after org-roam
  :straight
  (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
  :general
  ;; This is annoyingly verbose, but I have not found a better way.
  (leader-key
    "og" (lambda () (interactive)(browse-url (concat "localhost:" (number-to-string org-roam-ui-port)))))
  :custom
  (org-roam-ui-sync-theme t)
  (org-roam-ui-follow t)
  (org-roam-ui-update-on-save t)
  (org-roam-ui-open-on-start nil)
  :config
  (org-roam-ui-mode 1))
#+end_src

**** org-roam-bibtex
#+begin_src emacs-lisp :tangle yes
(use-package org-roam-bibtex
  :after org-roam
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :config
  (setq org-roam-bibtex-preformat-keywords
        '("=key=" "title" "url" "file" "author-or-editor" "keywords"))
  (setq orb-templates
        '(("r" "ref" plain (function org-roam-capture--get-point)
           ""
           :file-name "papers/%(org-roam--title-to-slug \"${title}\")"
           :head "#+TITLE: ${title}\n#+ROAM_KEY: ${ref}

- tags ::
- keywords :: ${keywords}
- author :: ${author-or-editor}"
           :unnarrowed t))))
#+end_src
**** ivy-bibtex

#+begin_src emacs-lisp :tangle yes
(use-package bibtex-completion
  :config
  (setq bibtex-completion-notes-path brain-dir
        bibtex-completion-bibliography "~/Documents/zotero-bib.bib"
        bibtex-completion-pdf-field "file"
        bibtex-completion-notes-template-multiple-files
        (concat
         "#+TITLE: ${title}\n"
         "#+ROAM_KEY: cite:${=key=}\n"
         "* TODO Notes\n"
         ":PROPERTIES:\n"
         ":Custom_ID: ${=key=}\n"
         ":NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n"
         ":AUTHOR: ${author-abbrev}\n"
         ":JOURNAL: ${journaltitle}\n"
         ":DATE: ${date}\n"
         ":YEAR: ${year}\n"
         ":DOI: ${doi}\n"
         ":URL: ${url}\n"
         ":END:\n\n")))


(use-package bibtex-actions
  :after embark
  :general
  (leader-key
    "ob" 'bibtex-actions-open)
  :config
  ;; Make the 'bibtex-actions' bindings available from `embark-act'.
  (add-to-list 'embark-keymap-alist '(bibtex . bibtex-actions-map)))
#+end_src
**** org-ref
#+begin_src emacs-lisp :tangle yes
(use-package org-ref
  :after org
  :init
  ;; must be called at init
  (setq org-ref-completion-library 'org-ref-ivy-cite)
  :config
  (setq org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex
	org-ref-default-bibliography (list (concat docs-dir "zotero-bib.bib"))
	org-ref-notes-directory brain-dir))
#+end_src

**** (disabled) org-ref-ox-hugo
#+begin_src emacs-lisp :tangle yes
(use-package org-ref-ox-hugo
  :disabled t
  :straight (:host github :repo "jethrokuan/org-ref-ox-hugo")
  :after org org-ref ox-hugo
  :config
  (add-to-list 'org-ref-formatted-citation-formats
               '("md"
                 ("article" . "${author}, *${title}*, ${journal}, *${volume}(${number})*, ${pages} (${year}). ${doi}")
                 ("inproceedings" . "${author}, *${title}*, In ${editor}, ${booktitle} (pp. ${pages}) (${year}). ${address}: ${publisher}.")
                 ("book" . "${author}, *${title}* (${year}), ${address}: ${publisher}.")
                 ("phdthesis" . "${author}, *${title}* (Doctoral dissertation) (${year}). ${school}, ${address}.")
                 ("inbook" . "${author}, *${title}*, In ${editor} (Eds.), ${booktitle} (pp. ${pages}) (${year}). ${address}: ${publisher}.")
                 ("incollection" . "${author}, *${title}*, In ${editor} (Eds.), ${booktitle} (pp. ${pages}) (${year}). ${address}: ${publisher}.")
                 ("proceedings" . "${editor} (Eds.), _${booktitle}_ (${year}). ${address}: ${publisher}.")
                 ("unpublished" . "${author}, *${title}* (${year}). Unpublished manuscript.")
                 ("misc" . "${author} (${year}). *${title}*. Retrieved from [${howpublished}](${howpublished}). ${note}.")
                 (nil . "${author}, *${title}* (${year})."))))
#+end_src
**** org-noter
#+begin_src emacs-lisp :tangle yes
(use-package org-noter
  :after ( org pdf-view)
  :config
  (setq
   ;; The WM can handle splits
   org-noter-notes-window-location 'other-frame
   ;; Please stop opening frames
   org-noter-always-create-frame nil
   ;; I want to see the whole file
   org-noter-hide-other nil
   ;; Everything is relative to the main notes file
   org-noter-notes-search-path (list (concat brain-dir "papers/"))))
#+end_src
*** Reviews

Daily review inspired by [[https://youtu.be/reazJx4INyM?t=77][Ali Abdaal]].

#+begin_src emacs-lisp :tangle yes
(defun my--daily-review ()
  (interactive)
  (let ((org-capture-templates `(("d" "Daily Review" entry (file (lambda () (concat org-dir "Reviews/daily/" (format-time-string "%Y-%m-%d") ".org")))
                                  (file ,(concat org-dir "Templates/daily-review.org"))))))
    (progn
      (org-capture nil "d")
      (org-capture-finalize t)
      (org-speed-move-safe 'outline-up-heading)
      (org-narrow-to-subtree))))

(defun my--visit-daily-review ()
  "Visit the file corresponding to today's daily review"
  (interactive)
  (find-file (concat org-dir "Reviews/daily/" (format-time-string "%Y-%m-%d") ".org")))

(defun my--weekly-review ()
  (interactive)
  (let ((org-capture-templates `(("w" "weekly review" entry (file+olp+datetree (lambda () (concat org-dir "Reviews/reviews_" (format-time-string "%Y") ".org")))
                                  (file ,(concat org-dir "Templates/weekly-review.org"))))))
    (progn
      (org-capture nil "w")
      (org-capture-finalize t)
      (org-speed-move-safe 'outline-up-heading)
      (org-narrow-to-subtree))))

(defun my--monthly-review ()
  (interactive)
  (let ((org-capture-templates `(("m" "Monthly Review" entry (file+olp+datetree (lambda () (concat org-dir "Reviews/reviews_" (format-time-string "%Y") ".org")))
                                  (file ,(concat org-dir "Templates/monthly-review.org"))))))
    (progn
      (org-capture nil "m")
      (org-capture-finalize t)
      (org-speed-move-safe 'outline-up-heading)
      (org-narrow-to-subtree))))
#+end_src
** LaTeX
#+begin_src emacs-lisp :tangle yes
(use-package latex
  :straight auctex
  :config
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (prettify-symbols-mode)))
  (add-hook 'LaTeX-mode-hook 'visual-line-mode)

  (setq TeX-save-query nil)
  (setq TeX-auto-save t)
  (setq Tex-parse-self t)
  (setq TeX-PDF-mode t)

  ;; Set up pdf viewer
  (setq TeX-view-program-list '(("Evince" "evince --page-index=%(outpage) %o")))
  (setq TeX-view-program-selection '((output-pdf "Evince")))
  ;; Method for enabling forward and inverse search 
  (setq TeX-source-correlate-method 'synctex)
  ;; inhibit the question to start a server process
  (setq TeX-source-correlate-start-server t))
#+end_src

*** CdLaTeX

#+begin_src emacs-lisp :tangle yes
(use-package cdlatex
  :after (:any latex org)
  :hook ((LaTeX-mode . cdlatex-mode)
	 (org-mode . org-cdlatex-mode))
  :config
  (add-to-list 'cdlatex-math-modify-alist
               '(66 "\\mathbb" nil t nil nil)))
#+end_src

*** RefTeX

Allow RefTeX to plug into AUCTeX

#+begin_src emacs-lisp :tangle yes
(use-package reftex
  :after latex
  :hook (LaTeX-mode . turn-on-reftex)
  :custom
  (reftex-plug-into-AUCTeX t)
  (reftex-extra-bindings t)
  (reftex-use-external-file-handlers t))
#+end_src

*** evil-tex
#+begin_src emacs-lisp :tangle yes
(use-package evil-tex
  :hook (LaTeX-mode . evil-tex-mode))
#+end_src

** Markdown
#+begin_src emacs-lisp :tangle yes
(use-package markdown-mode
  :general
  (general-nmap
    :keymaps 'markdown-mode-map
    :predicate '(markdown-link-p)
    "RET" 'markdown-follow-link-at-point)
  :init
  (setq-default markdown-hide-urls t)
  :custom
  (markdown-url-compose-char "…"))
#+end_src
** Writing
*** olivetti

#+begin_src emacs-lisp :tangle yes
(use-package olivetti
  :config
  (setq olivetti-body-width 80))

#+end_src

*** langtool
#+begin_src emacs-lisp :tangle yes
(use-package langtool
  :ensure-system-package languagetool
  :commands (langtool-check
             langtool-check-done
             langtool-show-message-at-point
             langtool-correct-buffer)
  :general
  (leader-key
    "llb" 'langtool-check-buffer
    "lld" 'langtool-check-done)
  :init
  (setq langtool-default-language "en-CA")
  :config
  (setq langtool-java-classpath "/usr/share/languagetool:/usr/share/java/languagetool/*"))
#+end_src

*** writegood

Checks for signs of bad writing.

#+begin_src emacs-lisp :tangle yes
(use-package writegood-mode
  :general
  (leader-key
    "lw" 'writegood-mode))
#+end_src

*** Focus
#+begin_src emacs-lisp :tangle yes
(use-package focus
  :custom
  (focus-mode-to-thing '((prog-mode . defun) (text-mode . paragraph))))
#+end_src

*** Writing Function

#+begin_src emacs-lisp :tangle yes
(defvar writemode 1 "Set default writing mode state.")
(defun writing-mode ()
  "Configure writing environment."
  (interactive)
  (cond
   ((= writemode 1)
    ;;(focus-mode t)
    (olivetti-mode t)
    (variable-pitch-mode 1) ;; All fonts with variable pitch.
    (text-scale-increase 0.5)
    (focus-mode 1)
    (setq-local writemode 2))
   ((= writemode 2)
    ;;(focus-mode -1)
    (olivetti-mode -1)
    (focus-mode 0)
    (variable-pitch-mode 0) ;; All fonts with variable pitch.
    (text-scale-decrease 0)
    (setq-local display-line-numbers 'relative)
    (setq-local writemode 1))))
#+end_src
*** Flyspell

#+begin_src emacs-lisp :tangle yes
;; find aspell and hunspell automatically
(use-package flyspell
  :hook (((org-mode markdown-mode TeX-mode rst-mode mu4e-compose-mode notmuch-message-mode git-commit-mode) . flyspell-mode)
         (prog-mode . flyspell-mode))
  :custom
  (flyspell-prog-text-faces '(font-lock-comment-face font-lock-doc-face))
  :config
  (setq ispell-program-name "aspell"
        ispell-dictionary "canadian"
        ispell-silently-savep t
        flyspell-issue-welcome-flag nil
        ;; Significantly speeds up flyspell, which would otherwise print
        ;; messages for every word when checking the entire buffer
        flyspell-issue-message-flag nil))
#+end_src
** PDF
#+begin_src emacs-lisp :tangle yes
(use-package pdf-tools
  ;; REVIEW waiting on politza/pdf-tools#588
  :mode ("\\.[pP][dD][fF]\\'" . pdf-view-mode)
  :magic ("%PDF" . pdf-view-mode)
  :config

  (setq pdf-view-display-size 'fit-page)

  ;; HiDPI support
  (setq pdf-view-use-scaling t
	pdf-view-use-imagemagick nil)

  ;; revert pdf automatically after latex compilation completes in auctex
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)

  ;; automatically annotate highlights
  (setq pdf-annot-activate-created-annotations t)

  ;; add history for PDF files
  (add-hook 'pdf-view-mode-hook #'pdf-history-minor-mode))

(use-feature pdf-view
  :after pdf-tools
  :config
  (setq pdf-view-display-size 'fit-page)

  ;; HiDPI support
  (setq pdf-view-use-scaling t
	pdf-view-use-imagemagick nil))
#+end_src
** (disabled) Math-preview

This is a very promising package, but it is not yet polished.

#+begin_src emacs-lisp :tangle yes
(use-package math-preview
  :disabled t
  :when (executable-find "math-preview")
  :straight (math-preview :type git
			  :host gitlab
			  :repo "matsievskiysv/math-preview"))
#+end_src
* Email
** Reading Email

Configuration adapted from Doom Emacs and https://github.com/rememberYou/.emacs.d/blob/master/config.org
#+begin_src emacs-lisp :tangle yes
(use-package mu4e
  :commands mu4e mu4e-compose-new
  :hook ((mu4e-compose-mode) . olivetti-mode)
  :general
  (leader-key
    "mm" 'mu4e
    "mc" 'mu4e-compose-new)
  :init
  (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")

  (setq mu4e-maildir "~/.mail")
  (setq mu4e-attachment-dir "~/Downloads")
  :config
  (setq mu4e-get-mail-command "mbsync -a")

  ;; Fixes duplicate UID errors
  (setq mu4e-change-filenames-when-moving t)

  (setq mu4e-compose-format-flowed t ; visual-line-mode + auto-fill upon sending
	fill-flowed-encode-column 998
	mu4e-view-show-addresses t
	mu4e-sent-messages-behavior 'sent
	mu4e-hide-index-messages t
  mu4e-headers-precise-alignment t
	;; try to show images
	mu4e-view-show-images t
	mu4e-view-image-max-width 800
	mu4e-compose-dont-reply-to-self t
	;; use helm/ivy
	mu4e-completing-read-function 'ivy-completing-read
        ;; Do not reply to self
        mu4e-compose-dont-reply-to-self t
	;; set user agent
	mail-user-agent 'mu4e-user-agent
	;; no need to ask
	mu4e-confirm-quit nil)

  ;; Folders
  (setq mu4e-sent-folder "/Sent"
	mu4e-drafts-folder "/Drafts"
	mu4e-trash-folder "/Trash"
	mu4e-refile-folder "/Archive"
	mu4e-compose-signature  "Alex Koen\nhttps://alexkoen.com")

  ;; Use fancy icons
  (setq mu4e-use-fancy-chars t
	mu4e-headers-draft-mark '("D" . "")
	mu4e-headers-flagged-mark '("F" . "")
	mu4e-headers-new-mark '("N" . "")
	mu4e-headers-passed-mark '("P" . "")
	mu4e-headers-replied-mark '("R" . "")
	mu4e-headers-seen-mark '("S" . "")
	mu4e-headers-trashed-mark '("T" . "")
	mu4e-headers-attach-mark '("a" . "")
	mu4e-headers-encrypted-mark '("x" . "")
	mu4e-headers-signed-mark '("s" . "")
	mu4e-headers-unread-mark '("u" . ""))

  ;; Auto update
  (setq mu4e-update-interval (* 15 60))
  (setq mu4e-index-update-in-background t)

  ;; Saved queries
  (setq mu4e-bookmarks
	'(( :name  "Unread messages"
	    :query "flag:unread AND NOT flag:trashed"
	    :key ?u)
	  ( :name "All in inbox"
	    :query "maildir:/Inbox OR maildir:/Inbox/*"
	    :key ?i)
	  ( :name "Messages with images"
	    :query "mime:image/*"
	    :key ?p)))

  (add-to-list 'org-capture-templates
	       `("m" "Mail" entry (file+olp ,(concat org-dir "refile.org") "Refile")
		 "* TODO %? Link: %a"))

  (define-key mu4e-headers-mode-map (kbd "C-c c") 'mu4e-org-store-and-capture)
  (define-key mu4e-view-mode-map    (kbd "C-c c") 'mu4e-org-store-and-capture)

  ;; Set from address based on address that message was sent to. See https://www.djcbsoftware.nl/code/mu/mu4e/Compose-hooks.html
  (defun my--set-from-address ()
    "Set the From address based on the To address of the original."
    (let ((msg mu4e-compose-parent-message)) ;; msg is shorter...
      (when msg
	(setq user-mail-address
	      (cond
	       ((mu4e-message-contact-field-matches msg :to "akoen@mailbox.org")
		"akoen@mailbox.org")
	       ((mu4e-message-contact-field-matches msg :to "jx7gq@mailbox.org")
		"jx7gq@mailbox.org")
	       (t "alex@koen.ca"))))))

  (add-hook 'mu4e-compose-pre-hook #'my--set-from-address)

  ;; Remove the +T flag from trash. This emulates the behaviour of GUI clients. Emails are otherwise deleted when moving to trash.
  (setf (alist-get 'trash mu4e-marks)
	(list :char '("d" . "▼")
	      :prompt "dtrash"
	      :dyn-target (lambda (target msg)
			    (mu4e-get-trash-folder msg))
	      :action (lambda (docid msg target)
			;; Here's the main difference to the regular trash mark,
			;; no +T before -N so the message is not marked as
			;; IMAP-deleted:
			(mu4e~proc-move docid (mu4e~mark-check-target target) "-N"))))

  ;; Html mails might be better rendered in a browser
  (add-to-list 'mu4e-view-actions '("View in browser" . mu4e-action-view-in-browser)))

#+end_src

** Sending Mail


Create ~/.authinfo.gpg
#+begin_src
machine imap.mailbox.com login alex@koen.ca password <password> port 993
machine smtp.mailbox.com login alex@koen.ca password <password> port 587
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-feature epa
  :custom
  (epa-pinentry-mode 'loopback)
  :config
  (epa-file-enable)
  (auth-source-forget-all-cached))

(use-feature sendmail
  :custom
  (send-mail-function 'sendmail-send-it)
  (sendmail-program (executable-find "msmtp"))
  :config
  (set-popup-rule! "sendmail errors"))

(use-feature message
  :custom
  (message-sendmail-envelope-from 'header)
  (message-send-mail-function 'sendmail-send-it)
  (message-signature "Alex Koen\nhttps://alexkoen.com")
  (message-kill-buffer-on-exit t)) ; close after sending)
#+end_src

#+end_src
* Development
** Tools
*** Diff
#+begin_src emacs-lisp :tangle yes
(use-feature diff
  :config
  (set-popup-rule! "\\*Diff\\*" :size 0.4 :select t))
#+end_src
*** Edebug
#+begin_src emacs-lisp :tangle yes
  (use-feature edebug
    :config
    (defun my--edebug-add-instrumentation (fun)
      "Interactively call edebug-instrument-function."
      (interactive "aFunction symbol: ")
      (edebug-instrument-function fun))

    ;; Highlight instrumented functions
    ;; REVIEW: The use of font-lock-debug-fontify breaks hl-todo and is
    ;; *not-recommended* according to the doc.


    (defface +instrumented-face
      '((((type graphic)) :box (:color "#c00" :line-width -1))
        (t :underline t :background "#800"))
      "Face used to mark code being debugged.")

    (defun +edebug-propertize-instrumented-function (func)
      ""
      (font-lock-add-keywords 'emacs-lisp-mode
                              `((,(regexp-quote (symbol-name func)) . '+instrumented-face)))
      (font-lock-debug-fontify))

    (defun +edebug-propertize-instrumented-function-remove (functions)
      ""
      (dolist (func functions)
        (font-lock-remove-keywords 'emacs-lisp-mode
                                   `((,(regexp-quote (symbol-name func)) . '+instrumented-face))))
      (font-lock-debug-fontify))

    (advice-add 'edebug-instrument-function :after '+edebug-propertize-instrumented-function)
    (advice-add 'edebug-remove-instrumentation :after '+edebug-propertize-instrumented-function-remove))
#+end_src
*** Eval

Framework, heavily inspired by Doom Emacs, for evaluating buffer code in major-mode specific "runner" functions.

#+begin_src emacs-lisp :tangle yes
(defvar +eval-runners
  '((emacs-lisp-mode . +eval-emacs-lisp))
  "Alist mapping major-modes to runner functions which evaluate buffer code.")

(defun +eval-emacs-lisp (beg end)
  "Runner for emacs-lisp."
  (eval (read (format "(progn %s)"
                      (buffer-substring-no-properties beg end)))))

(defun +eval/region (beg end)
  "Eval region with major-mode runner."
  (let ((runner (alist-get major-mode +eval-runners)))
    (if runner (funcall runner beg end)
      (message "No runner found for %s" major-mode))))

(evil-define-operator +eval:region (beg end)
  "Evaluate selection with current major-mode runner."
  :move-point nil
  (interactive "<r>")
  (+eval/region beg end))

(general-nvmap :keymaps 'override "gr" '+eval:region)
#+end_src
*** Folding
#+begin_src emacs-lisp :tangle yes
;; Adapted from doom emacs
(defun increase-selective-display ()
  (interactive)
  (if (eq selective-display nil)
      (set-selective-display tab-width)
      (set-selective-display (+ selective-display tab-width))))

(defun decrease-selective-display ()
  (interactive)
  (cond ((eq selective-display tab-width) (set-selective-display nil))
         ((eq selective-display nil))
         (t (set-selective-display (- selective-display tab-width)))))

(general-nmap "C->" 'increase-selective-display)
(general-nmap "C-<" 'decrease-selective-display)

(use-feature hideshow
  :hook (prog-mode . hs-minor-mode)
  :config

  (defun display-code-line-counts (ov)
    (when (eq 'code (overlay-get ov 'hs))
      (overlay-put ov 'display
                   (format "\t[%d...]"
                           (count-lines (overlay-start ov)
                                        (overlay-end ov))))))

  ;; Do not fold comments
  (setq hs-hide-comments-when-hiding-all nil)
  (setq hs-set-up-overlay #'display-code-line-counts)
  (add-hook 'prog-mode-hook 'hs-minor-mode))
#+end_src

*** Smerge

#+begin_src emacs-lisp :tangle yes
(use-feature smerge-mode
  :general
  (general-nmap
    :keymaps 'smerge-mode-map
    "RET" 'smerge-keep-current))
#+end_src

*** Flycheck
#+begin_src emacs-lisp :tangle yes
(use-package flycheck)
#+end_src
*** Comment auto-fill

#+begin_src emacs-lisp :tangle yes
(use-feature simple
  :hook (prog-mode . auto-fill-mode)
  :general
  (general-nmap "M-SPC" 'cycle-spacing)
  :custom
  (comment-auto-fill-only-comments t)
  (fill-column 80))
#+end_src

*** EditorConfig
#+begin_src emacs-lisp :tangle yes
(use-package editorconfig
  :defer 1
  :config
  (editorconfig-mode 1))
#+end_src
*** Direnv

The best way to manage virtual environment.

For example, to create a new python project:

#+begin_src bash :tangle no
echo 'layout python3' > .envrc
direnv allow
pip install <packages>
#+end_src


#+begin_src emacs-lisp :tangle yes
(use-package direnv
  :config
  (direnv-mode 1))
#+end_src

*** rainbow-mode

rainbow-mode shows hex code colours in buffers.

#+begin_src emacs-lisp :tangle yes
(use-package rainbow-mode)
#+end_src
*** Jupyter
#+begin_src emacs-lisp :tangle yes
(use-package jupyter
  :custom
  (org-babel-jupyter-resource-directory "/tmp/.ob-jupyter")
  (jupyter-repl-input-prompt-format "[%d] ")
  (jupyter-repl-output-prompt-format "")
  (jupyter-repl-busy-prompt "[*] ")
  (org-babel-default-header-args:jupyter-julia '((:async . "yes")
                                                 (:session . "jl")
                                                 (:kernel . "julia-1.5")))
  (org-babel-default-header-args:jupyter-python '((:async . "yes")
                                                  (:session . "py")
                                                  (:kernel . "python3")))
  :config
  ;; (org-babel-jupyter-override-src-block "ipython")
  ;; (org-babel-jupyter-override-src-block "julia")
  (set-popup-rule! "\\*jupyter-repl"))
#+end_src

** Lang
*** Clojure
#+begin_src emacs-lisp :tangle yes
(use-package clojure-mode
  :hook (clojure-mode . lsp))

(use-package cider
  :hook (cider-repl-mode . company-mode)
  :general
  (leader-key :keymaps 'cider-mode-map
    "'" 'cider-jack-in-clj

    "eb" 'cider-load-buffer
    "ed" 'cider-eval-defun-at-point
    "ee" 'cider-eval-last-sexp

    "rn" 'cider-repl-set-ns)
  :hook (clojure-mode . cider-mode)
  :init
  (set-popup-rules!
    '(("^\\*cider-repl"         :vslot 2 :select t :ttl nil :size 0.4)
      ("^\\*cider-error*"       :vslot 3 :select t)
      ("^\\*cider-repl-history" :vslot 4 :ttl nil)))
  :custom
  (cider-repl-result-prefix ";; => ")
  (cider-repl-display-help-banner nil)
  :config

  (add-to-list '+eval-runners '(clojure-mode . cider-eval-region))

  ;; Evil collection does not support certain functionality in cider-debug, so
  ;; we disable it and use the standard bindings.
  (add-hook 'cider--debug-mode-hook
            (defun my--clojure--cider-setup-debug ()
              "Setup cider debug to override evil keys cleanly."
              (evil-make-overriding-map cider--debug-mode-map 'normal)
              (evil-normalize-keymaps))))
#+end_src
*** Elisp
#+begin_src emacs-lisp :tangle yes
(use-feature elisp
  :general
  (leader-key :keymaps 'emacs-lisp-mode-map
    "eb" 'eval-buffer
    "ef" 'load-file
    "el" 'load-library
    "ee" 'pp-eval-last-sexp))

(use-feature ielm
  :hook (inferior-emacs-lisp-mode . company-mode)
  :init
  (set-popup-rule! "\\*ielm\\*" :ttl nil))
#+end_src
*** Common Lisp

#+begin_src emacs-lisp :tangle yes
(use-package sly
  :hook (sly-mrepl-mode . company-mode)
  :general
  (leader-key
    :keymaps 'lisp-mode-map
    "'"  'sly
    "cc" 'sly-compile-file
    "cC" 'sly-compile-and-load-file
    "cf" 'sly-compile-defun
    "cl" 'sly-load-file
    "cn" 'sly-remove-notes
    "cr" 'sly-compile-region)
  :custom
  (inferior-lisp-program "sbcl")
  :init
  (set-popup-rules!
    '(("^\\*sly-mrepl"       :vslot 2 :select t :size 0.4 :ttl nil)
      ("^\\*sly-compilation" :vslot 3 :ttl nil)
      ("^\\*sly-traces"      :vslot 4 :ttl nil)
      ("^\\*sly-description" :vslot 5 :size 0.3 :ttl 0)
      ;; Do not display debugger or inspector buffers in a popup window. These
      ;; buffers are meant to be displayed with sufficient vertical space.
      ("^\\*sly-\\(?:db\\|inspector\\)" :ignore t))))
#+end_src

*** Haskell
#+begin_src emacs-lisp :tangle yes
(use-package haskell-mode
  :mode "\\.hs\\'")
  ;; :hook (haskell-mode . lsp-deferred))

(use-package lsp-haskell
  :after haskell-mode)
#+end_src
*** Web
**** web mode
#+begin_src emacs-lisp :tangle yes
;; Config mostly stolen from https://github.com/raxod502/radian/blob/develop/emacs/radian.el
(use-package web-mode
  :mode (("\\.phtml\\'" . web-mode)
         ("\\.tpl\\.php\\'" . web-mode)
         ("\\.[agj]sp\\'" . web-mode)
         ("\\.as[cp]x\\'" . web-mode)
         ("\\.erb\\'" . web-mode)
         ("\\.mustache\\'" . web-mode)
         ("\\.djhtml\\'" . web-mode)
         ("\\.html?\\'" . web-mode))
  :config
  (setq web-mode-enable-auto-closing t
        web-mode-auto-close-style 2 ;; 2 is a nice number I suppose
        web-mode-enable-auto-quoting nil ;; messes with jsx
        web-mode-enable-auto-pairing nil
        web-mode-markup-indent-offset 2
        web-mode-code-indent-offset 2
        web-mode-css-indent-offset 2)
  (add-to-list 'web-mode-content-types-alist
               '("jsx" . "\\.js[x]?\\'"))

  (setq web-mode-engines-alist
        '(("go" . "layouts/.+\\.html$")))

  ;; Fix comments in javascript mode
  (let ((types '("javascript" "jsx")))
    (setq web-mode-comment-formats
          (cl-remove-if (lambda (item)
                          (member (car item) types))
                        web-mode-comment-formats))
    (dolist (type types)
      (push (cons type "//") web-mode-comment-formats))))

(use-package gulp-task-runner
  :defer t)
#+end_src
**** restclient

#+begin_src emacs-lisp :tangle yes
;; Make sure to use comments (#) as separators
(use-package restclient
  :mode (("\\.rest" . restclient-mode)))
#+end_src
*** Javascript
**** js2-mode
#+begin_src emacs-lisp :tangle yes
;; Mostly borrowed from https://github.com/CSRaghunandan/.emacs.d/blob/master/setup-files/setup-js.el
(use-package js2-mode
  :ensure-system-package (tsserver . "sudo npm i -g typescript-language-server && sudo pacman -S typescript")
  :mode "\\.m?js\\'"
  :interpreter "node"
  :init 
  (with-eval-after-load 'projectile
    (add-to-list 'projectile-globally-ignored-directories "node_modules"))
  :config
  ;; have 2 space indentation by default
  (setq js-indent-level 2
        js2-basic-offset 2
        js-chain-indent t)

  ;; Try to highlight most ECMA built-ins
  (setq js2-highlight-level 3)
  ;; have a shorter idle time delay
  (setq js2-idle-timer-delay 0.1)

  ;; turn off all warnings in js2-mode
  (setq js2-mode-show-parse-errors t
        js2-mode-show-strict-warnings nil
        js2-strict-missing-semi-warning nil
        js2-strict-trailing-comma-warning nil))
#+end_src
**** prettier-js

#+begin_src emacs-lisp :tangle yes
(use-package prettier-js
  :ensure-system-package prettier
  :hook ((js2-mode rjsx-mode json-mode) . prettier-js-mode)
  :custom (prettier-js-args '("--print-width" "100"
                              "--single-quote" "true"
                              "--trailing-comma" "all")))
#+end_src
**** rjsx-mode
#+begin_src emacs-lisp :tangle yes
(use-package rjsx-mode
  :mode "components/.+\\.js$")
#+end_src
*** Java

#+begin_src emacs-lisp :tangle yes
(use-package lsp-java
  :after lsp-clients)

(use-package gradle-mode
  :hook (java-mode . gradle-mode)
  :general
  (leader-key
    :keymaps 'java-mode-map
    "cb" 'gradle-build))
#+end_src
*** LSP-mode
#+begin_src emacs-lisp :tangle yes
;; Make sure to install jansson
(use-package lsp-mode
  :commands lsp
  :general
  (leader-key
    :keymaps 'lsp-mode-map
    "cr" 'lsp-rename
    "cl" 'lsp-find-definition
    "cd" 'lsp-ui-doc-glance
    "cpl" 'lsp-ui-peek-find-references
    "cpi" 'lsp-ui-peek-find-implementation)
  :hook ((lsp-mode . (lambda ()
		       (lsp-enable-which-key-integration t)))
	 ((c++-mode python-mode java-mode sh-mode scss-mode web-mode) . lsp))
  :custom
  (lsp-enable-indentation nil)
  (lsp-keep-workspace-alive nil)
  (lsp-enable-on-type-formatting nil)
  (lsp-enable-snippet nil) ;; Clashes with company
  (lsp-enable-file-watchers nil)
  (read-process-ouput-max (* 1024 1024))
  :init
  (setq lsp-keymap-prefix "C-c l"
	lsp-before-save-edits nil ;; Do not autoformat buffer
	lsp-file-watch-threshold 1500)

  ;; Ignore specific directories in projectile
  (with-eval-after-load 'projectile
    (add-to-list 'projectile-globally-ignored-directories ".clangd")))

#+end_src

*** lsp-ui
#+begin_src emacs-lisp :tangle yes
(use-package lsp-ui
  :commands lsp-ui-mode
  :custom
  (lsp-ui-doc-enable nil)
  (lsp-ui-doc-position 'top)
  (lsp-ui-doc-delay 0)
  (lsp-ui-doc-include-signature t)
  (lsp-eldoc-enable-hover nil) ; Disable eldoc displays in minibuffer

  (lsp-ui-peek-fontify 'always)
  (lsp-ui-peek-always-show t)

  (lsp-ui-sideline-enable nil)
  (lsp-ui-sideline-delay 0.5)
  (lsp-ui-sideline-show-symbol nil) ;; only show code actions
  (lsp-ui-sideline-update-mode 'line)
  (lsp-ui-sideline-show-code-actions t)
  (lsp-ui-sideline-show-hover t)
  (lsp-ui-sideline-ignore-duplicate t)

  (lsp-headerline-breadcrumb-enable nil)

  (lsp-ui-imenu-enable nil))
#+end_src

*** lsp-treemacs

#+begin_src emacs-lisp :tangle yes
(use-package lsp-treemacs
  :after (lsp-mode treemacs))
#+end_src

*** DAP
#+begin_src emacs-lisp :tangle yes
(use-package dap-mode
  :after lsp-mode
  :commands dap-debug
  :hook
  ((python-mode . (lambda () (require 'dap-python)))
   (java-mode . (lambda () (require 'dap-java)))
   (c++-mode . (lambda () (require 'dap-cpptools)))
   ;;((c-mode c++-mode objc-mode swift-mode) . (lambda () (require 'dap-gdb-lldb)))
   ((js-mode js2-mode) . (lambda () (require 'dap-chrome))))
  :general
  (leader-key
    "dd" 'dap-debug
    "dr" 'dap-debug-restart
    "dh" 'dap-hydra
    "dbt" 'dap-breakpoint-toggle
    "du" 'dap-ui-show-many-windows
    "dU" (lambda ()
	   (interactive)
     (dap-ui-many-windows-mode -1)
     (dap-ui-hide-many-windows)))

  (general-nmap
    "<f6>" 'dap-continue
    "<f7>" 'dap-next
    "<f8>" 'dap-step-in
    "<S-f8>" 'dap-step-out
    "<f9>" 'dap-breakpoint-toggle)

  :config
  (dap-mode 1)
  (dap-ui-mode 1))

;; NOTE: Make sure that debugpy is available in the current environment.
;; Otherwise will get error:
;; Debug session process exited with status: exited abnormally with code 1
(use-feature dap-python
  :defer t ;; loaded by dap-mode
  :custom
  (dap-python-debugger 'debugpy)
  
  :config
  ;; Do not let dap ignore the virtual environment
  (defun dap-python--pyenv-executable-find (command)
    (executable-find "python")))

(use-feature dap-java
  :defer t ;; loaded by dap-mode
  :general
  (leader-key
    :keymaps 'java-mode-map
    "ct" (defhydra hydra-java-run ()
	   "run"
	   ("r" dap-java-debug "debug")
	   ("dm" dap-java-debug-test-method "debug method")
	   ("dc" dap-java-debug-test-class "debug class")
	   ("m" dap-java-run-test-method "run method")
	   ("c" dap-java-run-test-class "run class")
	   ("q" nil "cancel" :color blue))))

#+end_src
*** C/C++
To configure a new C program:
1. Create a =CMakeLists.txt= file. Eg:
#+begin_src cmake :tangle no
cmake_minimum_required(VERSION 3.10)

# set the project name
project(Tutorial)

# add the executable
add_executable(Tutorial tutorial.cxx)
#+end_src

2. Run the following commands:
#+begin_src shell :tangle no
cmake -H. -BDebug -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=YES
ln -s Debug/compile_commands.json
#+end_src

Where ~-BDebug~ specifies the build directory (Debug)

**** CMake

#+begin_src emacs-lisp :tangle yes
(use-package cmake-mode
  :mode ("CMAKELists\\.txt\\'" "\\.cmake\\'"))

(use-package cmake-font-lock
  :after (cmake-mode)
  :hook (cmake-mode . cmake-font-lock-activate))
#+end_src

**** lsp-clangd

#+begin_src emacs-lisp :tangle yes
(use-feature lsp-clangd
  :after lsp-mode
  :custom
  (lsp-clients-clangd-args '("-j=3"
			     "--background-index"
			     "--clang-tidy"
			     "--completion-style=detailed"
			     "--header-insertion=never")))

#+end_src
*** CSharp


#+begin_src emacs-lisp :tangle yes
(use-package csharp-mode
  :mode "\\.cs\\'"
  :hook (csharp-mode . lsp-deferred))

(use-package shader-mode
  :mode ("\\.shader\\'"
          "\\.compute\\'")
  :hook
  (shader-mode . company-mode))
#+end_src

**** Using omnisharp with Unity

For some reason, the OmniSharp language server uses a bundled version of mono instead of the global one. In VSCode, you can change this by setting the option =useGlobaMono= to true. In Emacs, edit the =run= shell script as shown here:

#+begin_src sh tangle: no
# mono_cmd=${bin_dir}/mono
mono_cmd=mono
#+end_src

*** GLSL
For OpenGl shader programming.

#+begin_src emacs-lisp :tangle yes
(use-package glsl-mode
  :mode ("\\.vs\\'"
         "\\.fs\\'"
         "\\.glsl\\'"
         "\\.geom\\'"
         "\\.frag\\'"
         "\\.vert\\'"))
#+end_src
*** Python

As always, trying to make use of LSP.

Arch packages:
1. flake8 for flycheck
2. python-black for style
3. python-language-server for lsp

#+begin_src emacs-lisp :tangle yes
(use-feature python
  :mode ("/Pipfile\\'" . conf-mode)
  :custom
  (python-indent-guess-indent-offset-verbose nil)
  ;; https://github.com/gregsexton/ob-ipython/issues/89
  (python-shell-prompt-detect-failure-warning nil))

(use-package lsp-pyright
  :if (executable-find "pyright")
  :after (lsp-mode python)
  :custom
  (lsp-pyright-typechecking-mode "off"))

(use-package pyenv-mode
  :after python
  :hook ((python-mode . pyenv-mode)
         (projectile-switch-project . projectile-pyenv-mode-set))
  :custom (pyenv-mode-set "3.8.5")
  :preface
  (defun projectile-pyenv-mode-set ()
    "Set pyenv version matching project name."
    (let ((project (projectile-project-name)))
      (if (member project (pyenv-mode-versions))
          (pyenv-mode-set project)
        (pyenv-mode-unset))))

  :config
  ;; Pyenv overrides the org-schedule keybind
  (define-key pyenv-mode-map (kbd "C-c C-s") nil)
  (define-key pyenv-mode-map (kbd "C-M-s") 'pyenv-mode-set))


(use-package blacken
  :commands blacken-mode
  ;; :hook (python-mode . blacken-mode)
  )

(use-package importmagic
  :hook (python-mode . importmagic-mode))

(use-package sphinx-doc
  :after python
  :hook (python-mode . sphinx-doc-mode))

(use-package python-docstring
  :hook ((python-mode . python-docstring-mode)))

(use-package python-pytest
  :general
  (leader-key
    :keymaps 'python-mode-map
    "ct" 'python-pytest-dispatch)
  :commands python-pytest-dispatch)
        #+end_src
*** MATLAB

I used to dislike MATLAB, but the effort they put in to supporting Linux and Emacs earns my admiration.
#+begin_src emacs-lisp :tangle yes
(use-package matlab-mode
  :mode "\\.m\\'"
  :general
  (:states 'normal :keymaps 'matlab-mode-map "gz" 'matlab-shell)
  :hook ((matlab-mode) . (lambda () (company-mode) (flycheck-mode)))
  :custom
  ;; Works in org. Other methods seem to need a file
  (matlab-shell-run-region-function 'matlab-shell-region->commandline)
  (matlab-shell-use-emacs-toolbox nil)
  :init
  (setq-default mlint-show-warnings t)
  (with-eval-after-load 'flycheck
    (flycheck-define-checker matlab
      "Checker for matlab"
      ;; FIXME This should REALLY be a variable
      ;; :command ((eval mlint-program))
      :command ("/usr/local/MATLAB/R2020b/bin/glnxa64/mlint" source)
      :error-patterns
      ((warning line-start "L " line " (C " (1+ digit)  "): " (message) line-end))
      ;; ((warning line-start "L " line " (C " column "-" column "): " (id (* alnum)) ":" (message))
      ;; (warning line-start "L " line " (C " column "): " (id (* alnum)) ":" (message)))
      :modes matlab-mode)
    (push 'matlab flycheck-checkers))

  (set-popup-rules! '(("\\*MATLAB\\*" :ttl nil)
                      (".*?MATLAB Help.*")))

  :config
  (matlab-cedet-setup))

  #+end_src

*** Julia

#+begin_src emacs-lisp :tangle yes
(use-package julia-mode
  :mode "\\.jl\\'"
  :general
  (general-nmap :keymaps 'julia-mode-map
    "gz" 'julia-repl
    "C-<return>" 'julia-repl-send-region-or-line
    "C-S-<return>" 'julia-repl-send-buffer)

  :config
  (use-package julia-repl)
  (set-popup-rule! "\\*julia\\*" :ttl nil))


(use-package lsp-julia
  :after julia-mode
  :hook (julia-mode . lsp)
  :custom
  (lsp-julia-default-environment
   (car (last (file-expand-wildcards
               (expand-file-name "~/.julia/environments/v*"))))))
#+end_src
*** Lua
#+begin_src emacs-lisp :tangle yes
(use-package lua-mode
  :mode "\\.lua\\'"
  :interpreter "lua")
#+end_src

*** Json

#+begin_src emacs-lisp :tangle yes
(use-package json-mode
  :mode "\\.json\\'")
#+end_src
*** Yaml
#+begin_src emacs-lisp :tangle yes
(use-package yaml-mode
  :mode "\\.yml\\'")
#+end_src
** Functions
*** Align Comments in Region

#+begin_src emacs-lisp :tangle yes
(defun my--align-comments (beginning end)
  "Align comments in region"
  (interactive "*r")
  (align-regexp beginning end (concat "\\(\\s-*\\)"
                                      (regexp-quote comment-start)) nil 2))
(leader-key
  "c=c" 'my--align-comments)
#+end_src


# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(my--async-babel-tangle (concat user-emacs-directory "config.org"))) nil t)
# End:

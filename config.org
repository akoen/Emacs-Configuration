#+TITLE: Alex Koen's Emacs configuration

I've been experimenting with using Emacs as my primary editor, and I've been liking it more and more due to it's flexibility and extensibility. In order to become more comfortable with this editor, I need to learn elisp properly and maybe switch to emacs keybindings (I do love vim though...)

This is my configuration:

* Table of Contents                                               :TOC_3_gh:
- [[#initialization][Initialization]]
  - [[#lexical-binding][Lexical binding]]
  - [[#personal-information][Personal Information]]
  - [[#optimizations][Optimizations]]
    - [[#garbage-collector][Garbage collector]]
  - [[#package-management][Package Management]]
    - [[#package-settings][Package Settings]]
    - [[#manually-set-load-path][Manually Set Load Path]]
    - [[#initialize-package-management][Initialize Package Management]]
  - [[#detection][Detection]]
    - [[#detect-operating-system][Detect Operating System]]
    - [[#detect-internet-connection][Detect Internet Connection]]
  - [[#appearance][Appearance]]
    - [[#theme][Theme]]
    - [[#text][Text]]
    - [[#disable-unecessary-ui-elements][Disable unecessary UI elements]]
    - [[#smooth-scrolling][Smooth Scrolling]]
    - [[#all-the-icons][All the icons]]
    - [[#doom-modeline][Doom-modeline]]
  - [[#backups][Backups]]
  - [[#prompts][Prompts]]
  - [[#miscellaneous][Miscellaneous]]
- [[#keybindings][Keybindings]]
  - [[#general][General]]
- [[#core-utilities][Core Utilities]]
  - [[#exec-path-from-shell][Exec Path From Shell]]
  - [[#which-key][Which Key]]
  - [[#evil][EVIL]]
    - [[#esc-quits-everything][ESC quits everything]]
  - [[#completion][Completion]]
    - [[#ivy][Ivy]]
    - [[#ivy-rich][Ivy-Rich]]
    - [[#counsel][Counsel]]
    - [[#swiper][Swiper]]
  - [[#lsp-mode][LSP-mode]]
  - [[#dired-x][Dired-x]]
- [[#utilities][Utilities]]
  - [[#yasnippet][Yasnippet]]
  - [[#neotree-and-icons][NeoTree and Icons]]
  - [[#deft][Deft]]
  - [[#magit][Magit]]
- [[#org-mode][Org-mode]]
  - [[#configuration][Configuration]]
    - [[#auto-save][Auto-save]]
    - [[#keywords][keywords]]
  - [[#packages][Packages]]
    - [[#org-modules][org-modules]]
    - [[#evil-org][EVIL-Org]]
    - [[#org-bullets][Org-Bullets]]
    - [[#org-gcal][Org-Gcal]]
    - [[#ox-tufte][Ox-Tufte]]
    - [[#ox-pandoc][Ox-Pandoc]]
    - [[#habitica][Habitica]]
    - [[#babel][Babel]]
    - [[#org-download][Org Download]]
    - [[#toc-org][Toc-org]]
  - [[#capture][Capture]]
  - [[#agenda][Agenda]]
  - [[#variable-pitch-mode][Variable Pitch Mode]]
  - [[#circular-bullets][Circular Bullets]]
  - [[#autosort][Autosort]]
  - [[#babel-1][Babel]]
- [[#latex][LaTeX]]
  - [[#reftex][RefTeX]]
- [[#development][Development]]
  - [[#web][Web]]
    - [[#web-mode][Web Mode]]
- [[#writing][Writing]]
  - [[#focus][Focus]]
  - [[#olivetti][Olivetti]]
- [[#functions][Functions]]
  - [[#compile-org-to-pdf][Compile org to pdf]]
  - [[#writing-function][Writing Function]]
  - [[#french-mode][French mode]]
  - [[#english-mode][English Mode]]
  - [[#ispell][Ispell]]
  - [[#flycheck-grammalecte][Flycheck-grammalecte]]
  - [[#flycheck-proselint][Flycheck-proselint]]
- [[#post-initialization][Post Initialization]]
  - [[#restore-garbage-collector][Restore garbage collector]]

* Initialization
** Lexical binding

#+BEGIN_SRC emacs-lisp :tangle yes :comments no
;;; init.el --- The personal Emacs configuration of Alex Koen -*- lexical-binding: t; -*-
#+END_SRC

** Personal Information

#+BEGIN_SRC emacs-lisp :tangle yes
(setq user-full-name "Alex Koen"
      user-mail-address "arw.koen@gmail.com")
#+END_SRC

** Optimizations
*** Garbage collector

The garbage collector eats up a lot of time during startup, so turn up its memory threshold to prevent it from getting trigerred.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq gc-cons-threshold 402653184
      gc-cons-percentage 0.6)
#+END_SRC

** Package Management

*** Package Settings

We’re going to set the load-path ourselves and avoid calling (package-initilize) (for performance reasons) so we need to set package--init-file-ensured to true to tell package.el to not automatically call it on our behalf. Additionally we’re setting package-enable-at-startup to nil so that packages will not automatically be loaded for us since use-package will be handling that.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq load-prefer-newer t
      package-user-dir "~/.emacs.d/elpa"
      package--init-file-ensured t
      package-enable-at-startup nil)

(unless (file-directory-p package-user-dir)
  (make-directory package-user-dir t))
#+END_SRC

*** Manually Set Load Path

We’re going to set the load path ourselves so that we don’t have to call package-initialize at runtime and incur a large performance hit. This load-path will actually be faster than the one created by package-initialize because it appends the elpa packages to the end of the load path. Otherwise any time a builtin package was required it would have to search all of third party paths first.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq load-path (append load-path (directory-files package-user-dir t "^[^.]" t)))
#+END_SRC

*** Initialize Package Management

Next we are going to require package.el and add our additional package archives, ‘melpa’ and ‘org’. Afterwards we need to initialize our packages and then ensure that use-package is installed, which we promptly install if it’s missing. Finally we load use-package and tell it to always install any missing packages.

Note that this entire block is wrapped in eval-when-compile. The effect of this is to perform all of the package initialization during compilation so that when byte compiled, all of this time consuming code is skipped. This can be done because the result of byte compiling use-package statements results in the macro being fully expanded at which point use-package isn’t actually required any longer.

Since the code is automatically compiled during runtime, if the configuration hasn’t already been previously compiled manually then all of the package initialization will still take place at startup.

#+BEGIN_SRC emacs-lisp :tangle yes
;; bootstrap use-package
(require 'package)

(unless (assoc-default "melpa" package-archives)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t))
(unless (assoc-default "org" package-archives)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t))

(package-initialize)
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)

(setq use-package-always-ensure t)
#+END_SRC

** Detection

*** Detect Operating System

Detection for the host operating system. Currently, I only use Emacs on Linux, so this is more for future consideration.

#+BEGIN_SRC emacs-lisp :tangle yes
(defun is-linux-p
    ()
  (eq system-type 'gnu/linux))

(defun is-linux-p
    ()
  (or
   (eq system-type 'ms-dos)
   (eq system-type 'windows-nt)
   (eq system-type 'cygwin)))
#+END_SRC

*** Detect Internet Connection
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun internet-up-p (&optional host)
    (= 0 (call-process "ping" nil nil nil "-c" "1" "-W" "1"
                       (if host host "www.google.com"))))

#+END_SRC
** Appearance
*** Theme

Doom one is beautiful

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package doom-themes
:defer t
:config
(load-theme 'doom-one t)
(doom-themes-org-config))
#+END_SRC
*** Text
**** Font

#+BEGIN_SRC emacs-lisp :tangle yes
(set-default-font "Fira Code 12")
(set-face-attribute 'default nil :height 100)
#+END_SRC

**** Text wrapping

Soft wrapping instead of hard wrapping.

#+BEGIN_SRC emacs-lisp :tangle yes
(global-visual-line-mode 1)
#+END_SRC

*** Disable unecessary UI elements
**** Tool Bar

#+BEGIN_SRC emacs-lisp :tangle yes
(menu-bar-mode -1)
(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
#+END_SRC

**** Startup Screen

#+BEGIN_SRC emacs-lisp :tangle yes
(setq inhibit-startup-screen t)	; inhibit useless and old-school startup screen
#+END_SRC

*** Smooth Scrolling
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package smooth-scrolling
:init
  (setq smooth-scroll-margin 5
        scroll-conservatively 101
        scroll-preserve-screen-position t
        auto-window-vscroll nil)
  :config
(setq scroll-margin 5))
#+END_SRC
*** All the icons
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package all-the-icons
:defer t)
#+END_SRC

*** Doom-modeline

A fancy and fast mode-line inspired by minimalistic design

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package doom-modeline
:hook (after-init . doom-modeline-mode))
#+END_SRC
** Backups

By default, Emacs saves backups relative to the current directory. This is abhorrent. We change this.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq make-backup-files t) ; make backups file even when in version controlled dir
(setq backup-directory-alist `(("." . "~/.emacs.d/backups"))
  backup-by-copying t      ; Don't delink hardlinks
  version-control t        ; Use version numbers on backups
  delete-old-versions t    ; Automatically delete excess backups
  kept-new-versions 20     ; how many of the newest versions to keep
  kept-old-versions 5      ; and how many of the old
)                          ; which directory to put backups file
#+END_SRC

** Prompts

Make yes or no prompts be y or n prompts

#+BEGIN_SRC emacs-lisp :tangle yes
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Miscellaneous

#+BEGIN_SRC emacs-lisp :tangle yes
(auto-revert-mode 1)
(setq vc-follow-symlinks t)				       ; don't ask for confirmation when opening symlinked file
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)) ) ;transform backups file name
(setq ring-bell-function 'ignore)	; silent bell when you make a mistake
;(setq-default coding-system-for-read 'utf-8)	; use utf-8 by default
;(setq coding-system-for-write 'utf-8)
(setq sentence-end-double-space nil)	; sentence SHOULD end with only a point.
(setq initial-scratch-message "Welcome to Emacs") ; print a default message in the empty scratch buffer opened at startup
(setq x-select-enable-clipboard t)  ; allow pasting selection outside of emacs
(setq delete-by-moving-to-trash t) ; move files to trash when deleting
(global-display-line-numbers-mode t)
(setq display-line-numbers-type 'relative)

;; Set default font

;; Show matching parentheses
(setq show-paren-delay 0)
(show-paren-mode 1)

;; visual line
#+END_SRC

* Keybindings
** General
#+BEGIN_SRC emacs-lisp :tangle yes
;; load general
(use-package general
:after which-key
:config
(general-override-mode 1)
(general-auto-unbind-keys)

(defun universal-argument-file ()
    (interactive)
    (let ((current-prefix-arg 4)) ;; emulate C-u
    (call-interactively 'counsel-fzf))) ;; invoke counsel-file-jump interactively

(general-create-definer tyrant-def
    :keymaps '(normal visual insert emacs motion)
    :prefix "SPC"
    :non-normal-prefix "C-SPC")

(tyrant-def
    "SPC" nil

    ;; Buffer
    "w" 'save-buffer
    "z" 'previous-buffer
    "x" 'next-buffer
    "b" 'switch-to-buffer

    ;; Files
    "t" 'universal-argument-file
    "ff" 'dired-jump

    ;; Language
    "lf" 'french-mode
    "le" 'english-mode
    "lg" 'writing-mode

    ;; Org mode
    "oa" 'org-agenda
    "oc" 'org-capture

    ;; Shell
    "s" 'shell


    )) 
#+END_SRC

* Core Utilities

Utilities which are essential for rational operation of emacs

** Exec Path From Shell

This sets the variable exec-path to the normal shell's PATH variable. This doesn't normally get set in daemon mode.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package exec-path-from-shell
:config
(exec-path-from-shell-initialize))
#+END_SRC
** Which Key
A small buffer which shows the list of features you can do next
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package which-key
  :init
  (setq which-key-separator " ")
  (setq which-key-prefix-prefix "+")
  :config
  (which-key-mode 1))
#+END_SRC

** EVIL

Allows for traditional vim bindings inside of emacs

#+BEGIN_SRC emacs-lisp :tangle yes
;; load evil
(use-package evil
  :init ;; tweak evil's configuration before loading it
    (setq evil-search-module 'evil-search)
    (setq evil-want-C-u-scroll t)
  :config ;; tweak evil after loading it
    ;; Make movement keys work like they should
    (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
    (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
    (define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
    (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
    ; Make horizontal movement cross lines                                    
    (setq-default evil-cross-lines t)
  (evil-mode 1))
#+END_SRC

*** ESC quits everything

This code allows us to quit basically everything using ESC.

#+BEGIN_SRC emacs-lisp :tangle yes
(defun minibuffer-keyboard-quit ()
    "Abort recursive edit.
    In Delete Selection mode, if the mark is active, just deactivate it;
    then it takes a second \\[keyboard-quit] to abort the minibuffer."
    (interactive)
    (if (and delete-selection-mode transient-mark-mode mark-active)
        (setq deactivate-mark  t)
        (when (get-buffer "*Completions*")
              (delete-windows-on "*Completions*"))
        (abort-recursive-edit)))
(define-key evil-normal-state-map [escape] 'keyboard-quit)
(define-key evil-visual-state-map [escape] 'keyboard-quit)
(define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
#+END_SRC

** Completion
*** Ivy

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ivy
:defer 1 ;; wait one second before loading
:config
(setq ivy-height 15
      ivy-wrap t
      ;; don't use ^ as initial input
      ivy-initial-inputs-alist nil
      ;; highlight til EOL
      ivy-format-function #'ivy-format-function-line
      ;; don't show recent files in switch-buffer
      ivy-use-virtual-buffers nil
      ;; don't quit minibuffer on delete-error
      ivy-on-del-error-function nil
      ;; enable ability to select prompt
      ivy-use-selectable-prompt t)

(ivy-mode 1))
#+END_SRC
*** Ivy-Rich

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ivy-rich
  :after ivy
  :preface
  (defun ivy-rich-branch-candidate (candidate)
    "Displays the branch candidate of the candidate for ivy-rich."
    (let ((candidate (expand-file-name candidate ivy--directory)))
      (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
	  ""
	(format "%s%s"
		(propertize
		 (replace-regexp-in-string abbreviated-home-dir "~/"
					   (file-name-directory
					    (directory-file-name candidate)))
		 'face 'font-lock-doc-face)
		(propertize
		 (file-name-nondirectory
		  (directory-file-name candidate))
		 'face 'success)))))

  (defun ivy-rich-compiling (candidate)
    "Displays compiling buffers of the candidate for ivy-rich."
    (let* ((candidate (expand-file-name candidate ivy--directory)))
      (if (or (not (file-exists-p candidate)) (file-remote-p candidate)
	      (not (magit-git-repo-p candidate)))
	  ""
	(if (my/projectile-compilation-buffers candidate)
	    "compiling"
	  ""))))

  (defun ivy-rich-file-group (candidate)
    "Displays the file group of the candidate for ivy-rich"
    (let ((candidate (expand-file-name candidate ivy--directory)))
      (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
	  ""
	(let* ((group-id (file-attribute-group-id (file-attributes candidate)))
	       (group-function (if (fboundp #'group-name) #'group-name #'identity))
	       (group-name (funcall group-function group-id)))
	  (format "%s" group-name)))))

  (defun ivy-rich-file-modes (candidate)
    "Displays the file mode of the candidate for ivy-rich."
    (let ((candidate (expand-file-name candidate ivy--directory)))
      (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
	  ""
	(format "%s" (file-attribute-modes (file-attributes candidate))))))

  (defun ivy-rich-file-size (candidate)
    "Displays the file size of the candidate for ivy-rich."
    (let ((candidate (expand-file-name candidate ivy--directory)))
      (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
	  ""
	(let ((size (file-attribute-size (file-attributes candidate))))
	  (cond
	   ((> size 1000000) (format "%.1fM " (/ size 1000000.0)))
	   ((> size 1000) (format "%.1fk " (/ size 1000.0)))
	   (t (format "%d " size)))))))

  (defun ivy-rich-file-user (candidate)
    "Displays the file user of the candidate for ivy-rich."
    (let ((candidate (expand-file-name candidate ivy--directory)))
      (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
	  ""
	(let* ((user-id (file-attribute-user-id (file-attributes candidate)))
	       (user-name (user-login-name user-id)))
	  (format "%s" user-name)))))

  (defun ivy-rich-switch-buffer-icon (candidate)
    "Returns an icon for the candidate out of `all-the-icons'."
    (with-current-buffer
	(get-buffer candidate)
      (let ((icon (all-the-icons-icon-for-mode major-mode :height 0.9)))
	(if (symbolp icon)
	    (all-the-icons-icon-for-mode 'fundamental-mode :height 0.9)
	  icon))))
  :config
  (plist-put ivy-rich-display-transformers-list
	     'counsel-find-file
	     '(:columns
	       ((ivy-rich-candidate               (:width 73))
		(ivy-rich-file-user               (:width 8 :face font-lock-doc-face))
		(ivy-rich-file-group              (:width 4 :face font-lock-doc-face))
		(ivy-rich-file-modes              (:width 11 :face font-lock-doc-face))
		(ivy-rich-file-size               (:width 7 :face font-lock-doc-face))
		(ivy-rich-file-last-modified-time (:width 30 :face font-lock-doc-face)))))
  (plist-put ivy-rich-display-transformers-list
             'ivy-switch-buffer
             '(:columns
               ((ivy-rich-switch-buffer-icon       (:width 2))
                (ivy-rich-candidate                (:width 40))
                (ivy-rich-switch-buffer-size       (:width 7))
                (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
                (ivy-rich-switch-buffer-major-mode (:width 20 :face warning)))
               :predicate (lambda (cand) (get-buffer cand))))
  (ivy-rich-mode 1))
#+END_SRC

**** Flx

Sublime-text fuzzy matching for Emacs. Package used following Doom's ivy configuration.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package flx
:defer t  ; loaded by ivy
:init
(setq ivy-re-builders-alist
        '((counsel-ag . ivy--regex-plus)
          (counsel-rg . ivy--regex-plus)
          (counsel-grep . ivy--regex-plus)
          (swiper . ivy--regex-plus)
          (swiper-isearch . ivy--regex-plus)
          (t . ivy--regex-fuzzy))
ivy-initial-inputs-alist nil))
#+END_SRC

*** Counsel

Counsel contains ivy enhancements for commonly-used functions.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package counsel
:demand
:diminish (ivy-mode . "")
:bind
(("C-x b" . ivy-switch-buffer)
    ("C-x C-f" . counsel-find-file))
:config
(define-key ivy-minibuffer-map [escape] 'minibuffer-keyboard-quit)

(ivy-add-actions
 'counsel-find-file
 `(("b" counsel-find-file-cd-bookmark-action "cd bookmark")
   ("s" counsel-find-file-as-root "open as root")
   ("m" counsel-find-file-mkdir-action "mkdir")
   ("r" (lambda (path) (rename-file path (read-string "New name: "))) "rename")
   ("f" find-file-other-window "other window")
   ("F" find-file-other-frame "other frame")
   ("p" (lambda (path) (with-ivy-window (insert (file-relative-name path default-directory)))) "insert relative path")
   ("P" (lambda (path) (with-ivy-window (insert path))) "insert absolute path")
   ("l" (lambda (path) "Insert org-link with relative path"
	  (with-ivy-window (insert (format "[[./%s]]" (file-relative-name path default-directory))))) "insert org-link (rel. path)")
   ("L" (lambda (path) "Insert org-link with absolute path"
	  (with-ivy-window (insert (format "[[%s]]" path)))) "insert org-link (abs. path)")))
(counsel-mode 1))

#+END_SRC

*** Swiper
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package swiper
:bind (("M-s" . swiper)))
#+END_SRC
** LSP-mode
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package lsp-mode
:commands lsp
:init)

(use-package lsp-ui
:commands lsp-ui-mode)

(use-package company-lsp
:commands company-lsp)
#+END_SRC
** Dired-x

Adds additional functionalit on top of dired

#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'dired-load-hook
        (lambda ()
            (load "dired-x")
            ;; Set dired-x global variables here.  For example:
            ;; (setq dired-guess-shell-gnutar "gtar")
            ;; (setq dired-x-hands-off-my-keys nil)
            ))
(add-hook 'dired-mode-hook
        (lambda ()
            ;; Set dired-x buffer-local variables here.  For example:
            ;; (dired-omit-mode 1)
            ))
#+END_SRC

* Utilities
Utilities which add functionality to emacs
** Yasnippet

A package with which you can insert code or text snippets based on templates.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package yasnippet
:config
(yas-global-mode 1)
(setq yas-triggers-in-field t))
#+END_SRC

** NeoTree and Icons
Displays the folder tree
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package all-the-icons)

(use-package neotree
  :init
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))
#+END_SRC
** Deft
An Emacs mode for quickly browsing, filtering, and editing directories of plain text notes, inspired by Notional Velocity
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package deft
  :config
	(setq deft-extensions '("org" "md" "markdown" "adoc" "asciidoc" "txt" "tex"))
  ;; (setq deft-text-mode 'org-mode)
  (setq deft-use-filename-as-title t)
  (setq deft-file-naming-rules '((noslash . "-")
                                 (nospace . "-")))
  (setq deft-ignore-file-regexp
    (concat "\\(?:"
    ".*sync-conflict.*"
    "\\)"))
  (setq deft-directory "~/Org")
  (setq deft-recursive nil)
  :general (tyrant-def "fd" 'deft))
#+END_SRC
** Magit

An inteface to version control system Git

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package magit
:defer t
:general (tyrant-def "gs" 'magit-status))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package evil-magit
:after magit)
#+END_SRC

* Org-mode

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org
    :ensure org-plus-contrib
    :config
    ; log time when task is marked DONE
    (setq org-log-done 'time)
    
    ; allow changing to any todo state from a menu
    (setq org-use-fast-todo-selection t)
    
    :custom-face 
    (variable-pitch ((t (:family "Fira Code" :height 1.0))))
    (org-document-title ((t (:weight bold :height 1.5))))
    (org-done ((t (:strike-through t :weight bold))))
    (org-headline-done ((t (:strike-through t))))
    (org-level-1 ((t (:height 1.1))))
    (org-level-2 ((t (:height 1.1))))
    (org-level-3 ((t (:height 1.1))))
    (org-image-actual-width (/ (display-pixel-width) 2)))
#+END_SRC

** Configuration
*** Auto-save
#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'auto-save-hook 'org-save-all-org-buffers)
#+END_SRC
*** Todo keywords

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "SOMEDAY(s)" "|" "DONE(d)" "FAILED(f)"))))
#+END_SRC

Automatically archive DONE entries

#+BEGIN_SRC emacs-lisp :tangle yes
(defun channing/archive-when-done ()
    "Archive current entry if it is marked as DONE (see `org-done-keywords')"
    (when (org-entry-is-done-p)
        (org-archive-to-archive-sibling)))
        
;(add-hook 'org-after-todo-state-change-hook
;    'channing/archive-when-done)
#+END_SRC

** Packages
*** org-modules
#+BEGIN_SRC emacs-lisp :tangle yes
(require 'org-install)
(setq org-modules '(org-habit))
(org-load-modules-maybe t)
#+END_SRC
*** EVIL-Org
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package evil-org
:after org
:config
(add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda ()
              (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+END_SRC
*** Org-Bullets
Make the header bullets look prettier
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-bullets
:config
(setq org-bullets-face-name "Inconsolata-12")
(setq org-bullets-bullet-list
        '("◉" "◎" "⚫" "○" "►" "◇"))
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
*** Org-Gcal

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-gcal
:config
(load (locate-user-emacs-file "secrets.org") :noerror :nomessage)
(add-hook 'emacs-startup-hook #'org-gcal-fetch)

(defun fetch-calendar ()
(when (internet-up-p) (org-gcal-fetch))))
#+END_SRC

*** Ox-Tufte
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ox-tufte)
#+END_SRC
*** Ox-Pandoc
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ox-pandoc
:config
(setq org-pandoc-menu-entry
'(
    (?l "to latex-pdf and open." org-pandoc-export-to-latex-pdf-and-open)
    (?L "to latex-pdf." org-pandoc-export-to-latex-pdf)
    (?4 "to html5 and open." org-pandoc-export-to-html5-and-open)
    (?$ "as html5." org-pandoc-export-as-html5))))
#+END_SRC
*** Habitica
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package habitica)
#+END_SRC
*** Babel
**** Gnuplot

An emacs major mode for interacting with gnuplot

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package gnuplot)
#+END_SRC

**** IPython
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ob-ipython
:defer t)
#+END_SRC
*** Org Download
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-download
:defer t
:init
(add-hook 'org-mode-hook 'org-download-enable)
(add-hook 'dired-mode-hook 'org-download-enable))
#+END_SRC
*** Toc-org

The =toc-org= package generates an up-to-date table of contents for us.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package toc-org
  :after org
  :init (add-hook 'org-mode-hook #'toc-org-enable))
#+END_SRC
** Capture

Set up capture templates

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-capture-templates
'(("t" "Todo" entry (file "~/Org/refile.org")
       "* TODO %?\n%U" :empty-lines 1)))
#+END_SRC

Refile configuration

#+BEGIN_SRC emacs-lisp :tangle yes
; Targets include this file and any file contributing to the agenda - up to 9 levels deep
(setq org-refile-targets (quote ((nil :maxlevel . 9)
(org-agenda-files :maxlevel . 9))))

; Use full outline paths for refile targets - we file directly with IDO
(setq org-refile-use-outline-path t)

; Targets complete directly with IDO
(setq org-outline-path-complete-in-steps nil)

; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))

; Use the current window for indirect buffer display
(setq org-indirect-buffer-display 'current-window)

;;;; Refile settings
; Exclude DONE state tasks from refile targets
(defun bh/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets"
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))

(setq org-refile-target-verify-function 'bh/verify-refile-target)
#+END_SRC

** Agenda

Set agenda settings

#+BEGIN_SRC emacs-lisp :tangle yes
;;warn me of any deadlines in next 7 days
(setq org-deadline-warning-days 7)
;;don't show tasks as scheduled if they are already shown as a deadline
(setq org-agenda-skip-scheduled-if-deadline-is-shown t)
;;set all files under ~/Org to be included in the agenda view
(setq org-agenda-files '("~/Org" "~/Org/GCal"))
;;don't give awarning colour to tasks with impending deadlines if they are scheduled to be done
(setq org-agenda-skip-deadline-prewarning-if-scheduled (quote pre-scheduled))
#+END_SRC

Custom composite agenda view
#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-agenda-custom-commands
'(("c" "Simple agenda view"
((agenda "")
(alltodo "")))
("h" "Daily habits" 
         ((agenda ""))
         ((org-agenda-show-log t)
          (org-agenda-ndays 7)
          (org-agenda-log-mode-items '(state))
          (org-agenda-skip-function '(org-agenda-skip-entry-if 'notregexp ":DAILY:")))))
)
#+END_SRC
** Variable Pitch Mode

We use a font that's easier on the eyes for long blocks of text

#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'org-mode-hook
          '(lambda ()
             (setq line-spacing 0.2) ;; Add more line padding for readability
             (variable-pitch-mode 1) ;; All fonts with variable pitch.
             (mapc
              (lambda (face) ;; Other fonts with fixed-pitch.
                (set-face-attribute face nil :inherit 'fixed-pitch))
              (list 'org-code
                    'org-link
                    'org-block
                    'org-table
                    'org-verbatim
                    'org-block-begin-line
                    'org-block-end-line
                    'org-meta-line
                    'org-document-info-keyword))))
#+END_SRC 

Other org-mode ricing configuratioin:

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-startup-indented t    ; indent each level of heading
    org-hide-emphasis-markers t ; hide the markers for italics and bold
    org-pretty-entities t       ; show entities as UTF8 characters
    org-src-tab-acts-natively t
    org-edit-src-content-indentation 0)
#+END_SRC

** Circular Bullets
Make bullets circular
#+BEGIN_SRC emacs-lisp :tangle yes
(font-lock-add-keywords 'org-mode
			'(("^ *\\([-]\\) "
			   0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•")))
			  ("\\(->\\)"
			   0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "→")))))
#+END_SRC

** Autosort
#+BEGIN_SRC emacs-lisp :tangle yes
(defun yant/org-entry-has-subentries ()
  "Any entry with subheadings"
  (let ((subtree-end (save-excursion (org-end-of-subtree t))))
    (save-excursion
      (org-back-to-heading)
      (forward-line 1)
      (when (< (point) subtree-end)
	(re-search-forward "^\*+ " subtree-end t)))))

(defun yant/org-entry-sort-by-property nil
  (let ((property (org-entry-get (point) "SORT" 'INHERIT)))
    (when (and (not (seq-empty-p property))
	       (yant/org-entry-has-subentries))
      (funcall #'org-sort-entries nil (string-to-char property) nil nil nil)))
  (let ((property_second (org-entry-get (point) "SORT_AFTER" 'INHERIT)))
    (when (and (not (seq-empty-p property_second))
	       (yant/org-entry-has-subentries))
      (funcall #'org-sort-entries nil (string-to-char property_second) nil nil nil))))

(defun yant/org-buffer-sort-by-property (&optional MATCH)
  (interactive)
  (org-map-entries #'yant/org-entry-sort-by-property MATCH 'file)
  (org-set-startup-visibility))

(add-hook 'org-mode-hook #'yant/org-buffer-sort-by-property)
#+END_SRC
** Babel

Enable support for various babel languages

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-confirm-babel-evaluate nil)
(org-babel-do-load-languages
'org-babel-load-languages
'((gnuplot . t)
(ipython .t)))
#+END_SRC

* LaTeX
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package latex
:ensure auctex
:config
(add-hook 'LaTeX-mode-hook
        (lambda ()
        (prettify-symbols-mode)))
        ;(smartparens-mode)
(add-hook 'LaTeX-mode-hook 'visual-line-mode)
(setq TeX-save-query nil)
(setq TeX-auto-save t)
(setq Tex-parse-self t)
(setq TeX-PDF-mode t)
 ;; Method for enabling forward and inverse search 
(setq TeX-source-correlate-method 'synctex)
;; inhibit the question to start a server process
(setq TeX-source-correlate-start-server t)
(setq TeX-view-program-selection '((output-pdf "Zathura"))))
(set-default 'preview-scale-function 2.0)
#+END_SRC

** RefTeX

Allow RefTeX to plug into AUCTeX

#+BEGIN_SRC emacs-lisp :tangle yes
(setq reftex-plug-into-AUCTeX t)
(setq reftex-extra-bindings t)
#+END_SRC

* Development
** Web
*** Web Mode
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package web-mode
:defer t
:mode "\\.p?html?$"
)

(use-package gulp-task-runner
:defer t)
#+END_SRC
* Writing
** Focus
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package focus
:config
(setq focus-mode-to-thing 
'((prog-mode . defun)
 (text-mode . paragraph)
 (org-mode . paragraph))))
#+END_SRC
** Olivetti

Writing environment

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package olivetti)
#+END_SRC

* Functions
** Compile org to pdf
#+BEGIN_SRC emacs-lisp :tangle yes
(defun org-compile-pdf ()
  (interactive)
  (if (memq 'org-latex-export-to-pdf after-save-hook)
      (progn
        (remove-hook 'after-save-hook 'org-latex-export-to-pdf t)
        (message "Disabled org pdf export on save for current buffer..."))
    (add-hook 'after-save-hook 'org-latex-export-to-pdf nil t)
    (message "Enabled org pdf export on save for current buffer...")))
#+END_SRC
** Writing Function

#+BEGIN_SRC emacs-lisp :tangle yes
(defvar writemode 1 "Set default writing mode state.")
(defun writing-mode ()
"Run focus and olivetti mode"
(interactive)
(cond
    ((= writemode 1)
        ;;(focus-mode t)
        (olivetti-mode t)
        (display-line-numbers-mode -1)
        (setq-local org-bullets-bullet-list '(" ")) ;; no bullets
        (setq-local writemode 2))
    ((= writemode 2)
        ;;(focus-mode -1)
        (olivetti-mode -1)
        (display-line-numbers-mode t)
        (setq-local display-line-numbers 'relative)
        (setq-local org-bullets-bullet-list
            '("◉" "◎" "⚫" "○" "►" "◇"))
        (setq-local writemode 1))))
#+END_SRC
** French mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (defvar frenchmode 1 "Set default French mode state.")
  (defun french-mode ()
    "Toggle french spellchecking"
    (interactive)
    (cond
     ((= frenchmode 1)
      (message "Enabled French Mode")
      (flycheck-mode 1)
      (setq flycheck-checker 'francais-grammalecte)
      (flyspell-mode 1)
      ; (setq ispell-local-dictionary "francais")
      (ispell-change-dictionary "francais")
      (setq frenchmode 2))
     ((= frenchmode 2)
      (message "Disabled French mode")
      (flycheck-mode -1)
      (flyspell-mode -1)
      (setq frenchmode 1))))
#+END_SRC
** English Mode
#+BEGIN_SRC emacs-lisp :tangle yes
(defvar englishmode 1 "Set default English mode state.")
(defun english-mode ()
"Toggle English spellchecking"
(interactive)
(cond
    ((= englishmode 1)
        (message "Enabled English Mode")
        (flycheck-mode 1)
        (setq flycheck-checker 'proselint)
        (flyspell-mode 1)
        ;(setq ispell-current-dictionary "en_CA")
        (ispell-change-dictionary "english")
        (setq englishmode 2))
    ((= englishmode 2)
        (message "Disabled English mode")
        (flycheck-mode -1)
        (flyspell-mode -1)
        (setq englishmode 1))))
#+END_SRC
** Ispell

#+BEGIN_SRC emacs-lisp :tangle yes
;; find aspell and hunspell automatically
(use-package flyspell
:config
  (setq ispell-program-name "aspell"))
#+END_SRC
** Flycheck-grammalecte
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package flycheck-grammalecte
:config
(setq flycheck-grammalecte-report-spellcheck t)
(setq flycheck-grammalecte-report-apos nil)
(setq flycheck-grammalecte-report-nbsp nil)
(setq flycheck-grammalecte-report-esp nil))
#+END_SRC
** Flycheck-proselint
Set up emacs to use proselint, a linter for prose (what a surprise!)
#+BEGIN_SRC emacs-lisp :tangle yes
(flycheck-define-checker proselint
  "A linter for prose."
  :command ("proselint" source-inplace)
  :error-patterns
  ((warning line-start (file-name) ":" line ":" column ": "
	    (id (one-or-more (not (any " "))))
	    (message) line-end))
  :modes (text-mode markdown-mode gfm-mode org-mode))

(add-to-list 'flycheck-checkers 'proselint)
#+END_SRC
* Post Initialization
** Restore garbage collector

Reset garbage collector to a reasonable default. If freezing or stuttering occurs, reduce gc-cons-threshold.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq gc-cons-threshold 16777216
      gc-cons-percentage 0.1)
#+END_SRC

#+TITLE: Alex Koen's Emacs configuration

I've now been using Emacs as my primary editor for over a year. It's phenomenal—if somewhat cubersome at times—and I have learned a great deal about myself throughout this journey. I have made every possible effort to write this code as properly as possible and with the appropriate documentation. However, there are bound to be errors and inconsistencies. If you are looking for inspiration, here are my favourite sources:

[[https://github.com/hlissner/doom-emacs]]
[[https://github.com/jethrokuan/.emacs.d/]]
[[https://github.com/mwfogleman/.emacs.d/]]
[[https://github.com/rememberYou/.emacs.d]]

Alright, let's do this:
* Initialization
** Lexical binding

#+BEGIN_SRC emacs-lisp :tangle yes :comments no
;;; init.el --- The personal Emacs configuration of Alex Koen -*- lexical-binding: t; -*-
#+END_SRC

** Personal Information

#+BEGIN_SRC emacs-lisp :tangle yes
(setq user-full-name "Alex Koen"
      user-mail-address "arw.koen@gmail.com")
#+END_SRC

** Optimizations
*** Garbage collector

The garbage collector eats up a lot of time during startup, so turn up its memory threshold to prevent it from getting triggered.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq gc-cons-threshold 402653184
      gc-cons-percentage 0.6)
#+END_SRC

** Set Directories

Note that system directories are set in init.el

#+BEGIN_SRC emacs-lisp :tangle yes
(defconst drive-dir "~/Drive/"
  "The root Drive directory, where all documents are stored.")

(defconst archive-dir (concat drive-dir "Archive/")
  "Archive directory")

(defconst tasks-dir (concat drive-dir "Tasks/")
  "Tasks directory")

(defconst brain-dir (concat drive-dir "Brain/org/")
  "Braindump directory")

(defconst dotfiles-dir "~/.dotfiles"
  "Dotfiles directory")
#+END_SRC

Move files are folders to appropriate locations:
#+BEGIN_SRC emacs-lisp :tangle yes
(setq bookmarks-default-file (concat emacs-etc-dir "bookmarks")
      tramp-auto-save-directory (concat emacs-cache-dir "tramp-auto-save/")
      tramp-backup-directory-alist backup-directory-alist
      tramp-persistency-file-name (concat emacs-cache-dir "tramp-persistency.el"))
#+END_SRC

** Appearance
*** Theme

Doom one is beautiful

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package doom-themes
  :config
  (load-theme 'doom-one t)
  (doom-themes-org-config))
#+END_SRC

*** Text
**** Font

#+BEGIN_SRC emacs-lisp :tangle yes
(set-frame-font "Fira Code 12")
(set-face-attribute 'default nil :height 100)
#+END_SRC

*** Disable unecessary UI elements
**** Tool Bar

#+BEGIN_SRC emacs-lisp :tangle yes
(menu-bar-mode -1)
(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
#+END_SRC

**** Startup Screen

#+BEGIN_SRC emacs-lisp :tangle yes
(setq inhibit-startup-screen t)	; inhibit useless and old-school startup screen
#+END_SRC

*** Prompts

Make yes or no prompts be y or n prompts

#+BEGIN_SRC emacs-lisp :tangle yes
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Relative line numbers

#+BEGIN_SRC emacs-lisp :tangle yes
(global-display-line-numbers-mode t)
(setq display-line-numbers-type 'relative
      display-line-numbers-grow-only t
      display-line-numbers-width-start t)
#+END_SRC

*** Show matching parentheses

#+BEGIN_SRC emacs-lisp :tangle yes
(setq show-paren-delay 0)
(show-paren-mode 1)
#+END_SRC

*** Smooth Scrolling
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package smooth-scrolling
  :init
  (setq smooth-scroll-margin 5
        scroll-conservatively 101
        scroll-preserve-screen-position t
        auto-window-vscroll nil)
  :config
  (setq scroll-margin 5))
#+END_SRC
*** All the icons
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package all-the-icons
  :defer t)
#+END_SRC

*** Doom-modeline

A fancy and fast mode-line inspired by minimalistic design

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package doom-modeline
  :init (doom-modeline-mode 1))
#+END_SRC

** Revert

Automatically reload buffers on file change

#+BEGIN_SRC emacs-lisp :tangle yes
(global-auto-revert-mode 1)
#+END_SRC

** Backups

By default, Emacs saves backups relative to the current directory. This is abhorrent. We change this.

# TODO fix auto-save

#+BEGIN_SRC emacs-lisp :tangle yes
(setq make-backup-files t ; make backups file even when in version controlled dir
      backup-directory-alist (list (cons "." (concat emacs-cache-dir "backups/")))
      backup-by-copying t  ; Don't delink hardlinks
      version-control t  ; Use version numbers on backups
      delete-old-versions t  ; Automatically delete excess backups
      kept-new-versions 20  ; how many of the newest versions to keep
      kept-old-versions 5  ; and how many of the old
      auto-save-default nil) ; do not auto-save
#+END_SRC

** Better Defaults
#+BEGIN_SRC emacs-lisp :tangle yes
(setq-default vc-follow-symlinks t           ; don't ask for confirmation when opening symlinked file
              indent-tabs-mode nil           ; prefer spaces
              tab-width	4                    ; set width for tabs
              ring-bell-function 'ignore     ; silent bell when you make a mistake
              x-select-enable-clipboard t    ; allow pasting selection outside of emacs
              initial-major-mode 'org-mode
              delete-by-moving-to-trash t    ; move files to trash when deleting
              sentence-end-double-space nil) ; end sentences with a single space
#+END_SRC

* Keybindings
** Unbind RET

Unbind return from evil, so that org-return-follows-link works.

#+BEGIN_SRC emacs-lisp :tangle yes
(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "RET") nil))
#+END_SRC

** General

Space is the best leader key.

#+BEGIN_SRC emacs-lisp :tangle yes
;; load general
(use-package general
  :after which-key
  :config
  (general-override-mode 1)
  (general-auto-unbind-keys)

  (general-define-key
   :keymaps '(normal visual insert emacs motion)
   :prefix "SPC"
   :non-normal-prefix "M-SPC"
   
   ;; Misc
   "u" 'universal-argument

   ;; Buffer
   "bb" 'switch-to-buffer
   "`" 'evil-switch-to-windows-last-buffer

   ;; Code
   "cc" 'counsel-compile
   "cr" 'lsp-rename
   "cl" 'lsp-find-definition

   ;; Files
   "." 'find-file
   "fl" 'load-file
   "ff" 'dired-jump
   "fr" 'counsel-recentf
   "fs" 'save-buffer

   ;; Magit
   "gg" 'magit-status
   "gfh" 'magit-log-buffer-file

   ;; Language
   "le" 'english-mode
   "lg" 'writing-mode
   "ls" 'english-mode
   "lb" 'ispell-buffer

   ;; Org mode
   "na" 'org-agenda
   "nc" 'org-capture
   "nr" 'org-roam
   "ni" 'org-roam-insert
   "nf" 'org-roam-find-file
   "ng" 'org-roam-graph-show
   "nb" 'my/org-visit-bibliography
   "njj" 'org-journal-new-entry

   ;; Search
   "sb" 'swiper
   "sp" 'counsel-projectile-rg

   ;; Projects
   "SPC" 'projectile-find-file
   "pb" 'projectile-switch-to-buffer
   "pp" 'counsel-projectile-switch-project
   "pd" 'my/projectile-find-file-in-project-dotfiles
   "pt" 'my/projectile-find-file-in-project-tasks
   "pc" 'my/projectile-find-file-in-project-config

   ;; Terminal
   "tn" 'vterm


   ))
#+END_SRC

** Hydra

[[https://github.com/abo-abo/hydra][Hydra]] is a package that allows for families of short keybindings to be defined.

#+BEGIN_QUOTE
Once you summon the Hydra through the prefixed binding (the body + any one head), all heads can be called in succession with only a short extension.

The Hydra is vanquished once Hercules, any binding that isn't the Hydra's head, arrives. Note that Hercules, besides vanquishing the Hydra, will still serve his original purpose, calling his proper command. This makes the Hydra very seamless, it's like a minor mode that disables itself auto-magically.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package hydra
  :bind ("C-x C-=" . hydra-zoom/body))
#+END_SRC

*** Zooming

#+BEGIN_SRC emacs-lisp :tangle yes
(defhydra hydra-zoom ()
  "zoom"
  ("+" text-scale-increase "in")
  ("=" text-scale-increase "in")
  ("-" text-scale-decrease "out")
  ("_" text-scale-decrease "out")
  ("0" (text-scale-adjust 0) "reset")
  ("q" nil "quit" :color blue))
#+END_SRC

* Core Utilities

Utilities which are essential for rational operation of Emacs

** Exec Path From Shell

This sets the variable exec-path to the normal shell's PATH variable. This doesn't normally get set in daemon mode.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package exec-path-from-shell
  :config
  (exec-path-from-shell-initialize))
#+END_SRC
** Which Key

A small buffer which shows the list of commands you can execute next.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package which-key
  :init
  (setq which-key-separator " ")
  (setq which-key-prefix-prefix "+")
  :config
  (which-key-mode 1))
#+END_SRC

** EVIL

Allows for traditional vim bindings inside of emacs

#+BEGIN_SRC emacs-lisp :tangle yes
;; load evil
(use-package evil
  :init ;; tweak evil's configuration before loading it
  (setq evil-search-module 'evil-search)
  (setq evil-want-C-u-scroll t)
  :bind
  ;; (("C-f" . forward-word)
  ;; ("C-b" . backward-word))
  :config ;; tweak evil after loading it
  ;; Make movement keys work like they should
  (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
  (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
  (define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
  (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
                                        ; Make horizontal movement cross lines                                    
  (setq-default evil-cross-lines t)
  (evil-mode 1))
#+END_SRC

*** ESC quits everything

This code allows us to quit basically everything using ESC.

#+BEGIN_SRC emacs-lisp :tangle yes
(defun minibuffer-keyboard-quit ()
  "Abort recursive edit.
    In Delete Selection mode, if the mark is active, just deactivate it;
    then it takes a second \\[keyboard-quit] to abort the minibuffer."
  (interactive)
  (if (and delete-selection-mode transient-mark-mode mark-active)
      (setq deactivate-mark  t)
    (when (get-buffer "*Completions*")
      (delete-windows-on "*Completions*"))
    (abort-recursive-edit)))
(define-key evil-normal-state-map [escape] 'keyboard-quit)
(define-key evil-visual-state-map [escape] 'keyboard-quit)
(define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
#+END_SRC

*** evil-surround

This package emulates surround.vim by Tim Pope.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package evil-surround
  :config
  (global-evil-surround-mode 1))
#+END_SRC

*** evil-nerd-commenter
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package evil-nerd-commenter
  :init
  (evilnc-default-hotkeys))
#+END_SRC

** Completion
*** Ivy

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ivy
  :defer 1 ;; wait one second before loading
  :config
  (setq ivy-height 15
        ivy-wrap t
        ;; don't use ^ as initial input
        ivy-initial-inputs-alist nil
        ;; highlight til EOL
        ivy-format-function #'ivy-format-function-line
        ;; don't show recent files in switch-buffer
        ivy-use-virtual-buffers nil
        ;; don't quit minibuffer on delete-error
        ivy-on-del-error-function nil
        ;; enable ability to select prompt
        ivy-use-selectable-prompt t)

  (ivy-mode 1))
#+END_SRC
*** Ivy-Rich

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ivy-rich
  :after ivy
  :preface
  (defun ivy-rich-branch-candidate (candidate)
    "Displays the branch candidate of the candidate for ivy-rich."
    (let ((candidate (expand-file-name candidate ivy--directory)))
      (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
          ""
        (format "%s%s"
                (propertize
                 (replace-regexp-in-string abbreviated-home-dir "~/"
                                           (file-name-directory
                                            (directory-file-name candidate)))
                 'face 'font-lock-doc-face)
                (propertize
                 (file-name-nondirectory
                  (directory-file-name candidate))
                 'face 'success)))))

  (defun ivy-rich-compiling (candidate)
    "Displays compiling buffers of the candidate for ivy-rich."
    (let* ((candidate (expand-file-name candidate ivy--directory)))
      (if (or (not (file-exists-p candidate)) (file-remote-p candidate)
              (not (magit-git-repo-p candidate)))
          ""
        (if (my/projectile-compilation-buffers candidate)
            "compiling"
          ""))))

  (defun ivy-rich-file-group (candidate)
    "Displays the file group of the candidate for ivy-rich"
    (let ((candidate (expand-file-name candidate ivy--directory)))
      (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
          ""
        (let* ((group-id (file-attribute-group-id (file-attributes candidate)))
               (group-function (if (fboundp #'group-name) #'group-name #'identity))
               (group-name (funcall group-function group-id)))
          (format "%s" group-name)))))

  (defun ivy-rich-file-modes (candidate)
    "Displays the file mode of the candidate for ivy-rich."
    (let ((candidate (expand-file-name candidate ivy--directory)))
      (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
          ""
        (format "%s" (file-attribute-modes (file-attributes candidate))))))

  (defun ivy-rich-file-size (candidate)
    "Displays the file size of the candidate for ivy-rich."
    (let ((candidate (expand-file-name candidate ivy--directory)))
      (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
          ""
        (let ((size (file-attribute-size (file-attributes candidate))))
          (cond
           ((> size 1000000) (format "%.1fM " (/ size 1000000.0)))
           ((> size 1000) (format "%.1fk " (/ size 1000.0)))
           (t (format "%d " size)))))))

  (defun ivy-rich-file-user (candidate)
    "Displays the file user of the candidate for ivy-rich."
    (let ((candidate (expand-file-name candidate ivy--directory)))
      (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
          ""
        (let* ((user-id (file-attribute-user-id (file-attributes candidate)))
               (user-name (user-login-name user-id)))
          (format "%s" user-name)))))

  (defun ivy-rich-switch-buffer-icon (candidate)
    "Returns an icon for the candidate out of `all-the-icons'."
    (with-current-buffer
        (get-buffer candidate)
      (let ((icon (all-the-icons-icon-for-mode major-mode :height 0.9)))
        (if (symbolp icon)
            (all-the-icons-icon-for-mode 'fundamental-mode :height 0.9)
          icon))))
  :config
  (plist-put ivy-rich-display-transformers-list
             'counsel-find-file
             '(:columns
               ((ivy-rich-candidate               (:width 73))
                (ivy-rich-file-user               (:width 8 :face font-lock-doc-face))
                (ivy-rich-file-group              (:width 4 :face font-lock-doc-face))
                (ivy-rich-file-modes              (:width 11 :face font-lock-doc-face))
                (ivy-rich-file-size               (:width 7 :face font-lock-doc-face))
                (ivy-rich-file-last-modified-time (:width 30 :face font-lock-doc-face)))))
  (plist-put ivy-rich-display-transformers-list
             'ivy-switch-buffer
             '(:columns
               ((ivy-rich-switch-buffer-icon       (:width 2))
                (ivy-rich-candidate                (:width 40))
                (ivy-rich-switch-buffer-size       (:width 7))
                (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
                (ivy-rich-switch-buffer-major-mode (:width 20 :face warning)))
               :predicate (lambda (cand) (get-buffer cand))))
  (ivy-rich-mode 1))
#+END_SRC

**** Flx

Sublime-text fuzzy matching for Emacs. Package used following Doom's ivy configuration.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package flx
  :defer t  ; loaded by ivy
  :init
  (setq ivy-re-builders-alist
        '((counsel-ag . ivy--regex-plus)
          (counsel-rg . ivy--regex-plus)
          (counsel-grep . ivy--regex-plus)
          (swiper . ivy--regex-plus)
          (swiper-isearch . ivy--regex-plus)
          (t . ivy--regex-fuzzy))
        ivy-initial-inputs-alist nil))
#+END_SRC

*** Counsel

Counsel contains ivy enhancements for commonly-used functions.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package counsel
  :demand
  :diminish (ivy-mode . "")
  :bind
  (("C-x b" . ivy-switch-buffer)
   ("C-x C-f" . counsel-find-file))
  :init
  (setq recentf-save-file (concat emacs-cache-dir "recentf"))
  :config
  (define-key ivy-minibuffer-map [escape] 'minibuffer-keyboard-quit)

  (ivy-add-actions
   'counsel-find-file
   `(("b" counsel-find-file-cd-bookmark-action "cd bookmark")
     ("s" counsel-find-file-as-root "open as root")
     ("m" counsel-find-file-mkdir-action "mkdir")
     ("r" (lambda (path) (rename-file path (read-string "New name: "))) "rename")
     ("f" find-file-other-window "other window")
     ("F" find-file-other-frame "other frame")
     ("p" (lambda (path) (with-ivy-window (insert (file-relative-name path default-directory)))) "insert relative path")
     ("P" (lambda (path) (with-ivy-window (insert path))) "insert absolute path")
     ("l" (lambda (path) "Insert org-link with relative path"
            (with-ivy-window (insert (format "[[./%s]]" (file-relative-name path default-directory))))) "insert org-link (rel. path)")
     ("L" (lambda (path) "Insert org-link with absolute path"
            (with-ivy-window (insert (format "[[%s]]" path)))) "insert org-link (abs. path)")))
  (counsel-mode 1))

#+END_SRC

**** Counsel-projectile

Allows for further integration between ivy and projectile.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package counsel-projectile
  :after projectile
  :config
  (counsel-projectile-mode 1))
#+END_SRC

*** Swiper
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package swiper
  :bind (("M-s" . swiper)))
#+END_SRC
** Projectile

Project management.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package projectile
  :init
  (setq projectile-cache-file (concat emacs-cache-dir "projectile.cache")
        projectile-enable-caching t
        projectile-known-projects-file (concat emacs-cache-dir "projectile.projects")
        projectile-require-project-root 'prompt
        projectile-files-cache-expire 604800 ; expire after a week
        projectile-sort-order 'recentf
        projectile-use-git-grep t) ; use git-grep for text searches
  :config
  (projectile-mode +1)
  (setq projectile-project-root-files-bottom-up
        (append '(".project"))))
#+END_SRC

*** Projectile for specific projects

#+BEGIN_SRC emacs-lisp :tangle yes
(defun my/projectile-find-file-in-project-config ()
  (interactive)
  (let ((default-directory emacs-dir))
    (counsel-projectile-find-file)))

(defun my/projectile-find-file-in-project-tasks ()
  (interactive)
  (let ((default-directory tasks-dir))
    (counsel-projectile-find-file)))

(defun my/projectile-find-file-in-project-dotfiles ()
  (interactive)
  (let ((default-directory dotfiles-dir))
    (counsel-projectile-find-file)))
#+END_SRC
** Dired-x

Adds additional functionality on top of dired.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq dired-listing-switches "-aBhl  --group-directories-first")
(add-hook 'dired-load-hook
          (lambda ()
            (load "dired-x")
            ;; Set dired-x global variables here.  For example:
            ;; (setq dired-guess-shell-gnutar "gtar")
            ;; (setq dired-x-hands-off-my-keys nil)
            (setq dired-auto-revert-buffer t)
            ))
(add-hook 'dired-mode-hook
          (lambda ()
            ;; Set dired-x buffer-local variables here.  For example:
            ;; (dired-omit-mode 1)
            ))
#+END_SRC

** libvterm

An Emacs module which implements a bridge to [[https://github.com/neovim/libvterm][libvterm]] to display a terminal within a buffer.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package vterm)
#+END_SRC
*** evil-snipe

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package evil-snipe
  :init
  (setq evil-snipe-smart-case t
        evil-snipe-scope 'line
        evil-snipe-repeat-scope 'visible
        evil-snipe-char-fold t)
  :config 
  (evil-snipe-mode +1)
  (evil-snipe-override-mode +1))
#+END_SRC

** Smartparens

[[https://github.com/Fuco1/smartparens][Utility]] for managing parenthesis in Emacs

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package smartparens
  :defer 1
  :init
  ;; Don't highlight - overly distracting
  (setq sp-highlight-pair-overlay nil
        sp-highlight-wrap-overlay nil
        sp-highlight-wrap-tag-overlay nil)
  :config
  ;; automatically add newline between braces
  (dolist (brace '("(" "{" "["))
    (sp-pair brace nil :post-handlers '(:add ("||\n[i]" "RET"))))
  (smartparens-global-mode 1))
#+END_SRC

* Utilities
Utilities which add functionality to emacs
** Yasnippet

A package with which you can insert code or text snippets based on templates.

We define a function to autocomplete snippets. See [[https://github.com/joaotavora/yasnippet/issues/998]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package yasnippet
  :init
  (defun my/yas-try-expanding-auto-snippets ()
    (when (and (boundp 'yas-minor-mode) yas-minor-mode)
      (let ((yas-buffer-local-condition ''(require-snippet-condition . auto)))
        (yas-expand))))
  (add-hook 'post-command-hook #'my/yas-try-expanding-auto-snippets)
  :config
  (yas-global-mode 1)
  (setq yas-triggers-in-field t))
#+END_SRC

** NeoTree and Icons
Displays the folder tree
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package all-the-icons)

(use-package neotree
  :init
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))
#+END_SRC

** Magit

An inteface to version control system Git

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package magit
  :defer t
  :init
  (setq transient-history-file (concat emacs-etc-dir "transient/history")))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package evil-magit
  :after magit)
#+END_SRC

** Aggressive-indent

# Forces proper indenting after every change.

# #+BEGIN_SRC emacs-lisp :tangle yes
# (use-package aggressive-indent
# :init
# (global-aggressive-indent-mode 1))
# #+END_SRC
* Org-mode
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org
  :hook
  (org-mode . visual-line-mode)
  :custom
  
  ;; calendar ical export
  (org-icalendar-include-todo nil)
  (org-icalendar-store-UID nil)
  (org-icalendar-timezone nil)
  (org-icalendar-use-deadline '(event-if-todo-not-done))
  (org-icalendar-use-scheduled '(event-if-todo-not-done))
  (org-icalendar-combined-agenda-file (concat tasks-dir "calendar.ics"))
  :init
  (setq org-directory tasks-dir
        org-archive-location (concat archive-dir "Tasks/archive_" (format-time-string "%Y") ".org::datetree/")
        org-use-fast-todo-selection t                                     ; allow changing to any todo state from a menu
        org-enforce-todo-dependencies t                                   ; block setting task to DONE if there are incomplete subtasks
        org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id ; use unique ID's for links
        org-id-locations-file (concat tasks-dir ".orgids")
        org-clone-delete-id t
        org-catch-invisible-edits 'show
        org-confirm-babel-evaluate nil                                    ; do not ask for confirmation
        org-return-follows-link t
        org-startup-indented t                                            ; indent each level of heading
        org-hide-emphasis-markers t                                       ; hide the markers for italics and bold
        org-pretty-entities t                                             ; show entities as UTF8 characters
        org-image-actual-width (/ (display-pixel-width) 3)
        org-log-repeat nil)                                               ; do not record a closing timestamp

  :custom-face 
  (variable-pitch ((t (:family "Whitney" :height 1.0)))) ; Alternatively, Office Code Pro is second best
  (org-document-title ((t (:weight bold :height 1.5))))
  (org-done ((t (:strike-through t :weight bold))))
  (org-headline-done ((t (:strike-through t))))
  (org-level-1 ((t (:height 1.1))))
  (org-level-2 ((t (:height 1.1))))
  (org-level-3 ((t (:height 1.1))))
  (org-link ((t (:underline t)))))

#+END_SRC

** Configuration
*** Todo keywords

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
              (sequence "SOMEDAY(s@)" "WAITING(w@)" "HOLD(h@)" "|" "CANCELLED(c@)")))
      org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
              ("WAITING" ("WAITING" . t))
              ("HOLD" ("WAITING") ("HOLD" . t))
              (done ("WAITING") ("HOLD"))
              ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
              ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
              ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
#+END_SRC
*** Emphasis

(enabled) Replace underline with highlight
#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-emphasis-alist
      (quote (("*" bold)
              ("/" italic)
              ("_" (:background "#595959"))
              ("=" org-verbatim verbatim)
              ("~" org-code verbatim)
              ("+"
               (:strike-through t))
              )))
#+END_SRC

(disabled) Custom highlight face. From [[https://emacs.stackexchange.com/questions/38216/custom-faces-in-org-9-0]].

#+BEGIN_SRC emacs-lisp :tangle no
;;; Create highlighter face for marking up text in org-mode
(defface font-lock-highlight-face
  '((t (:inherit org-default :background "#585858")))
  "Face for highlighting text")
(defvar font-lock-highlight-face 'font-lock-highlight-face)

;;; Add keywords
(defun add-highlight-keywords()
  "adds custom keywords for highlighting text in org-mode."
  (font-lock-add-keywords nil
                          '(("\\(!\\)\\([^[:space:]][^\n\r\t]+[^[:space:]]\\)\\(!\\)" . 'font-lock-highlight-face ))))
(add-hook 'org-mode-hook 'add-highlight-keywords)
#+END_SRC
*** Capture

Set up capture templates. The backquoted list allows me to selectively evaluate parts of the list with a , (in this case the concat statement).

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-capture-templates
      `(("t" "Todo" entry (file "~/Drive/Tasks/refile.org")
         "* TODO %?")
        ("p" "Protocol" entry (file "~/Drive/Tasks/refile.org")
         "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
        ("L" "Protocol Link" entry (file "~/Drive/Tasks/refile.org")
         "%(org-web-tools--url-as-readable-org \"%:link\")" :immediate-finish t)))

#+END_SRC

Refile configuration

#+BEGIN_SRC emacs-lisp :tangle yes
                                        ; Targets include this file and any file contributing to the agenda - up to 9 levels deep
(setq org-refile-targets (quote ((nil :maxlevel . 1)
                                 (org-agenda-files :maxlevel . 1))))

                                        ; Use full outline paths for refile targets - we file directly with IDO
(setq org-refile-use-outline-path t)

                                        ; Targets complete directly with IDO
(setq org-outline-path-complete-in-steps nil)

                                        ; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))

                                        ; Use the current window for indirect buffer display
(setq org-indirect-buffer-display 'current-window)

;;;; Refile settings
                                        ; Exclude DONE state tasks from refile targets
(defun bh/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets"
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))

(setq org-refile-target-verify-function 'bh/verify-refile-target)
#+END_SRC

*** Agenda

Set agenda settings

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-deadline-warning-days 7                                            ;;warn me of any deadlines in next 7 days
      org-agenda-skip-scheduled-if-deadline-is-shown t                       ;;don't show tasks as scheduled if they are already shown as a deadline
      org-agenda-files '("~/Drive/Tasks")                                    ;; Set agenda files
      org-agenda-skip-deadline-prewarning-if-scheduled (quote pre-scheduled) ;;don't give awarning colour to tasks with impending deadlines if they are scheduled to be done
      org-agenda-skip-scheduled-if-done t                                    ;; Skip done items in agenda
      org-agenda-skip-deadline-if-done t
      org-agenda-tags-column -100                                            ;; align tags
      org-agenda-skip-unavailable-files t)
#+END_SRC

*** Variable Pitch Mode

We use a font that's easier on the eyes for long blocks of text

#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'org-mode-hook
          '(lambda ()
             (setq line-spacing 0.2) ;; Add more line padding for readability
             (mapc
              (lambda (face) ;; Other fonts with fixed-pitch.
                (set-face-attribute face nil :inherit 'fixed-pitch))
              (list 'org-code
                    'org-link
                    'org-block
                    'org-table
                    'org-verbatim
                    'org-block-begin-line
                    'org-block-end-line
                    'org-meta-line
                    'org-document-info-keyword))))
#+END_SRC 

*** SRC blocks
#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-src-tab-acts-natively t
      org-src-preserve-indentation t) ; use native major-mode indentation
#+END_SRC
*** Circular Bullets
Make bullets circular
#+BEGIN_SRC emacs-lisp :tangle yes
(font-lock-add-keywords 'org-mode
                        '(("^ *\\([-]\\) "
                           0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•")))
                          ("\\(->\\)"
                           0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "→")))))
#+END_SRC

*** Autosort
#+BEGIN_SRC emacs-lisp :tangle yes
(defun my/org-entry-has-subentries ()
  "Any entry with subheadings"
  (let ((subtree-end (save-excursion (org-end-of-subtree t))))
    (save-excursion
      (org-back-to-heading)
      (forward-line 1)
      (when (< (point) subtree-end)
        (re-search-forward "^\*+ " subtree-end t)))))

(defun my/org-entry-sort-by-property nil
  (let ((property (org-entry-get (point) "SORT" 'INHERIT)))
    (when (and (not (seq-empty-p property))
               (my/org-entry-has-subentries))
      (funcall #'org-sort-entries nil (string-to-char property) nil nil nil)))
  (let ((property_second (org-entry-get (point) "SORT_AFTER" 'INHERIT)))
    (when (and (not (seq-empty-p property_second))
               (my/org-entry-has-subentries))
      (funcall #'org-sort-entries nil (string-to-char property_second) nil nil nil))))

(defun my/org-buffer-sort-by-property (&optional MATCH)
  (interactive)
  (org-map-entries #'my/org-entry-sort-by-property MATCH 'file)
  (org-set-startup-visibility))

                                        ;(add-hook 'org-mode-hook #'my/org-buffer-sort-by-property)
#+END_SRC
** Packages
*** Babel
**** ob-mermaid
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ob-mermaid
  :custom
  (ob-mermaid-cli-path "~/node_modules/.bin/mmdc"))
#+END_SRC
*** EVIL-Org
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package evil-org
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda ()
              (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+END_SRC

*** org-Bullets
Make the header bullets look prettier
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-bullets
  :init
  (setq org-bullets-face-name "Inconsolata-12")
  (setq org-bullets-bullet-list
        '("◉" "◎" "⚫" "○" "►" "◇"))
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
*** org-checklist

Provides additional options for org checklists such as resetting when parent is marked DONE.

#+BEGIN_SRC emacs-lisp :tangle yes
(require 'org-checklist)
#+END_SRC
*** org-download
Automatically insert images via drag-and-drop

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-download
  :after org
  :config
  (setq org-download-screenshot-method "maim -s %s")
  (defun my-org-download-method (link)
    "This is a helper function for org-download.
It creates a folder in the root directory named after the
org filename (sans extension) and puts all images from that file in there.
Inspired by https://github.com/daviderestivo/emacs-config/blob/6086a7013020e19c0bc532770e9533b4fc549438/init.el#L701"
    (let ((filename
           (file-name-nondirectory
            (car (url-path-and-query
                  (url-generic-parse-url link)))))
          ;; Create folder name with current buffer name, and place in root dir
          (dirname (concat "./img/"
                           (replace-regexp-in-string " " "_" (downcase (file-name-base buffer-file-name))))))

      ;; Add timestamp to filename
      (setq filename-with-timestamp (format "%s%s.%s"
                                            (file-name-sans-extension filename)
                                            (format-time-string org-download-timestamp)
                                            (file-name-extension filename)))
      ;; Create folder if necessary
      (unless (file-exists-p dirname)
        (make-directory dirname))
      (expand-file-name filename-with-timestamp dirname)))
  (setq org-download-method 'my-org-download-method))
#+END_SRC
*** org-journal
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-journal
  :custom
  (org-journal-cache-dir emacs-cache-dir)
  (org-journal-date-prefix "#+TITLE: ")
  (org-journal-dir (concat brain-dir "journal/"))
  (org-journal-file-format "%Y-%m-%d.org")
  (org-journal-date-format "%A %Y-%m-%d")
  (org-journal-time-format "" ))

#+END_SRC
*** org-modules
#+BEGIN_SRC emacs-lisp :tangle yes
(require 'org-install)
(setq org-modules '(org-habit))
(org-load-modules-maybe t)
#+END_SRC

*** org-oxclip
Let you copy formatted org-mode content to the clipboard. Requires the package =xclip= to run.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package htmlize
  :after org)
(use-package ox-clip
  :after org)
#+END_SRC
*** org-Protocol

Allows for external applications to trigger custom actions without external dependencies

#+BEGIN_SRC emacs-lisp :tangle yes
(require 'org-protocol)

(defun transform-square-brackets-to-round-ones(string-to-transform)
  "Transforms [ into ( and ] into ), other chars left unchanged."
  (concat 
   (mapcar #'(lambda (c) (if (equal c ?[) ?\( (if (equal c ?]) ?\) c))) string-to-transform))
  )

#+END_SRC

*** org-ref
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-ref
  :after org)

(use-package org-ref-ox-hugo
  :straight (:host github :repo "jethrokuan/org-ref-ox-hugo" :branch "develop")
  :after org org-ref ox-hugo
  :config
  (add-to-list 'org-ref-formatted-citation-formats
               '("md"
                 ("article" . "${author}, *${title}*, ${journal}, *${volume}(${number})*, ${pages} (${year}). ${doi}")
                 ("inproceedings" . "${author}, *${title}*, In ${editor}, ${booktitle} (pp. ${pages}) (${year}). ${address}: ${publisher}.")
                 ("book" . "${author}, *${title}* (${year}), ${address}: ${publisher}.")
                 ("phdthesis" . "${author}, *${title}* (Doctoral dissertation) (${year}). ${school}, ${address}.")
                 ("inbook" . "${author}, *${title}*, In ${editor} (Eds.), ${booktitle} (pp. ${pages}) (${year}). ${address}: ${publisher}.")
                 ("incollection" . "${author}, *${title}*, In ${editor} (Eds.), ${booktitle} (pp. ${pages}) (${year}). ${address}: ${publisher}.")
                 ("proceedings" . "${editor} (Eds.), _${booktitle}_ (${year}). ${address}: ${publisher}.")
                 ("unpublished" . "${author}, *${title}* (${year}). Unpublished manuscript.")
                 ("misc" . "${author} (${year}). *${title}*. Retrieved from [${howpublished}](${howpublished}). ${note}.")
                 (nil . "${author}, *${title}* (${year})."))))
#+END_SRC
*** org-roam

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-roam
  :after org
  :hook
  (after-init . org-roam-mode)
  :straight (:host github :repo "jethrokuan/org-roam") ;; removing this causes mad errors.
  :init
  (setq org-roam-directory brain-dir
        org-roam-link-title-format "§%s"
        org-roam-link-representation 'title)

  (setq org-roam-capture-templates
        '(("d" "default" plain (function org-roam--capture-get-point)
           "%?"
           :file-name "${slug}"
           :head "#+SETUPFILE:./hugo_setup.org
,#+HUGO_SLUG: ${slug}
,#+TITLE: ${title}\n"
           :unnarowed t)
          ("b" "book" plain (function org-roam--capture-get-point)
           "%?"
           :file-name "books/${slug}"
           :head "#+SETUPFILE:./hugo_setup.org
,#+HUGO_SECTION: books
,#+HUGO_SLUG: ${slug}
,#+TITLE: ${title}\n

- author ::
- tags :: "
           :unnarowed t)
          ("d" "default" plain (function org-roam--capture-get-point)
           "%?"
           :file-name "${slug}"
           :head "#+SETUPFILE:./hugo_setup.org
,#+HUGO_SLUG: ${slug}
,#+TITLE: ${title}\n"
           :unnarowed t)
          ("d" "default" plain (function org-roam--capture-get-point)
           "%?"
           :file-name "${slug}"
           :head "#+SETUPFILE:./hugo_setup.org
,#+HUGO_SLUG: ${slug}
,#+TITLE: ${title}\n"
           :unnarowed t)))
  (setq org-roam-ref-capture-templates
        '(("r" "ref" plain (function org-roam--capture-get-point)
           "%?"
           :file-name "websites/${slug}"
           :head "#+SETUPFILE:./hugo_setup.org
,#+ROAM_KEY: ${ref}
,#+HUGO_SLUG: ${slug}
,#+TITLE: ${title}
- source :: ${ref}"
           :unnarrowed t)))

  :config
  (require 'org-roam-protocol)
  (defun my/org-roam--backlinks-list (file)
    (if (org-roam--org-roam-file-p file)
        (--reduce-from
         (concat acc (format "- [[file:%s][%s]]\n"
                             (file-relative-name (car it) org-roam-directory)
                             (org-roam--get-title-or-slug (car it))))
         "" (org-roam-sql [:select [file-from] :from file-links :where (= file-to $s1)] file))
      ""))

  (defun my/org-export-preprocessor (backend)
    (let ((links (my/org-roam--backlinks-list (buffer-file-name))))
      (unless (string= links "")
        (save-excursion
          (goto-char (point-max))
          (insert (concat "\n* Backlinks\n") links)))))

  (add-hook 'org-export-before-processing-hook 'my/org-export-preprocessor)

  (defun my/org-visit-bibliography ()
    (interactive)
    (find-file (expand-file-name (concat "./bib/" (file-name-base buffer-file-name) ".bib")))))
#+END_SRC
*** org-super-agenda

A package which allows for much greater customization of the org agenda.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-super-agenda
  :after org-agenda
  :init
  (setq org-super-agenda-groups '((:name "High Priority"
                                         :time-grid t
                                         :priority "A")
                                  (:name "Habits"
                                         :time-grid t
                                         :tag "habit")
                                  (:name "Personal"
                                         :time-grid t
                                         :and (:tag "personal"
                                                    :not (:tag "habit")))
                                  (:name "School"
                                         :time-grid t
                                         :file-path "school"))
        org-super-agenda-header-map (make-sparse-keymap)) ;; removes custom keybindings which are in opposition to evil-org

  :config
  (org-super-agenda-mode))
#+END_SRC

*** ox-hugo
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ox-hugo
  :after ox
  :init
  (setq org-hugo-set-lastmod t
        org-hugo-default-section-directory "notes"))
#+END_SRC
*** ox-Pandoc
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ox-pandoc
  :config
  (setq org-pandoc-menu-entry
        '(
          (?l "to latex-pdf and open." org-pandoc-export-to-latex-pdf-and-open)
          (?L "to latex-pdf." org-pandoc-export-to-latex-pdf)
          (?4 "to html5 and open." org-pandoc-export-to-html5-and-open)
          (?$ "as html5." org-pandoc-export-as-html5))))
#+END_SRC
* LaTeX
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package latex
  :straight auctex
  :config
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (prettify-symbols-mode)))
  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  (setq TeX-save-query nil)
  (setq TeX-auto-save t)
  (setq Tex-parse-self t)
  (setq TeX-PDF-mode t)
  ;; Method for enabling forward and inverse search 
  (setq TeX-source-correlate-method 'synctex)
  ;; inhibit the question to start a server process
  (setq TeX-source-correlate-start-server t)
  (setq TeX-view-program-selection '((output-pdf "Okular"))))
(set-default 'preview-scale-function 2.0)
#+END_SRC

** RefTeX

Allow RefTeX to plug into AUCTeX

#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)
(setq reftex-extra-bindings t)
(setq reftex-use-external-file-handlers t)
#+END_SRC

* Development
** Flycheck
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package flycheck)
#+END_SRC
** EditorConfig
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package editorconfig
  :config
  (editorconfig-mode 1))
#+END_SRC
** Web
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package web-mode
  :defer t
  :mode "\\.p?html?$")

(use-package gulp-task-runner
  :defer t)
#+END_SRC
** Javascript

*** prettier-js

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package prettier-js
  :custom (prettier-js-args '("--print-width" "100"
                              "--single-quote" "true"
                              "--trailing-comma" "all")))
#+END_SRC
*** js2-mode

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package js2-mode
  :mode "\\.m?js\\'"
  :custom
  (js-indent-level 2))
#+END_SRC

*** js2-refactor

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package js2-refactor
  :hook (((js2-mode rjsx-mode) . js2-refactor-mode)))
#+END_SRC

*** xref-js2

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package xref-js2
  :after (:or js2-mode rjsx-mode))
#+END_SRC

*** rjsx-mode

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package rjsx-mode
  :mode "components/.+\\.js$")
#+END_SRC
** LSP-mode
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package lsp-mode
  :hook ((c-mode c++-mode dart-mode java-mode python-mode xml-mode) . lsp)
  :commands lsp
  :init
  (setq lsp-prefer-flymake nil
        lsp-session-file (concat emacs-etc-dir "lsp-session")))

(use-package lsp-ui
  :config
  (setq lsp-ui-doc-enable nil
        lsp-ui-sideline-show-hover nil))
(use-package company-lsp)
#+END_SRC

** C/C++

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ccls
  :defer t
  :after projectile
  :init
  (setq ccls-executable (executable-find "ccls"))
  :config
  (add-to-list 'projectile-globally-ignored-directories ".ccls-cache")
  (setq projectile-project-root-files-top-down-recurring
        (append '("compile_commands.json" ".ccls")
                projectile-project-root-files-top-down-recurring))
  :hook ((c-mode c++-mode objc-mode) .
         (lambda () (require 'ccls) (lsp))))
#+END_SRC

To configure a new C program:
1. Create a =CMakeLists.txt= file. Eg:
#+BEGIN_SRC cmake :tangle no
cmake_minimum_required(VERSION 3.10)

# set the project name
project(Tutorial)

# add the executable
add_executable(Tutorial tutorial.cxx)
#+END_SRC

2. Run the following commands:
#+BEGIN_SRC shell :tangle no
cmake -H. -BDebug -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=YES
ln -s Debug/compile_commands.json
#+END_SRC

** CMake

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package cmake-mode
  :mode ("CMAKELists\\.txt\\'" "\\.cmake\\'"))

(use-package cmake-font-lock
  :after (cmake-mode)
  :hook (cmake-mode . cmake-font-lock-activate))
#+END_SRC

** Python

As always, trying to make use of LSP.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package lsp-python-ms
  :defer 0.3
  :init
  (setq lsp-python-ms-dir (concat emacs-etc-dir "mspyls/")))

(use-package python
  :delight "π "
  :bind (("M-[" . python-nav-backward-block)
         ("M-]" . python-nav-forward-block)))
#+END_SRC
** Lua

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package lua-mode
  :delight "Λ "
  :mode "\\.lua\\'"
  :interpreter ("lua" . lua-mode))
#+END_SRC

* Writing
** Olivetti

Writing environment

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package olivetti
  :config
  (setq olivetti-body-width 80))
#+END_SRC

* Functions
** Writing Function

#+BEGIN_SRC emacs-lisp :tangle yes
(defvar writemode 1 "Set default writing mode state.")
(defun writing-mode ()
  "Configure writing environment."
  (interactive)
  (cond
   ((= writemode 1)
    ;;(focus-mode t)
    (olivetti-mode t)
    (variable-pitch-mode 1) ;; All fonts with variable pitch.
    (text-scale-increase 0.5)
    (display-line-numbers-mode -1)
    (setq english-mode 1)
    (setq-local writemode 2))
   ((= writemode 2)
    ;;(focus-mode -1)
    (olivetti-mode -1)
    (variable-pitch-mode 0) ;; All fonts with variable pitch.
    (text-scale-decrease 0)
    (display-line-numbers-mode t)
    (setq english-mode 2)
    (setq-local display-line-numbers 'relative)
    (setq-local writemode 1))))
#+END_SRC
** English Mode
#+BEGIN_SRC emacs-lisp :tangle yes
(defvar englishmode 1 "Set default English mode state.")
(defun english-mode ()
  "Toggle English spellchecking"
  (interactive)
  (cond
   ((= englishmode 1)
    (message "Enabled English Mode")
    (flycheck-mode 1)
    (setq flycheck-checker 'proselint)
    (flyspell-mode 1)
                                        ;(setq ispell-current-dictionary "en_CA")
    (ispell-change-dictionary "english")
    (setq englishmode 2))
   ((= englishmode 2)
    (message "Disabled English mode")
    (flycheck-mode -1)
    (flyspell-mode -1)
    (setq englishmode 1))))
#+END_SRC
** Ispell

#+BEGIN_SRC emacs-lisp :tangle yes
;; find aspell and hunspell automatically
(use-package flyspell
  :config
  (setq ispell-program-name "aspell"))
#+END_SRC
* Organization
** Reviews
#+BEGIN_SRC emacs-lisp :tangle yes
(defun my/daily-review ()
  (interactive)
  (let ((org-capture-templates '(("d" "Daily Review" entry (file+datetree (lambda () (concat tasks-dir "reviews_" (format-time-string "%Y") ".org")))
                                  (file "~/Drive/Tasks/Templates/daily-review.org")))))
    (progn
      (org-capture nil "d"))))

(defun my/weekly-review ()
  (interactive)
  (let ((org-capture-templates '(("w" "Weekly Review" entry (file+olp+datetree (lambda () (concat tasks-dir "reviews_" (format-time-string "%Y") ".org")))
                                  (file "~/Drive/Tasks/Templates/weekly-review.org")))))
    (progn
      (org-capture nil "w")
      (org-capture-finalize t)
      (org-speed-move-safe 'outline-up-heading)
      (org-narrow-to-subtree))))

(defun my/monthly-review ()
  (interactive)
  (let ((org-capture-templates '(("m" "Monthly Review" entry (file+olp+datetree (lambda () (concat tasks-dir "reviews_" (format-time-string "%Y") ".org")))
                                  (file "~/Drive/Tasks/Templates/monthly-review.org")))))
    (progn
      (org-capture nil "m")
      (org-capture-finalize t)
      (org-speed-move-safe 'outline-up-heading)
      (org-narrow-to-subtree))))
#+END_SRC
* Post Initialization
** Restore garbage collector

Reset garbage collector to a reasonable default. If freezing or stuttering occurs, reduce gc-cons-threshold.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq gc-cons-threshold 16777216
      gc-cons-percentage 0.1)
#+END_SRC
